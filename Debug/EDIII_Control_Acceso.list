
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002170  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec0  08007ec0  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec0  08007ec0  00008ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec8  08007ec8  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec8  08007ec8  00008ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ecc  08007ecc  00008ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08007ed0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004530  20000024  08007ef4  00009024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004554  08007ef4  00009554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d8e  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2f  00000000  00000000  00020de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00024a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001198  00000000  00000000  000260b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019edb  00000000  00000000  00027248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e78e  00000000  00000000  00041123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b96c  00000000  00000000  0005f8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb21d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  000fb260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000024 	.word	0x20000024
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d38 	.word	0x08005d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000028 	.word	0x20000028
 80001dc:	08005d38 	.word	0x08005d38

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HandleInput>:
#include "keypad.h"
/*Funciones relacionadas al keypad*/
eventoSecuencia HandleInput(FSM *FSM1){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoEnviado;
	uint8_t KeyPressed;
	if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){		//Mientras no se supere el timeout puedo ingresar digito
 80004d8:	f004 fbde 	bl	8004c98 <xTaskGetTickCount>
 80004dc:	4602      	mov	r2, r0
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d849      	bhi.n	8000580 <HandleInput+0xb0>
		KeyPressed = GetKey();
 80004ec:	f000 f852 	bl	8000594 <GetKey>
 80004f0:	4603      	mov	r3, r0
 80004f2:	73bb      	strb	r3, [r7, #14]
		if(KeyPressed != 0){
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d03f      	beq.n	800057a <HandleInput+0xaa>
			if(KeyPressed == BORRAR_DIGITO){
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	2b23      	cmp	r3, #35	@ 0x23
 80004fe:	d119      	bne.n	8000534 <HandleInput+0x64>
				FSM1->CurrentIndex--;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	3b01      	subs	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	719a      	strb	r2, [r3, #6]
				FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2100      	movs	r1, #0
 8000516:	5499      	strb	r1, [r3, r2]
				FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8000518:	f004 fbbe 	bl	8004c98 <xTaskGetTickCount>
 800051c:	4602      	mov	r2, r0
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	609a      	str	r2, [r3, #8]
				FSM1->CurrentState--;									//Vuelvo al estado anterior
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	79db      	ldrb	r3, [r3, #7]
 8000526:	3b01      	subs	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 800052e:	2303      	movs	r3, #3
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	e02a      	b.n	800058a <HandleInput+0xba>
			}
			else{
				if(KeyPressed == ENTER){
 8000534:	7bbb      	ldrb	r3, [r7, #14]
 8000536:	2b2a      	cmp	r3, #42	@ 0x2a
 8000538:	d105      	bne.n	8000546 <HandleInput+0x76>
					/*Esta seccion maneja el caso de secuencia incompleta*/
					FSM1->CurrentState = INCOMPLETO;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2208      	movs	r2, #8
 800053e:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_SECUENCIA_INCOMPLETA;
 8000540:	2307      	movs	r3, #7
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e021      	b.n	800058a <HandleInput+0xba>
				}
				else{
					/*Esta seccion se encarga de tomar cualquier otro digito*/
					FSM1->Buffer[FSM1->CurrentIndex] = KeyPressed;			//Guardo el digito en el buffer
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7bba      	ldrb	r2, [r7, #14]
 8000550:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();
 800055e:	f004 fb9b 	bl	8004c98 <xTaskGetTickCount>
 8000562:	4602      	mov	r2, r0
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState++;									//Paso al siguiente estado
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	79db      	ldrb	r3, [r3, #7]
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;
 8000574:	2302      	movs	r3, #2
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e007      	b.n	800058a <HandleInput+0xba>
				}

			}
		}
		else{
			eventoEnviado = PANTALLA_IDLE;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e004      	b.n	800058a <HandleInput+0xba>
		}
	}
	else{
		FSM1->CurrentState = TIMEOUT;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2207      	movs	r2, #7
 8000584:	71da      	strb	r2, [r3, #7]
		eventoEnviado = PANTALLA_TIMEOUT;
 8000586:	2306      	movs	r3, #6
 8000588:	73fb      	strb	r3, [r7, #15]
	}
	return eventoEnviado;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <GetKey>:

uint8_t GetKey(void){
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b08b      	sub	sp, #44	@ 0x2c
 8000598:	af00      	add	r7, sp, #0
	/*Esta funcion realiza un barrido al keypad matricial 4x4*/
	/*Si se presiona una tecla, devuelve el ascii asociado. Si no, devuelve 0*/
	uint16_t PinRows[ROWS] = {GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 800059a:	4a43      	ldr	r2, [pc, #268]	@ (80006a8 <GetKey+0x114>)
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t PinCols[COLS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};
 80005a8:	4a40      	ldr	r2, [pc, #256]	@ (80006ac <GetKey+0x118>)
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t KeyPressed;
	char Keypad[ROWS][COLS] = {
 80005b6:	4b3e      	ldr	r3, [pc, #248]	@ (80006b0 <GetKey+0x11c>)
 80005b8:	1d3c      	adds	r4, r7, #4
 80005ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      {'4', '5', '6', 'B'},
	      {'7', '8', '9', 'C'},
	      {'*', '0', '#', 'D'}
	 };
	 /*Escaneo el teclado en busca de 1 tecla presionada. Si hay tecla presionada*/
	 for(uint8_t i = 0; i < ROWS; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80005c6:	e066      	b.n	8000696 <GetKey+0x102>
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_SET);					//Prendo y apago secuencialmente las filas
 80005c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	3328      	adds	r3, #40	@ 0x28
 80005d0:	443b      	add	r3, r7
 80005d2:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	4836      	ldr	r0, [pc, #216]	@ (80006b4 <GetKey+0x120>)
 80005dc:	f001 fbfc 	bl	8001dd8 <HAL_GPIO_WritePin>
		 for(uint8_t j = 0; j < COLS; j++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80005e6:	e041      	b.n	800066c <GetKey+0xd8>
			 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){			//Barro las columnas y verifico si se presiona una tecla
 80005e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	3328      	adds	r3, #40	@ 0x28
 80005f0:	443b      	add	r3, r7
 80005f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80005f6:	4619      	mov	r1, r3
 80005f8:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <GetKey+0x120>)
 80005fa:	f001 fbd5 	bl	8001da8 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d12e      	bne.n	8000662 <GetKey+0xce>
				 vTaskDelay(20 / portTICK_RATE_MS);								//Espero 20 ms y reconfirmo el estado. Si no se reconfirma sigue el barrido.
 8000604:	2014      	movs	r0, #20
 8000606:	f004 fa03 	bl	8004a10 <vTaskDelay>
				 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){
 800060a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	3328      	adds	r3, #40	@ 0x28
 8000612:	443b      	add	r3, r7
 8000614:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000618:	4619      	mov	r1, r3
 800061a:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <GetKey+0x120>)
 800061c:	f001 fbc4 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11d      	bne.n	8000662 <GetKey+0xce>
					 KeyPressed = (uint8_t) Keypad[i][j];
 8000626:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800062a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	3228      	adds	r2, #40	@ 0x28
 8000632:	443a      	add	r2, r7
 8000634:	4413      	add	r3, r2
 8000636:	3b24      	subs	r3, #36	@ 0x24
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);		//Pongo fila a 0 antes de salir de la funcion.
 800063e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	3328      	adds	r3, #40	@ 0x28
 8000646:	443b      	add	r3, r7
 8000648:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <GetKey+0x120>)
 8000652:	f001 fbc1 	bl	8001dd8 <HAL_GPIO_WritePin>
					 vTaskDelay(150/ portTICK_RATE_MS);
 8000656:	2096      	movs	r0, #150	@ 0x96
 8000658:	f004 f9da 	bl	8004a10 <vTaskDelay>
					 return KeyPressed;
 800065c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000660:	e01e      	b.n	80006a0 <GetKey+0x10c>
		 for(uint8_t j = 0; j < COLS; j++){
 8000662:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000666:	3301      	adds	r3, #1
 8000668:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800066c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000670:	2b03      	cmp	r3, #3
 8000672:	d9b9      	bls.n	80005e8 <GetKey+0x54>
				 }
			 }
		 }
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);
 8000674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	3328      	adds	r3, #40	@ 0x28
 800067c:	443b      	add	r3, r7
 800067e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <GetKey+0x120>)
 8000688:	f001 fba6 	bl	8001dd8 <HAL_GPIO_WritePin>
	 for(uint8_t i = 0; i < ROWS; i++){
 800068c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000690:	3301      	adds	r3, #1
 8000692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800069a:	2b03      	cmp	r3, #3
 800069c:	d994      	bls.n	80005c8 <GetKey+0x34>
	 }
	 return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	372c      	adds	r7, #44	@ 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	08005d50 	.word	0x08005d50
 80006ac:	08005d58 	.word	0x08005d58
 80006b0:	08005d60 	.word	0x08005d60
 80006b4:	40020800 	.word	0x40020800

080006b8 <ClearBuffer>:
		str++;
	}
	return;
}

void ClearBuffer(uint8_t *Buffer, uint8_t size){
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e007      	b.n	80006da <ClearBuffer+0x22>
		Buffer[i] = 0;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	3301      	adds	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	7bfa      	ldrb	r2, [r7, #15]
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3f3      	bcc.n	80006ca <ClearBuffer+0x12>
	}
	return;
 80006e2:	bf00      	nop
}
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <displayInit>:
#include "screen.h"
extern QueueHandle_t uiQueue;

void displayInit(void){
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80006f2:	f000 f917 	bl	8000924 <ssd1306_Init>
	return;
 80006f6:	bf00      	nop
}
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <displayInsertKeyMsg>:

void displayInsertKeyMsg(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f974 	bl	80009f8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fab8 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <displayInsertKeyMsg+0x68>)
 800071e:	2201      	movs	r2, #1
 8000720:	9200      	str	r2, [sp, #0]
 8000722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <displayInsertKeyMsg+0x6c>)
 8000726:	f000 fa8b 	bl	8000c40 <ssd1306_WriteString>
	x += 15;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	330f      	adds	r3, #15
 800072e:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	331a      	adds	r3, #26
 8000734:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 faa5 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <displayInsertKeyMsg+0x68>)
 8000744:	2201      	movs	r2, #1
 8000746:	9200      	str	r2, [sp, #0]
 8000748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800074a:	4808      	ldr	r0, [pc, #32]	@ (800076c <displayInsertKeyMsg+0x70>)
 800074c:	f000 fa78 	bl	8000c40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000750:	f000 f96a 	bl	8000a28 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 8000754:	2000      	movs	r0, #0
 8000756:	f000 f94f 	bl	80009f8 <ssd1306_Fill>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08007e9c 	.word	0x08007e9c
 8000768:	08005d70 	.word	0x08005d70
 800076c:	08005d78 	.word	0x08005d78

08000770 <displayTimeoutMsg>:

void displayTimeoutMsg(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8000776:	2305      	movs	r3, #5
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 800077a:	2312      	movs	r3, #18
 800077c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f93a 	bl	80009f8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8000784:	79ba      	ldrb	r2, [r7, #6]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fa7e 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <displayTimeoutMsg+0x3c>)
 8000792:	2201      	movs	r2, #1
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <displayTimeoutMsg+0x40>)
 800079a:	f000 fa51 	bl	8000c40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800079e:	f000 f943 	bl	8000a28 <ssd1306_UpdateScreen>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08007e90 	.word	0x08007e90
 80007b0:	08005d80 	.word	0x08005d80

080007b4 <displayIncompleteMsg>:

void displayIncompleteMsg(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 80007ba:	2314      	movs	r3, #20
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f918 	bl	80009f8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fa5c 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <displayIncompleteMsg+0x84>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007dc:	4817      	ldr	r0, [pc, #92]	@ (800083c <displayIncompleteMsg+0x88>)
 80007de:	f000 fa2f 	bl	8000c40 <ssd1306_WriteString>
	x = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	3312      	adds	r3, #18
 80007ea:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fa4a 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <displayIncompleteMsg+0x84>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	9200      	str	r2, [sp, #0]
 80007fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <displayIncompleteMsg+0x8c>)
 8000802:	f000 fa1d 	bl	8000c40 <ssd1306_WriteString>
	x = 20;
 8000806:	2314      	movs	r3, #20
 8000808:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	3312      	adds	r3, #18
 800080e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fa38 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <displayIncompleteMsg+0x84>)
 800081e:	2201      	movs	r2, #1
 8000820:	9200      	str	r2, [sp, #0]
 8000822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <displayIncompleteMsg+0x90>)
 8000826:	f000 fa0b 	bl	8000c40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800082a:	f000 f8fd 	bl	8000a28 <ssd1306_UpdateScreen>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08007e90 	.word	0x08007e90
 800083c:	08005d70 	.word	0x08005d70
 8000840:	08005d8c 	.word	0x08005d8c
 8000844:	08005d98 	.word	0x08005d98

08000848 <displayAccessState>:

void displayAccessState(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 800084e:	2305      	movs	r3, #5
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f8ce 	bl	80009f8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800085c:	79ba      	ldrb	r2, [r7, #6]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fa12 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <displayAccessState+0x5c>)
 800086a:	2201      	movs	r2, #1
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <displayAccessState+0x60>)
 8000872:	f000 f9e5 	bl	8000c40 <ssd1306_WriteString>
	y += 18;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	3312      	adds	r3, #18
 800087a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa02 	bl	8000c8c <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <displayAccessState+0x5c>)
 800088a:	2201      	movs	r2, #1
 800088c:	9200      	str	r2, [sp, #0]
 800088e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000890:	4806      	ldr	r0, [pc, #24]	@ (80008ac <displayAccessState+0x64>)
 8000892:	f000 f9d5 	bl	8000c40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000896:	f000 f8c7 	bl	8000a28 <ssd1306_UpdateScreen>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08007e90 	.word	0x08007e90
 80008a8:	08005da0 	.word	0x08005da0
 80008ac:	08005da8 	.word	0x08005da8

080008b0 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	2200      	movs	r2, #0
 80008dc:	2178      	movs	r1, #120	@ 0x78
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <ssd1306_WriteCommand+0x2c>)
 80008e0:	f001 fbd8 	bl	8002094 <HAL_I2C_Mem_Write>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000069c 	.word	0x2000069c

080008f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000902:	9202      	str	r2, [sp, #8]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	2240      	movs	r2, #64	@ 0x40
 800090e:	2178      	movs	r1, #120	@ 0x78
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <ssd1306_WriteData+0x30>)
 8000912:	f001 fbbf 	bl	8002094 <HAL_I2C_Mem_Write>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000069c 	.word	0x2000069c

08000924 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000928:	f7ff ffc2 	bl	80008b0 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f004 f86f 	bl	8004a10 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f9d6 	bl	8000ce4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000938:	2020      	movs	r0, #32
 800093a:	f7ff ffc1 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ffbe 	bl	80008c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000944:	20b0      	movs	r0, #176	@ 0xb0
 8000946:	f7ff ffbb 	bl	80008c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800094a:	20c8      	movs	r0, #200	@ 0xc8
 800094c:	f7ff ffb8 	bl	80008c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff ffb5 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000956:	2010      	movs	r0, #16
 8000958:	f7ff ffb2 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800095c:	2040      	movs	r0, #64	@ 0x40
 800095e:	f7ff ffaf 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000962:	20ff      	movs	r0, #255	@ 0xff
 8000964:	f000 f9aa 	bl	8000cbc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000968:	20a1      	movs	r0, #161	@ 0xa1
 800096a:	f7ff ffa9 	bl	80008c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800096e:	20a6      	movs	r0, #166	@ 0xa6
 8000970:	f7ff ffa6 	bl	80008c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000974:	20a8      	movs	r0, #168	@ 0xa8
 8000976:	f7ff ffa3 	bl	80008c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800097a:	203f      	movs	r0, #63	@ 0x3f
 800097c:	f7ff ffa0 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000980:	20a4      	movs	r0, #164	@ 0xa4
 8000982:	f7ff ff9d 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000986:	20d3      	movs	r0, #211	@ 0xd3
 8000988:	f7ff ff9a 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff97 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000992:	20d5      	movs	r0, #213	@ 0xd5
 8000994:	f7ff ff94 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000998:	20f0      	movs	r0, #240	@ 0xf0
 800099a:	f7ff ff91 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800099e:	20d9      	movs	r0, #217	@ 0xd9
 80009a0:	f7ff ff8e 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80009a4:	2022      	movs	r0, #34	@ 0x22
 80009a6:	f7ff ff8b 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80009aa:	20da      	movs	r0, #218	@ 0xda
 80009ac:	f7ff ff88 	bl	80008c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80009b0:	2012      	movs	r0, #18
 80009b2:	f7ff ff85 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009b6:	20db      	movs	r0, #219	@ 0xdb
 80009b8:	f7ff ff82 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009bc:	2020      	movs	r0, #32
 80009be:	f7ff ff7f 	bl	80008c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80009c2:	208d      	movs	r0, #141	@ 0x8d
 80009c4:	f7ff ff7c 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80009c8:	2014      	movs	r0, #20
 80009ca:	f7ff ff79 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 f988 	bl	8000ce4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f80f 	bl	80009f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80009da:	f000 f825 	bl	8000a28 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <ssd1306_Init+0xd0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <ssd1306_Init+0xd0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009ea:	4b02      	ldr	r3, [pc, #8]	@ (80009f4 <ssd1306_Init+0xd0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	711a      	strb	r2, [r3, #4]
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000440 	.word	0x20000440

080009f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <ssd1306_Fill+0x14>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e000      	b.n	8000a0e <ssd1306_Fill+0x16>
 8000a0c:	23ff      	movs	r3, #255	@ 0xff
 8000a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a12:	4619      	mov	r1, r3
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <ssd1306_Fill+0x2c>)
 8000a16:	f005 f955 	bl	8005cc4 <memset>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000040 	.word	0x20000040

08000a28 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e016      	b.n	8000a62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	3b50      	subs	r3, #80	@ 0x50
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff40 	bl	80008c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff ff3d 	bl	80008c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000a46:	2010      	movs	r0, #16
 8000a48:	f7ff ff3a 	bl	80008c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <ssd1306_UpdateScreen+0x4c>)
 8000a52:	4413      	add	r3, r2
 8000a54:	2180      	movs	r1, #128	@ 0x80
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff4a 	bl	80008f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d9e5      	bls.n	8000a34 <ssd1306_UpdateScreen+0xc>
    }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000040 	.word	0x20000040

08000a78 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	460b      	mov	r3, r1
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db3d      	blt.n	8000b0e <ssd1306_DrawPixel+0x96>
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a96:	d83a      	bhi.n	8000b0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d11a      	bne.n	8000ad4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	b2d8      	uxtb	r0, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	01db      	lsls	r3, r3, #7
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <ssd1306_DrawPixel+0xa4>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	b25a      	sxtb	r2, r3
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b259      	sxtb	r1, r3
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	01db      	lsls	r3, r3, #7
 8000aca:	4413      	add	r3, r2
 8000acc:	b2c9      	uxtb	r1, r1
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <ssd1306_DrawPixel+0xa4>)
 8000ad0:	54d1      	strb	r1, [r2, r3]
 8000ad2:	e01d      	b.n	8000b10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b2d8      	uxtb	r0, r3
 8000adc:	4603      	mov	r3, r0
 8000ade:	01db      	lsls	r3, r3, #7
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <ssd1306_DrawPixel+0xa4>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	2101      	movs	r1, #1
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	4013      	ands	r3, r2
 8000afc:	b259      	sxtb	r1, r3
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	4603      	mov	r3, r0
 8000b02:	01db      	lsls	r3, r3, #7
 8000b04:	4413      	add	r3, r2
 8000b06:	b2c9      	uxtb	r1, r1
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <ssd1306_DrawPixel+0xa4>)
 8000b0a:	54d1      	strb	r1, [r2, r3]
 8000b0c:	e000      	b.n	8000b10 <ssd1306_DrawPixel+0x98>
        return;
 8000b0e:	bf00      	nop
    }
}
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000040 	.word	0x20000040

08000b20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4604      	mov	r4, r0
 8000b28:	4638      	mov	r0, r7
 8000b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000b2e:	4623      	mov	r3, r4
 8000b30:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b1f      	cmp	r3, #31
 8000b36:	d902      	bls.n	8000b3e <ssd1306_WriteChar+0x1e>
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b3c:	d901      	bls.n	8000b42 <ssd1306_WriteChar+0x22>
        return 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e077      	b.n	8000c32 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	783b      	ldrb	r3, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2b80      	cmp	r3, #128	@ 0x80
 8000b4e:	dc06      	bgt.n	8000b5e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000b52:	885b      	ldrh	r3, [r3, #2]
 8000b54:	461a      	mov	r2, r3
 8000b56:	787b      	ldrb	r3, [r7, #1]
 8000b58:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000b5a:	2b40      	cmp	r3, #64	@ 0x40
 8000b5c:	dd01      	ble.n	8000b62 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e067      	b.n	8000c32 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e04e      	b.n	8000c06 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	3b20      	subs	r3, #32
 8000b6e:	7879      	ldrb	r1, [r7, #1]
 8000b70:	fb01 f303 	mul.w	r3, r1, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	440b      	add	r3, r1
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	e036      	b.n	8000bf6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2d8      	uxtb	r0, r3
 8000ba6:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <ssd1306_DrawPixel>
 8000bbe:	e017      	b.n	8000bf0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000bd0:	885b      	ldrh	r3, [r3, #2]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f7ff ff44 	bl	8000a78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	783b      	ldrb	r3, [r7, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d3c3      	bcc.n	8000b88 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	3301      	adds	r3, #1
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	787b      	ldrb	r3, [r7, #1]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d3ab      	bcc.n	8000b68 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d005      	beq.n	8000c26 <ssd1306_WriteChar+0x106>
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	3a20      	subs	r2, #32
 8000c20:	440a      	add	r2, r1
 8000c22:	7812      	ldrb	r2, [r2, #0]
 8000c24:	e000      	b.n	8000c28 <ssd1306_WriteChar+0x108>
 8000c26:	783a      	ldrb	r2, [r7, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <ssd1306_WriteChar+0x11c>)
 8000c2e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	@ 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000440 	.word	0x20000440

08000c40 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	4638      	mov	r0, r7
 8000c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000c4e:	e013      	b.n	8000c78 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	7818      	ldrb	r0, [r3, #0]
 8000c54:	7e3b      	ldrb	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	463b      	mov	r3, r7
 8000c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5c:	f7ff ff60 	bl	8000b20 <ssd1306_WriteChar>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d002      	beq.n	8000c72 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	e008      	b.n	8000c84 <ssd1306_WriteString+0x44>
        }
        str++;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1e7      	bne.n	8000c50 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <ssd1306_SetCursor+0x2c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <ssd1306_SetCursor+0x2c>)
 8000caa:	805a      	strh	r2, [r3, #2]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20000440 	.word	0x20000440

08000cbc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000cc6:	2381      	movs	r3, #129	@ 0x81
 8000cc8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fdf7 	bl	80008c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdf3 	bl	80008c0 <ssd1306_WriteCommand>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000cf4:	23af      	movs	r3, #175	@ 0xaf
 8000cf6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <ssd1306_SetDisplayOn+0x38>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	715a      	strb	r2, [r3, #5]
 8000cfe:	e004      	b.n	8000d0a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000d00:	23ae      	movs	r3, #174	@ 0xae
 8000d02:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <ssd1306_SetDisplayOn+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fdd7 	bl	80008c0 <ssd1306_WriteCommand>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000440 	.word	0x20000440

08000d20 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <vApplicationGetIdleTaskMemory+0x30>)
 8000d36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000448 	.word	0x20000448
 8000d50:	2000049c 	.word	0x2000049c

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fd59 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f843 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f93b 	bl	8000fdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d66:	f000 f90f 	bl	8000f88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d6a:	f000 f8a9 	bl	8000ec0 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000d6e:	f000 f8d5 	bl	8000f1c <MX_SPI3_Init>
  MX_FATFS_Init();
 8000d72:	f002 ff83 	bl	8003c7c <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoSecuencia));
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f003 f962 	bl	8004044 <xQueueGenericCreate>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <main+0x78>)
 8000d84:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000d86:	2300      	movs	r3, #0
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2280      	movs	r2, #128	@ 0x80
 8000d92:	490f      	ldr	r1, [pc, #60]	@ (8000dd0 <main+0x7c>)
 8000d94:	480f      	ldr	r0, [pc, #60]	@ (8000dd4 <main+0x80>)
 8000d96:	f003 fd03 	bl	80047a0 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(SavingOnSD, "Tarea 02", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <main+0x84>)
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <main+0x88>)
 8000daa:	f003 fcf9 	bl	80047a0 <xTaskCreate>
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000dae:	2300      	movs	r3, #0
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	4909      	ldr	r1, [pc, #36]	@ (8000de0 <main+0x8c>)
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <main+0x90>)
 8000dbe:	f003 fcef 	bl	80047a0 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000dc2:	f003 fe5b 	bl	8004a7c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc6:	bf00      	nop
 8000dc8:	e7fd      	b.n	8000dc6 <main+0x72>
 8000dca:	bf00      	nop
 8000dcc:	20000790 	.word	0x20000790
 8000dd0:	08005db4 	.word	0x08005db4
 8000dd4:	080016c5 	.word	0x080016c5
 8000dd8:	08005dc0 	.word	0x08005dc0
 8000ddc:	080014dd 	.word	0x080014dd
 8000de0:	08005dcc 	.word	0x08005dcc
 8000de4:	080017b1 	.word	0x080017b1

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	@ 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 ff64 	bl	8005cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e50:	2310      	movs	r3, #16
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e54:	2302      	movs	r3, #2
 8000e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e66:	2304      	movs	r3, #4
 8000e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fc78 	bl	8002768 <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e7e:	f000 f96e 	bl	800115e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 feda 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eaa:	f000 f958 	bl	800115e <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3750      	adds	r7, #80	@ 0x50
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <MX_I2C1_Init+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_I2C1_Init+0x58>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000efe:	f000 ff85 	bl	8001e0c <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f929 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000069c 	.word	0x2000069c
 8000f14:	40005400 	.word	0x40005400
 8000f18:	00061a80 	.word	0x00061a80

08000f1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <MX_SPI3_Init+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_SPI3_Init+0x64>)
 8000f6e:	f002 f8c5 	bl	80030fc <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f78:	f000 f8f1 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200006f0 	.word	0x200006f0
 8000f84:	40003c00 	.word	0x40003c00

08000f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <MX_USART2_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f002 fb98 	bl	80036f4 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 f8c8 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000748 	.word	0x20000748
 8000fd8:	40004400 	.word	0x40004400

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8001130 <MX_GPIO_Init+0x154>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <MX_GPIO_Init+0x154>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a46      	ldr	r2, [pc, #280]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b40      	ldr	r3, [pc, #256]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a3f      	ldr	r2, [pc, #252]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b3d      	ldr	r3, [pc, #244]	@ (8001130 <MX_GPIO_Init+0x154>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <MX_GPIO_Init+0x154>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a38      	ldr	r2, [pc, #224]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a31      	ldr	r2, [pc, #196]	@ (8001130 <MX_GPIO_Init+0x154>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <MX_GPIO_Init+0x154>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	482c      	ldr	r0, [pc, #176]	@ (8001134 <MX_GPIO_Init+0x158>)
 8001084:	f000 fea8 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800108e:	482a      	ldr	r0, [pc, #168]	@ (8001138 <MX_GPIO_Init+0x15c>)
 8001090:	f000 fea2 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <MX_GPIO_Init+0x160>)
 800109a:	f000 fe9d 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800109e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4820      	ldr	r0, [pc, #128]	@ (8001138 <MX_GPIO_Init+0x15c>)
 80010b6:	f000 fcf3 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010ba:	230f      	movs	r3, #15
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	481a      	ldr	r0, [pc, #104]	@ (8001138 <MX_GPIO_Init+0x15c>)
 80010ce:	f000 fce7 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d2:	2320      	movs	r3, #32
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4812      	ldr	r0, [pc, #72]	@ (8001134 <MX_GPIO_Init+0x158>)
 80010ea:	f000 fcd9 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80010ee:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80010f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <MX_GPIO_Init+0x15c>)
 8001108:	f000 fcca 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_GPIO_Init+0x160>)
 8001124:	f000 fcbc 	bl	8001aa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fb7f 	bl	8001854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_MspInit+0x54>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_MspInit+0x54>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_MspInit+0x54>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_MspInit+0x54>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_MspInit+0x54>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_MspInit+0x54>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f000 fc4b 	bl	8001a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <HAL_I2C_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12b      	bne.n	800123e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_I2C_MspInit+0x88>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_I2C_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001202:	23c0      	movs	r3, #192	@ 0xc0
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001212:	2304      	movs	r3, #4
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <HAL_I2C_MspInit+0x8c>)
 800121e:	f000 fc3f 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_I2C_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_I2C_MspInit+0x88>)
 800122c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_I2C_MspInit+0x88>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	@ 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12c      	bne.n	80012d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 8001280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c0:	2306      	movs	r3, #6
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <HAL_SPI_MspInit+0x8c>)
 80012cc:	f000 fbe8 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40003c00 	.word	0x40003c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12b      	bne.n	800135e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_UART_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <HAL_UART_MspInit+0x88>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_UART_MspInit+0x8c>)
 800135a:	f000 fba1 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004400 	.word	0x40004400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	@ 0x38
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_InitTick+0xe8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a33      	ldr	r2, [pc, #204]	@ (800145c <HAL_InitTick+0xe8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_InitTick+0xe8>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a0:	f107 0210 	add.w	r2, r7, #16
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fe74 	bl	8003098 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ba:	f001 fe45 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80013be:	6378      	str	r0, [r7, #52]	@ 0x34
 80013c0:	e004      	b.n	80013cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c2:	f001 fe41 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ce:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <HAL_InitTick+0xec>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	3b01      	subs	r3, #1
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <HAL_InitTick+0xf0>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_InitTick+0xf0>)
 80013e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_InitTick+0xf0>)
 80013ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_InitTick+0xf0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_InitTick+0xf0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_InitTick+0xf0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001402:	4818      	ldr	r0, [pc, #96]	@ (8001464 <HAL_InitTick+0xf0>)
 8001404:	f001 ff03 	bl	800320e <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800140e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001412:	2b00      	cmp	r3, #0
 8001414:	d11b      	bne.n	800144e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001416:	4813      	ldr	r0, [pc, #76]	@ (8001464 <HAL_InitTick+0xf0>)
 8001418:	f001 ff52 	bl	80032c0 <HAL_TIM_Base_Start_IT>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001422:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001426:	2b00      	cmp	r3, #0
 8001428:	d111      	bne.n	800144e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800142a:	201c      	movs	r0, #28
 800142c:	f000 fb2a 	bl	8001a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d808      	bhi.n	8001448 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001436:	2200      	movs	r2, #0
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	201c      	movs	r0, #28
 800143c:	f000 fb06 	bl	8001a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001440:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <HAL_InitTick+0xf4>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e002      	b.n	800144e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800144e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001452:	4618      	mov	r0, r3
 8001454:	3738      	adds	r7, #56	@ 0x38
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	20000794 	.word	0x20000794
 8001468:	20000004 	.word	0x20000004

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <TIM2_IRQHandler+0x10>)
 80014aa:	f001 ff6b 	bl	8003384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000794 	.word	0x20000794

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <KeypadScanning>:

void VoiceProcessing(void *pvParameters){

}

void KeypadScanning (void *pvParameters){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoEnviado;
	uint8_t keyPressed;
	FSM *FSM1 = &StateMachine;
 80014e4:	4b75      	ldr	r3, [pc, #468]	@ (80016bc <KeypadScanning+0x1e0>)
 80014e6:	60fb      	str	r3, [r7, #12]
	FSM1->CurrentState = ESPERA_DIGITO_1;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	71da      	strb	r2, [r3, #7]
	/*Inicio el funcionamiento con la pantalla inicial*/
	eventoEnviado = PANTALLA_INGRESE_CLAVE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	72bb      	strb	r3, [r7, #10]
	xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 80014f2:	4b73      	ldr	r3, [pc, #460]	@ (80016c0 <KeypadScanning+0x1e4>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f107 010a 	add.w	r1, r7, #10
 80014fa:	2300      	movs	r3, #0
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	f002 fdfa 	bl	80040f8 <xQueueGenericSend>
	while(1){
		switch(FSM1->CurrentState){
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	79db      	ldrb	r3, [r3, #7]
 8001508:	2b08      	cmp	r3, #8
 800150a:	f200 80ba 	bhi.w	8001682 <KeypadScanning+0x1a6>
 800150e:	a201      	add	r2, pc, #4	@ (adr r2, 8001514 <KeypadScanning+0x38>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001539 	.word	0x08001539
 8001518:	08001591 	.word	0x08001591
 800151c:	0800159d 	.word	0x0800159d
 8001520:	080015a9 	.word	0x080015a9
 8001524:	080015b5 	.word	0x080015b5
 8001528:	080015c1 	.word	0x080015c1
 800152c:	080015cd 	.word	0x080015cd
 8001530:	08001657 	.word	0x08001657
 8001534:	0800166d 	.word	0x0800166d
		case ESPERA_DIGITO_1:
			/*Parseo la primer tecla*/
			keyPressed = GetKey();
 8001538:	f7ff f82c 	bl	8000594 <GetKey>
 800153c:	4603      	mov	r3, r0
 800153e:	72fb      	strb	r3, [r7, #11]
			if(keyPressed != 0){
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d021      	beq.n	800158a <KeypadScanning+0xae>
            	if((keyPressed != BORRAR_DIGITO) && (keyPressed != ENTER)){
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	2b23      	cmp	r3, #35	@ 0x23
 800154a:	f000 80a5 	beq.w	8001698 <KeypadScanning+0x1bc>
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b2a      	cmp	r3, #42	@ 0x2a
 8001552:	f000 80a1 	beq.w	8001698 <KeypadScanning+0x1bc>
					FSM1->CurrentIndex = 0;												//Reinicializo indice del buffer
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	719a      	strb	r2, [r3, #6]
					FSM1->Buffer[FSM1->CurrentIndex] = keyPressed;						//Guardo el primer digito
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	799b      	ldrb	r3, [r3, #6]
 8001560:	4619      	mov	r1, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	7afa      	ldrb	r2, [r7, #11]
 8001566:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	799b      	ldrb	r3, [r3, #6]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();								//Guardo tiempo de inicio para el timeout
 8001574:	f003 fb90 	bl	8004c98 <xTaskGetTickCount>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState = ESPERA_DIGITO_2;								//Config estado para parsear la sig tecla
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;							//Defino indicaciones para el display
 8001584:	2302      	movs	r3, #2
 8001586:	72bb      	strb	r3, [r7, #10]
            	}
			}
			else{
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
			}
			break;
 8001588:	e086      	b.n	8001698 <KeypadScanning+0x1bc>
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
 800158a:	2301      	movs	r3, #1
 800158c:	72bb      	strb	r3, [r7, #10]
			break;
 800158e:	e083      	b.n	8001698 <KeypadScanning+0x1bc>
		case ESPERA_DIGITO_2:
			eventoEnviado = HandleInput(FSM1);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7fe ff9d 	bl	80004d0 <HandleInput>
 8001596:	4603      	mov	r3, r0
 8001598:	72bb      	strb	r3, [r7, #10]
			break;
 800159a:	e080      	b.n	800169e <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_3:
			eventoEnviado = HandleInput(FSM1);
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7fe ff97 	bl	80004d0 <HandleInput>
 80015a2:	4603      	mov	r3, r0
 80015a4:	72bb      	strb	r3, [r7, #10]
			break;
 80015a6:	e07a      	b.n	800169e <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_4:
			eventoEnviado = HandleInput(FSM1);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7fe ff91 	bl	80004d0 <HandleInput>
 80015ae:	4603      	mov	r3, r0
 80015b0:	72bb      	strb	r3, [r7, #10]
			break;
 80015b2:	e074      	b.n	800169e <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_5:
			eventoEnviado = HandleInput(FSM1);
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7fe ff8b 	bl	80004d0 <HandleInput>
 80015ba:	4603      	mov	r3, r0
 80015bc:	72bb      	strb	r3, [r7, #10]
			break;
 80015be:	e06e      	b.n	800169e <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_6:
			eventoEnviado = HandleInput(FSM1);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7fe ff85 	bl	80004d0 <HandleInput>
 80015c6:	4603      	mov	r3, r0
 80015c8:	72bb      	strb	r3, [r7, #10]
			break;
 80015ca:	e068      	b.n	800169e <KeypadScanning+0x1c2>
		case ESPERA_ENTER:
			if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 80015cc:	f003 fb64 	bl	8004c98 <xTaskGetTickCount>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80015dc:	4293      	cmp	r3, r2
 80015de:	d834      	bhi.n	800164a <KeypadScanning+0x16e>
				keyPressed = GetKey();
 80015e0:	f7fe ffd8 	bl	8000594 <GetKey>
 80015e4:	4603      	mov	r3, r0
 80015e6:	72fb      	strb	r3, [r7, #11]
				if(keyPressed != 0){
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d02a      	beq.n	8001644 <KeypadScanning+0x168>
					if(keyPressed == BORRAR_DIGITO){
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	2b23      	cmp	r3, #35	@ 0x23
 80015f2:	d119      	bne.n	8001628 <KeypadScanning+0x14c>
						FSM1->CurrentIndex--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	799b      	ldrb	r3, [r3, #6]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	719a      	strb	r2, [r3, #6]
						FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	799b      	ldrb	r3, [r3, #6]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]
						FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 800160c:	f003 fb44 	bl	8004c98 <xTaskGetTickCount>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	609a      	str	r2, [r3, #8]
						FSM1->CurrentState--;									//Vuelvo al estado anterior
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	79db      	ldrb	r3, [r3, #7]
 800161a:	3b01      	subs	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	71da      	strb	r2, [r3, #7]
						eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8001622:	2303      	movs	r3, #3
 8001624:	72bb      	strb	r3, [r7, #10]
			else{
				FSM1->CurrentState = TIMEOUT;
				eventoEnviado = PANTALLA_TIMEOUT;

			}
			break;
 8001626:	e039      	b.n	800169c <KeypadScanning+0x1c0>
						if(keyPressed == ENTER){
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	2b2a      	cmp	r3, #42	@ 0x2a
 800162c:	d136      	bne.n	800169c <KeypadScanning+0x1c0>
							eventoEnviado = PANTALLA_ACCESO_CONCEDIDO;
 800162e:	2304      	movs	r3, #4
 8001630:	72bb      	strb	r3, [r7, #10]
							ClearBuffer(FSM1->Buffer, 6);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2106      	movs	r1, #6
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f83e 	bl	80006b8 <ClearBuffer>
							FSM1->CurrentState = ESPERA_DIGITO_1;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	71da      	strb	r2, [r3, #7]
			break;
 8001642:	e02b      	b.n	800169c <KeypadScanning+0x1c0>
					eventoEnviado = PANTALLA_IDLE;								//No actualizar la pantalla
 8001644:	2300      	movs	r3, #0
 8001646:	72bb      	strb	r3, [r7, #10]
			break;
 8001648:	e028      	b.n	800169c <KeypadScanning+0x1c0>
				FSM1->CurrentState = TIMEOUT;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2207      	movs	r2, #7
 800164e:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_TIMEOUT;
 8001650:	2306      	movs	r3, #6
 8001652:	72bb      	strb	r3, [r7, #10]
			break;
 8001654:	e022      	b.n	800169c <KeypadScanning+0x1c0>
		case TIMEOUT:
			ClearBuffer(FSM1->Buffer, 6);								//Limpio buffer y vuelvo a estado inicial
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2106      	movs	r1, #6
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f82c 	bl	80006b8 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8001666:	2300      	movs	r3, #0
 8001668:	72bb      	strb	r3, [r7, #10]
			break;
 800166a:	e018      	b.n	800169e <KeypadScanning+0x1c2>
		case INCOMPLETO:
			ClearBuffer(FSM1->Buffer, 6);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2106      	movs	r1, #6
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f821 	bl	80006b8 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 800167c:	2300      	movs	r3, #0
 800167e:	72bb      	strb	r3, [r7, #10]
			break;
 8001680:	e00d      	b.n	800169e <KeypadScanning+0x1c2>
		default:
			ClearBuffer(FSM1->Buffer, 6);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2106      	movs	r1, #6
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f816 	bl	80006b8 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8001692:	2300      	movs	r3, #0
 8001694:	72bb      	strb	r3, [r7, #10]
			break;
 8001696:	e002      	b.n	800169e <KeypadScanning+0x1c2>
			break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <KeypadScanning+0x1c2>
			break;
 800169c:	bf00      	nop
		}
		/*Si el evento es PANTALLA_IDLE no se envian indicaciones al display*/
		/*En ese caso se deja la pantalla previa*/
		if(eventoEnviado != PANTALLA_IDLE) xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 800169e:	7abb      	ldrb	r3, [r7, #10]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f43f af2f 	beq.w	8001504 <KeypadScanning+0x28>
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <KeypadScanning+0x1e4>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	f107 010a 	add.w	r1, r7, #10
 80016ae:	2300      	movs	r3, #0
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	f002 fd20 	bl	80040f8 <xQueueGenericSend>
		switch(FSM1->CurrentState){
 80016b8:	e724      	b.n	8001504 <KeypadScanning+0x28>
 80016ba:	bf00      	nop
 80016bc:	200007dc 	.word	0x200007dc
 80016c0:	20000790 	.word	0x20000790

080016c4 <ScreenManager>:
	}
}

void ScreenManager  (void *pvParameters){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoRecibido = PANTALLA_INGRESE_CLAVE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	737b      	strb	r3, [r7, #13]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80016d0:	230a      	movs	r3, #10
 80016d2:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 26;
 80016d4:	231a      	movs	r3, #26
 80016d6:	73bb      	strb	r3, [r7, #14]
	displayInit();
 80016d8:	f7ff f809 	bl	80006ee <displayInit>
	while(1){
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <ScreenManager+0xdc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f107 010d 	add.w	r1, r7, #13
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fe07 	bl	80042fc <xQueueReceive>
		switch(eventoRecibido){
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	2b07      	cmp	r3, #7
 80016f2:	d853      	bhi.n	800179c <ScreenManager+0xd8>
 80016f4:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <ScreenManager+0x38>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800179d 	.word	0x0800179d
 8001700:	0800171d 	.word	0x0800171d
 8001704:	08001727 	.word	0x08001727
 8001708:	0800174d 	.word	0x0800174d
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800179d 	.word	0x0800179d
 8001714:	08001773 	.word	0x08001773
 8001718:	08001781 	.word	0x08001781
		case PANTALLA_INGRESE_CLAVE:
			x = 10;
 800171c:	230a      	movs	r3, #10
 800171e:	73fb      	strb	r3, [r7, #15]
			displayInsertKeyMsg();
 8001720:	f7fe ffec 	bl	80006fc <displayInsertKeyMsg>
			break;
 8001724:	e03b      	b.n	800179e <ScreenManager+0xda>
		case PANTALLA_AÑADIR_ENTRADA:
			ssd1306_SetCursor(x, y);
 8001726:	7bba      	ldrb	r2, [r7, #14]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff faad 	bl	8000c8c <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <ScreenManager+0xe0>)
 8001734:	2201      	movs	r2, #1
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173a:	481b      	ldr	r0, [pc, #108]	@ (80017a8 <ScreenManager+0xe4>)
 800173c:	f7ff fa80 	bl	8000c40 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001740:	f7ff f972 	bl	8000a28 <ssd1306_UpdateScreen>
			x += 16;													//Avanzo una posición en pantalla acorde al font seleccionado
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	3310      	adds	r3, #16
 8001748:	73fb      	strb	r3, [r7, #15]
			break;
 800174a:	e028      	b.n	800179e <ScreenManager+0xda>
		case PANTALLA_BORRAR_ENTRADA:
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	3b10      	subs	r3, #16
 8001750:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(x, y);
 8001752:	7bba      	ldrb	r2, [r7, #14]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa97 	bl	8000c8c <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <ScreenManager+0xe0>)
 8001760:	2201      	movs	r2, #1
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <ScreenManager+0xe8>)
 8001768:	f7ff fa6a 	bl	8000c40 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800176c:	f7ff f95c 	bl	8000a28 <ssd1306_UpdateScreen>
			break;
 8001770:	e015      	b.n	800179e <ScreenManager+0xda>
		case PANTALLA_TIMEOUT:
			displayTimeoutMsg();
 8001772:	f7fe fffd 	bl	8000770 <displayTimeoutMsg>
			HAL_Delay(3000);											//Timer bloqueante para evitar el ingreso de otra secuencia
 8001776:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800177a:	f000 f88b 	bl	8001894 <HAL_Delay>
			break;														//mientras se muestra el mensaje.
 800177e:	e00e      	b.n	800179e <ScreenManager+0xda>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			displayIncompleteMsg();
 8001780:	f7ff f818 	bl	80007b4 <displayIncompleteMsg>
			HAL_Delay(3000);
 8001784:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001788:	f000 f884 	bl	8001894 <HAL_Delay>
			break;
 800178c:	e007      	b.n	800179e <ScreenManager+0xda>
		case PANTALLA_ACCESO_CONCEDIDO:
			displayAccessState();
 800178e:	f7ff f85b 	bl	8000848 <displayAccessState>
			HAL_Delay(3000);
 8001792:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001796:	f000 f87d 	bl	8001894 <HAL_Delay>
			break;
 800179a:	e000      	b.n	800179e <ScreenManager+0xda>
			break;
		case PANTALLA_IDLE:
			/*No hacer nada*/
			break;
		default:
			break;
 800179c:	bf00      	nop
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 800179e:	e79d      	b.n	80016dc <ScreenManager+0x18>
 80017a0:	20000790 	.word	0x20000790
 80017a4:	08007e9c 	.word	0x08007e9c
 80017a8:	08005dd8 	.word	0x08005dd8
 80017ac:	08005ddc 	.word	0x08005ddc

080017b0 <IdleTask>:

}
void SavingOnSD     (void *pvParameters){

}
  void IdleTask       (void *pvParameters){
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	while(1){
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <IdleTask+0x8>

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c0:	f7ff fe7a 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f004 fa73 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fab1 	bl	8000d54 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001800:	08007ed0 	.word	0x08007ed0
  ldr r2, =_sbss
 8001804:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001808:	20004554 	.word	0x20004554

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f8fc 	bl	8001a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f7ff fd98 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fc92 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200007e8 	.word	0x200007e8

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200007e8 	.word	0x200007e8

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	@ (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff4c 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5e:	f7ff ff61 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7ff ffb1 	bl	80019d0 <NVIC_EncodePriority>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff80 	bl	800197c <__NVIC_SetPriority>
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff54 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e159      	b.n	8001d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 8148 	bne.w	8001d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a2 	beq.w	8001d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b57      	ldr	r3, [pc, #348]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a56      	ldr	r2, [pc, #344]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b54      	ldr	r3, [pc, #336]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c42:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x202>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a48      	ldr	r2, [pc, #288]	@ (8001d94 <HAL_GPIO_Init+0x2f4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x1fe>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2f8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a46      	ldr	r2, [pc, #280]	@ (8001d9c <HAL_GPIO_Init+0x2fc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x1f6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a45      	ldr	r2, [pc, #276]	@ (8001da0 <HAL_GPIO_Init+0x300>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x1f2>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	@ (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a24      	ldr	r2, [pc, #144]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f aea2 	bls.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e12b      	b.n	8002076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff f9c6 	bl	80011c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e70:	f001 f8ea 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8001e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a81      	ldr	r2, [pc, #516]	@ (8002080 <HAL_I2C_Init+0x274>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d807      	bhi.n	8001e90 <HAL_I2C_Init+0x84>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a80      	ldr	r2, [pc, #512]	@ (8002084 <HAL_I2C_Init+0x278>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	bf94      	ite	ls
 8001e88:	2301      	movls	r3, #1
 8001e8a:	2300      	movhi	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e006      	b.n	8001e9e <HAL_I2C_Init+0x92>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a7d      	ldr	r2, [pc, #500]	@ (8002088 <HAL_I2C_Init+0x27c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	bf94      	ite	ls
 8001e98:	2301      	movls	r3, #1
 8001e9a:	2300      	movhi	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0e7      	b.n	8002076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a78      	ldr	r2, [pc, #480]	@ (800208c <HAL_I2C_Init+0x280>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9b      	lsrs	r3, r3, #18
 8001eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8002080 <HAL_I2C_Init+0x274>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_I2C_Init+0xd4>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3301      	adds	r3, #1
 8001ede:	e009      	b.n	8001ef4 <HAL_I2C_Init+0xe8>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	4a69      	ldr	r2, [pc, #420]	@ (8002090 <HAL_I2C_Init+0x284>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	495c      	ldr	r1, [pc, #368]	@ (8002080 <HAL_I2C_Init+0x274>)
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d819      	bhi.n	8001f48 <HAL_I2C_Init+0x13c>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e59      	subs	r1, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f22:	1c59      	adds	r1, r3, #1
 8001f24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f28:	400b      	ands	r3, r1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_I2C_Init+0x138>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e59      	subs	r1, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f42:	e051      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e04f      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <HAL_I2C_Init+0x168>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e012      	b.n	8001f9a <HAL_I2C_Init+0x18e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Init+0x196>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e022      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_I2C_Init+0x1bc>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1e58      	subs	r0, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	440b      	add	r3, r1
 8001fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc6:	e00f      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	6809      	ldr	r1, [r1, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002016:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6911      	ldr	r1, [r2, #16]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68d2      	ldr	r2, [r2, #12]
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	000186a0 	.word	0x000186a0
 8002084:	001e847f 	.word	0x001e847f
 8002088:	003d08ff 	.word	0x003d08ff
 800208c:	431bde83 	.word	0x431bde83
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ae:	f7ff fbe5 	bl	800187c <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b20      	cmp	r3, #32
 80020be:	f040 80d9 	bne.w	8002274 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2319      	movs	r3, #25
 80020c8:	2201      	movs	r2, #1
 80020ca:	496d      	ldr	r1, [pc, #436]	@ (8002280 <HAL_I2C_Mem_Write+0x1ec>)
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f971 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
 80020da:	e0cc      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_I2C_Mem_Write+0x56>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0c5      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d007      	beq.n	8002110 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2221      	movs	r2, #33	@ 0x21
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	@ 0x40
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_I2C_Mem_Write+0x1f0>)
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002152:	88f8      	ldrh	r0, [r7, #6]
 8002154:	893a      	ldrh	r2, [r7, #8]
 8002156:	8979      	ldrh	r1, [r7, #10]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4603      	mov	r3, r0
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f890 	bl	8002288 <I2C_RequestMemoryWrite>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d052      	beq.n	8002214 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e081      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa36 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	2b04      	cmp	r3, #4
 8002188:	d107      	bne.n	800219a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11b      	bne.n	8002214 <HAL_I2C_Mem_Write+0x180>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d017      	beq.n	8002214 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1aa      	bne.n	8002172 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa29 	bl	8002678 <I2C_WaitOnBTFFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	2b04      	cmp	r3, #4
 8002232:	d107      	bne.n	8002244 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002242:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e016      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	00100002 	.word	0x00100002
 8002284:	ffff0000 	.word	0xffff0000

08002288 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f878 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022d8:	d103      	bne.n	80022e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e05f      	b.n	80023a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022e6:	897b      	ldrh	r3, [r7, #10]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	492d      	ldr	r1, [pc, #180]	@ (80023b0 <I2C_RequestMemoryWrite+0x128>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f8d3 	bl	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e04c      	b.n	80023a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f95e 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d107      	bne.n	800234a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e02b      	b.n	80023a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002354:	893b      	ldrh	r3, [r7, #8]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]
 800235e:	e021      	b.n	80023a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002360:	893b      	ldrh	r3, [r7, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800236e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f938 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	2b04      	cmp	r3, #4
 8002384:	d107      	bne.n	8002396 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e005      	b.n	80023a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800239a:	893b      	ldrh	r3, [r7, #8]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00010002 	.word	0x00010002

080023b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c4:	e048      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d044      	beq.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7ff fa55 	bl	800187c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d139      	bne.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10d      	bne.n	800240a <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	43da      	mvns	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	e00c      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x70>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	43da      	mvns	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4013      	ands	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	429a      	cmp	r2, r3
 8002428:	d116      	bne.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e023      	b.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10d      	bne.n	800247e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	e00c      	b.n	8002498 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	429a      	cmp	r2, r3
 800249c:	d093      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b6:	e071      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c6:	d123      	bne.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e067      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d041      	beq.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7ff f9b0 	bl	800187c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d136      	bne.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10c      	bne.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e00b      	b.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	43da      	mvns	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e021      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10c      	bne.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e00b      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f af6d 	bne.w	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f4:	e034      	b.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f886 	bl	8002708 <I2C_IsAcknowledgeFailed>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e034      	b.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d028      	beq.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff f935 	bl	800187c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d11d      	bne.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262e:	2b80      	cmp	r3, #128	@ 0x80
 8002630:	d016      	beq.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266a:	2b80      	cmp	r3, #128	@ 0x80
 800266c:	d1c3      	bne.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002684:	e034      	b.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f83e 	bl	8002708 <I2C_IsAcknowledgeFailed>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e034      	b.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d028      	beq.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7ff f8ed 	bl	800187c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11d      	bne.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d016      	beq.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e007      	b.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d1c3      	bne.n	8002686 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	d11b      	bne.n	8002758 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002728:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e267      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d075      	beq.n	8002872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d00c      	beq.n	80027ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b85      	ldr	r3, [pc, #532]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d112      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b82      	ldr	r3, [pc, #520]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027aa:	d10b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	4b7e      	ldr	r3, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d05b      	beq.n	8002870 <HAL_RCC_OscConfig+0x108>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d157      	bne.n	8002870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e242      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x74>
 80027ce:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a75      	ldr	r2, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e01d      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b70      	ldr	r3, [pc, #448]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6f      	ldr	r2, [pc, #444]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b6d      	ldr	r3, [pc, #436]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6c      	ldr	r2, [pc, #432]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 8002800:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a68      	ldr	r2, [pc, #416]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b66      	ldr	r3, [pc, #408]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a65      	ldr	r2, [pc, #404]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f82c 	bl	800187c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7ff f828 	bl	800187c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	@ 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e207      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xc0>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff f818 	bl	800187c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7ff f814 	bl	800187c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	@ 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1f3      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0xe8>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1c7      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4937      	ldr	r1, [pc, #220]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <HAL_RCC_OscConfig+0x244>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe ffcd 	bl	800187c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe ffc9 	bl	800187c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1a8      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4925      	ldr	r1, [pc, #148]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCC_OscConfig+0x244>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe ffac 	bl	800187c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe ffa8 	bl	800187c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e187      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d036      	beq.n	80029c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_RCC_OscConfig+0x248>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe ff8c 	bl	800187c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe ff88 	bl	800187c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e167      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_OscConfig+0x240>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x200>
 8002986:	e01b      	b.n	80029c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x248>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe ff75 	bl	800187c <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	e00e      	b.n	80029b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe ff71 	bl	800187c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d907      	bls.n	80029b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e150      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470000 	.word	0x42470000
 80029b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b88      	ldr	r3, [pc, #544]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ea      	bne.n	8002996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8097 	beq.w	8002afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b81      	ldr	r3, [pc, #516]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b77      	ldr	r3, [pc, #476]	@ (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b74      	ldr	r3, [pc, #464]	@ (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a73      	ldr	r2, [pc, #460]	@ (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fe ff31 	bl	800187c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fe ff2d 	bl	800187c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e10c      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2ea>
 8002a44:	4b64      	ldr	r3, [pc, #400]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	4a63      	ldr	r2, [pc, #396]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x324>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x30c>
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a66:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x324>
 8002a74:	4b58      	ldr	r3, [pc, #352]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	4a57      	ldr	r2, [pc, #348]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a80:	4b55      	ldr	r3, [pc, #340]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a54      	ldr	r2, [pc, #336]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fef2 	bl	800187c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe feee 	bl	800187c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0cb      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	4b49      	ldr	r3, [pc, #292]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fedc 	bl	800187c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fed8 	bl	800187c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0b5      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	4a38      	ldr	r2, [pc, #224]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a1 	beq.w	8002c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b06:	4b34      	ldr	r3, [pc, #208]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d05c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d141      	bne.n	8002b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe feac 	bl	800187c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fea8 	bl	800187c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e087      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	491b      	ldr	r1, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b70:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe fe81 	bl	800187c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fe7d 	bl	800187c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e05c      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x416>
 8002b9c:	e054      	b.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe6a 	bl	800187c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fe66 	bl	800187c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e045      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e038      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x4ec>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d121      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0cc      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b68      	ldr	r3, [pc, #416]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d90c      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b65      	ldr	r3, [pc, #404]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d044      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b3f      	ldr	r3, [pc, #252]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e067      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b37      	ldr	r3, [pc, #220]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4934      	ldr	r1, [pc, #208]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d48:	f7fe fd98 	bl	800187c <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe fd94 	bl	800187c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e04f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b2b      	ldr	r3, [pc, #172]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d20c      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dca:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490a      	ldr	r1, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fab8 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08007ea8 	.word	0x08007ea8
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b094      	sub	sp, #80	@ 0x50
 8002e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e30:	2300      	movs	r3, #0
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	2300      	movs	r3, #0
 8002e36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3c:	4b79      	ldr	r3, [pc, #484]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	f200 80e1 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e56:	e0db      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b73      	ldr	r3, [pc, #460]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e5c:	e0db      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e62:	e0d8      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b6f      	ldr	r3, [pc, #444]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	f04f 0000 	mov.w	r0, #0
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea8:	0150      	lsls	r0, r2, #5
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4621      	mov	r1, r4
 8002eb0:	1a51      	subs	r1, r2, r1
 8002eb2:	6139      	str	r1, [r7, #16]
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	018b      	lsls	r3, r1, #6
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	018a      	lsls	r2, r1, #6
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8002edc:	4659      	mov	r1, fp
 8002ede:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	4699      	mov	r9, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb18 0303 	adds.w	r3, r8, r3
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	462b      	mov	r3, r5
 8002f04:	eb49 0303 	adc.w	r3, r9, r3
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f16:	4629      	mov	r1, r5
 8002f18:	024b      	lsls	r3, r1, #9
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f20:	4621      	mov	r1, r4
 8002f22:	024a      	lsls	r2, r1, #9
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f34:	f7fd f954 	bl	80001e0 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f40:	e058      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0159      	lsls	r1, r3, #5
 8002f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6e:	0150      	lsls	r0, r2, #5
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4641      	mov	r1, r8
 8002f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f94:	ebb2 040a 	subs.w	r4, r2, sl
 8002f98:	eb63 050b 	sbc.w	r5, r3, fp
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	00eb      	lsls	r3, r5, #3
 8002fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002faa:	00e2      	lsls	r2, r4, #3
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	18e3      	adds	r3, r4, r3
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb45 0303 	adc.w	r3, r5, r3
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	61fa      	str	r2, [r7, #28]
 8002fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe8:	f7fd f8fa 	bl	80001e0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003018:	4618      	mov	r0, r3
 800301a:	3750      	adds	r7, #80	@ 0x50
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	@ (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff0 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08007eb8 	.word	0x08007eb8

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffdc 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0b5b      	lsrs	r3, r3, #13
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	08007eb8 	.word	0x08007eb8

08003098 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	220f      	movs	r2, #15
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <HAL_RCC_GetClockConfig+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07b      	b.n	8003206 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800311e:	d009      	beq.n	8003134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
 8003126:	e005      	b.n	8003134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe f880 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800316a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b8:	ea42 0103 	orr.w	r1, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0104 	and.w	r1, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	f003 0210 	and.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e041      	b.n	80032a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f839 	bl	80032ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f000 f9b1 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e044      	b.n	8003362 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <HAL_TIM_Base_Start_IT+0xb0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x6c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003302:	d013      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x6c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <HAL_TIM_Base_Start_IT+0xb4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x6c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a19      	ldr	r2, [pc, #100]	@ (8003378 <HAL_TIM_Base_Start_IT+0xb8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x6c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_TIM_Base_Start_IT+0xbc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x6c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <HAL_TIM_Base_Start_IT+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d111      	bne.n	8003350 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d010      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	e007      	b.n	8003360 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000

08003384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d020      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0202 	mvn.w	r2, #2
 80033b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8d2 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8c4 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8d5 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0204 	mvn.w	r2, #4
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8ac 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f89e 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8af 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f886 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f878 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f889 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2208      	movs	r2, #8
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f860 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f852 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f863 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fe28 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8e6 	bl	80036e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f834 	bl	80035a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0220 	mvn.w	r2, #32
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8b8 	bl	80036cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a3a      	ldr	r2, [pc, #232]	@ (80036b0 <TIM_Base_SetConfig+0xfc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_Base_SetConfig+0x38>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0x38>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a37      	ldr	r2, [pc, #220]	@ (80036b4 <TIM_Base_SetConfig+0x100>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0x38>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a36      	ldr	r2, [pc, #216]	@ (80036b8 <TIM_Base_SetConfig+0x104>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0x38>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <TIM_Base_SetConfig+0x108>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2b      	ldr	r2, [pc, #172]	@ (80036b0 <TIM_Base_SetConfig+0xfc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01b      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d017      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a28      	ldr	r2, [pc, #160]	@ (80036b4 <TIM_Base_SetConfig+0x100>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a27      	ldr	r2, [pc, #156]	@ (80036b8 <TIM_Base_SetConfig+0x104>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <TIM_Base_SetConfig+0x108>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a25      	ldr	r2, [pc, #148]	@ (80036c0 <TIM_Base_SetConfig+0x10c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a24      	ldr	r2, [pc, #144]	@ (80036c4 <TIM_Base_SetConfig+0x110>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a23      	ldr	r2, [pc, #140]	@ (80036c8 <TIM_Base_SetConfig+0x114>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0e      	ldr	r2, [pc, #56]	@ (80036b0 <TIM_Base_SetConfig+0xfc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]
  }
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e042      	b.n	800378c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fde2 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f82b 	bl	8003794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800374c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800376c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b0c0      	sub	sp, #256	@ 0x100
 800379a:	af00      	add	r7, sp, #0
 800379c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	ea40 0301 	orr.w	r3, r0, r1
 80037bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037ec:	f021 010c 	bic.w	r1, r1, #12
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037fa:	430b      	orrs	r3, r1
 80037fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	ea40 0301 	orr.w	r3, r0, r1
 800381a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b8f      	ldr	r3, [pc, #572]	@ (8003a60 <UART_SetConfig+0x2cc>)
 8003824:	429a      	cmp	r2, r3
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0xa0>
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a64 <UART_SetConfig+0x2d0>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d104      	bne.n	800383e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7ff fc1c 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003838:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800383c:	e003      	b.n	8003846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7ff fc03 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003842:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003850:	f040 810c 	bne.w	8003a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	1891      	adds	r1, r2, r2
 800386c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800386e:	415b      	adcs	r3, r3
 8003870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003876:	4621      	mov	r1, r4
 8003878:	eb12 0801 	adds.w	r8, r2, r1
 800387c:	4629      	mov	r1, r5
 800387e:	eb43 0901 	adc.w	r9, r3, r1
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003896:	4690      	mov	r8, r2
 8003898:	4699      	mov	r9, r3
 800389a:	4623      	mov	r3, r4
 800389c:	eb18 0303 	adds.w	r3, r8, r3
 80038a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038a4:	462b      	mov	r3, r5
 80038a6:	eb49 0303 	adc.w	r3, r9, r3
 80038aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c2:	460b      	mov	r3, r1
 80038c4:	18db      	adds	r3, r3, r3
 80038c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c8:	4613      	mov	r3, r2
 80038ca:	eb42 0303 	adc.w	r3, r2, r3
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80038d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d8:	f7fc fc82 	bl	80001e0 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2302 	umull	r2, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	011c      	lsls	r4, r3, #4
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003904:	415b      	adcs	r3, r3
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800390c:	4641      	mov	r1, r8
 800390e:	eb12 0a01 	adds.w	sl, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb43 0b01 	adc.w	fp, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392c:	4692      	mov	sl, r2
 800392e:	469b      	mov	fp, r3
 8003930:	4643      	mov	r3, r8
 8003932:	eb1a 0303 	adds.w	r3, sl, r3
 8003936:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800393a:	464b      	mov	r3, r9
 800393c:	eb4b 0303 	adc.w	r3, fp, r3
 8003940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003950:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003958:	460b      	mov	r3, r1
 800395a:	18db      	adds	r3, r3, r3
 800395c:	643b      	str	r3, [r7, #64]	@ 0x40
 800395e:	4613      	mov	r3, r2
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
 8003966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800396a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800396e:	f7fc fc37 	bl	80001e0 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4611      	mov	r1, r2
 8003978:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <UART_SetConfig+0x2d4>)
 800397a:	fba3 2301 	umull	r2, r3, r3, r1
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2264      	movs	r2, #100	@ 0x64
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	1acb      	subs	r3, r1, r3
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800398e:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800399c:	441c      	add	r4, r3
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b8:	415b      	adcs	r3, r3
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a14:	460b      	mov	r3, r1
 8003a16:	18db      	adds	r3, r3, r3
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a2a:	f7fc fbd9 	bl	80001e0 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	@ 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3332      	adds	r3, #50	@ 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4422      	add	r2, r4
 8003a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a5c:	e106      	b.n	8003c6c <UART_SetConfig+0x4d8>
 8003a5e:	bf00      	nop
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a7e:	4642      	mov	r2, r8
 8003a80:	464b      	mov	r3, r9
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	6239      	str	r1, [r7, #32]
 8003a86:	415b      	adcs	r3, r3
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8e:	4641      	mov	r1, r8
 8003a90:	1854      	adds	r4, r2, r1
 8003a92:	4649      	mov	r1, r9
 8003a94:	eb43 0501 	adc.w	r5, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	00eb      	lsls	r3, r5, #3
 8003aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa6:	00e2      	lsls	r2, r4, #3
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	461d      	mov	r5, r3
 8003aac:	4643      	mov	r3, r8
 8003aae:	18e3      	adds	r3, r4, r3
 8003ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	eb45 0303 	adc.w	r3, r5, r3
 8003aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ada:	4629      	mov	r1, r5
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	008a      	lsls	r2, r1, #2
 8003ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aec:	f7fc fb78 	bl	80001e0 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b60      	ldr	r3, [pc, #384]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	61b9      	str	r1, [r7, #24]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6139      	str	r1, [r7, #16]
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b54:	464b      	mov	r3, r9
 8003b56:	460a      	mov	r2, r1
 8003b58:	eb42 0303 	adc.w	r3, r2, r3
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b78:	4649      	mov	r1, r9
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b82:	4641      	mov	r1, r8
 8003b84:	008a      	lsls	r2, r1, #2
 8003b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b8a:	f7fc fb29 	bl	80001e0 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003b96:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2264      	movs	r2, #100	@ 0x64
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	1acb      	subs	r3, r1, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	@ 0x32
 8003ba8:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	441c      	add	r4, r3
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c06:	464b      	mov	r3, r9
 8003c08:	460a      	mov	r2, r1
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c3a:	f7fc fad1 	bl	80001e0 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	@ 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	@ 0x32
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4422      	add	r2, r4
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c72:	46bd      	mov	sp, r7
 8003c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c78:	51eb851f 	.word	0x51eb851f

08003c7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003c80:	4904      	ldr	r1, [pc, #16]	@ (8003c94 <MX_FATFS_Init+0x18>)
 8003c82:	4805      	ldr	r0, [pc, #20]	@ (8003c98 <MX_FATFS_Init+0x1c>)
 8003c84:	f000 f8b0 	bl	8003de8 <FATFS_LinkDriver>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <MX_FATFS_Init+0x20>)
 8003c8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200007f0 	.word	0x200007f0
 8003c98:	2000000c 	.word	0x2000000c
 8003c9c:	200007ec 	.word	0x200007ec

08003ca0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <USER_initialize+0x24>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <USER_initialize+0x24>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000009 	.word	0x20000009

08003cc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <USER_status+0x24>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <USER_status+0x24>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000009 	.word	0x20000009

08003cf0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003d00:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003d1e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	603a      	str	r2, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
    return res;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003d66:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d68:	7a5b      	ldrb	r3, [r3, #9]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d131      	bne.n	8003dd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003d70:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d72:	7a5b      	ldrb	r3, [r3, #9]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d80:	7a5b      	ldrb	r3, [r3, #9]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4a17      	ldr	r2, [pc, #92]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d90:	7a5b      	ldrb	r3, [r3, #9]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003da0:	7a5b      	ldrb	r3, [r3, #9]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	b2d1      	uxtb	r1, r2
 8003da8:	4a0e      	ldr	r2, [pc, #56]	@ (8003de4 <FATFS_LinkDriverEx+0x94>)
 8003daa:	7251      	strb	r1, [r2, #9]
 8003dac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003dae:	7dbb      	ldrb	r3, [r7, #22]
 8003db0:	3330      	adds	r3, #48	@ 0x30
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	223a      	movs	r2, #58	@ 0x3a
 8003dbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	222f      	movs	r2, #47	@ 0x2f
 8003dc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	200007f4 	.word	0x200007f4

08003de8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	6839      	ldr	r1, [r7, #0]
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffaa 	bl	8003d50 <FATFS_LinkDriverEx>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f103 0208 	add.w	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f103 0208 	add.w	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f103 0208 	add.w	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d103      	bne.n	8003ec8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00c      	b.n	8003ee2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e002      	b.n	8003ed6 <vListInsert+0x2e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d2f6      	bcs.n	8003ed0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6892      	ldr	r2, [r2, #8]
 8003f30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6852      	ldr	r2, [r2, #4]
 8003f3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d103      	bne.n	8003f4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f9c:	f001 fbc4 	bl	8005728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	22ff      	movs	r2, #255	@ 0xff
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	22ff      	movs	r2, #255	@ 0xff
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d114      	bne.n	800401c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01a      	beq.n	8004030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 ff96 	bl	8004f30 <xTaskRemoveFromEventList>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <xQueueGenericReset+0xd0>)
 800400c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	e009      	b.n	8004030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3310      	adds	r3, #16
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fef0 	bl	8003e06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3324      	adds	r3, #36	@ 0x24
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff feeb 	bl	8003e06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004030:	f001 fbac 	bl	800578c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	613b      	str	r3, [r7, #16]
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	e7fd      	b.n	800406c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3348      	adds	r3, #72	@ 0x48
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fc32 	bl	80058e8 <pvPortMalloc>
 8004084:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d011      	beq.n	80040b0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3348      	adds	r3, #72	@ 0x48
 8004094:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800409e:	79fa      	ldrb	r2, [r7, #7]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f805 	bl	80040ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040b0:	69bb      	ldr	r3, [r7, #24]
	}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e002      	b.n	80040dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040e8:	2101      	movs	r1, #1
 80040ea:	69b8      	ldr	r0, [r7, #24]
 80040ec:	f7ff ff40 	bl	8003f70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	@ 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <xQueueGenericSend+0x34>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x42>
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0x46>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0x48>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <xQueueGenericSend+0x64>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d103      	bne.n	800416a <xQueueGenericSend+0x72>
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0x76>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericSend+0x78>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueGenericSend+0x94>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418c:	f001 f890 	bl	80052b0 <xTaskGetSchedulerState>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <xQueueGenericSend+0xa4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <xQueueGenericSend+0xa8>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <xQueueGenericSend+0xaa>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <xQueueGenericSend+0xc6>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041be:	f001 fab3 	bl	8005728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <xQueueGenericSend+0xdc>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d129      	bne.n	8004228 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041da:	f000 f971 	bl	80044c0 <prvCopyDataToQueue>
 80041de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	3324      	adds	r3, #36	@ 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fe9f 	bl	8004f30 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041f8:	4b3f      	ldr	r3, [pc, #252]	@ (80042f8 <xQueueGenericSend+0x200>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	e00a      	b.n	8004220 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800420a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <xQueueGenericSend+0x200>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004220:	f001 fab4 	bl	800578c <vPortExitCritical>
				return pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	e063      	b.n	80042f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800422e:	f001 faad 	bl	800578c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004232:	2300      	movs	r3, #0
 8004234:	e05c      	b.n	80042f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fed9 	bl	8004ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800424a:	f001 fa9f 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800424e:	f000 fc77 	bl	8004b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004252:	f001 fa69 	bl	8005728 <vPortEnterCritical>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800425c:	b25b      	sxtb	r3, r3
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d103      	bne.n	800426c <xQueueGenericSend+0x174>
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d103      	bne.n	8004282 <xQueueGenericSend+0x18a>
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004282:	f001 fa83 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004286:	1d3a      	adds	r2, r7, #4
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fec8 	bl	8005024 <xTaskCheckForTimeOut>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d124      	bne.n	80042e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800429a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800429c:	f000 fa08 	bl	80046b0 <prvIsQueueFull>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fe18 	bl	8004ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042b6:	f000 f993 	bl	80045e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ba:	f000 fc4f 	bl	8004b5c <xTaskResumeAll>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f af7c 	bne.w	80041be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <xQueueGenericSend+0x200>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	e772      	b.n	80041be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042da:	f000 f981 	bl	80045e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042de:	f000 fc3d 	bl	8004b5c <xTaskResumeAll>
 80042e2:	e76c      	b.n	80041be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042e6:	f000 f97b 	bl	80045e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ea:	f000 fc37 	bl	8004b5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3738      	adds	r7, #56	@ 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	@ 0x30
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <xQueueReceive+0x32>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	623b      	str	r3, [r7, #32]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <xQueueReceive+0x40>
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <xQueueReceive+0x44>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <xQueueReceive+0x46>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <xQueueReceive+0x62>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	61fb      	str	r3, [r7, #28]
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800435e:	f000 ffa7 	bl	80052b0 <xTaskGetSchedulerState>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <xQueueReceive+0x72>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <xQueueReceive+0x76>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <xQueueReceive+0x78>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <xQueueReceive+0x94>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	61bb      	str	r3, [r7, #24]
}
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004390:	f001 f9ca 	bl	8005728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01f      	beq.n	80043e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043a4:	f000 f8f6 	bl	8004594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00f      	beq.n	80043d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	3310      	adds	r3, #16
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fdb7 	bl	8004f30 <xTaskRemoveFromEventList>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043c8:	4b3c      	ldr	r3, [pc, #240]	@ (80044bc <xQueueReceive+0x1c0>)
 80043ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043d8:	f001 f9d8 	bl	800578c <vPortExitCritical>
				return pdPASS;
 80043dc:	2301      	movs	r3, #1
 80043de:	e069      	b.n	80044b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043e6:	f001 f9d1 	bl	800578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e062      	b.n	80044b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fdfd 	bl	8004ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043fe:	2301      	movs	r3, #1
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004402:	f001 f9c3 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004406:	f000 fb9b 	bl	8004b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800440a:	f001 f98d 	bl	8005728 <vPortEnterCritical>
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004414:	b25b      	sxtb	r3, r3
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <xQueueReceive+0x128>
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442a:	b25b      	sxtb	r3, r3
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d103      	bne.n	800443a <xQueueReceive+0x13e>
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800443a:	f001 f9a7 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800443e:	1d3a      	adds	r2, r7, #4
 8004440:	f107 0310 	add.w	r3, r7, #16
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fdec 	bl	8005024 <xTaskCheckForTimeOut>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d123      	bne.n	800449a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004454:	f000 f916 	bl	8004684 <prvIsQueueEmpty>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d017      	beq.n	800448e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	3324      	adds	r3, #36	@ 0x24
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fd3c 	bl	8004ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800446c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800446e:	f000 f8b7 	bl	80045e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004472:	f000 fb73 	bl	8004b5c <xTaskResumeAll>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d189      	bne.n	8004390 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <xQueueReceive+0x1c0>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	e780      	b.n	8004390 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800448e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004490:	f000 f8a6 	bl	80045e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004494:	f000 fb62 	bl	8004b5c <xTaskResumeAll>
 8004498:	e77a      	b.n	8004390 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800449a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800449c:	f000 f8a0 	bl	80045e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044a0:	f000 fb5c 	bl	8004b5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a6:	f000 f8ed 	bl	8004684 <prvIsQueueEmpty>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f43f af6f 	beq.w	8004390 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3730      	adds	r7, #48	@ 0x30
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d14d      	bne.n	8004582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fefe 	bl	80052ec <xTaskPriorityDisinherit>
 80044f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e043      	b.n	8004582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d119      	bne.n	8004534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6858      	ldr	r0, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	461a      	mov	r2, r3
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	f001 fc06 	bl	8005d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d32b      	bcc.n	8004582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e026      	b.n	8004582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68d8      	ldr	r0, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	461a      	mov	r2, r3
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	f001 fbec 	bl	8005d1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	425b      	negs	r3, r3
 800454e:	441a      	add	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d207      	bcs.n	8004570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	425b      	negs	r3, r3
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d105      	bne.n	8004582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3b01      	subs	r3, #1
 8004580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800458a:	697b      	ldr	r3, [r7, #20]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d303      	bcc.n	80045c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68d9      	ldr	r1, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	461a      	mov	r2, r3
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	f001 fba2 	bl	8005d1c <memcpy>
	}
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045e8:	f001 f89e 	bl	8005728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045f4:	e011      	b.n	800461a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3324      	adds	r3, #36	@ 0x24
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fc94 	bl	8004f30 <xTaskRemoveFromEventList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800460e:	f000 fd6d 	bl	80050ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	3b01      	subs	r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800461a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dce9      	bgt.n	80045f6 <prvUnlockQueue+0x16>
 8004622:	e000      	b.n	8004626 <prvUnlockQueue+0x46>
					break;
 8004624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	22ff      	movs	r2, #255	@ 0xff
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800462e:	f001 f8ad 	bl	800578c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004632:	f001 f879 	bl	8005728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800463c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800463e:	e011      	b.n	8004664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d012      	beq.n	800466e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3310      	adds	r3, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fc6f 	bl	8004f30 <xTaskRemoveFromEventList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004658:	f000 fd48 	bl	80050ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800465c:	7bbb      	ldrb	r3, [r7, #14]
 800465e:	3b01      	subs	r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004668:	2b00      	cmp	r3, #0
 800466a:	dce9      	bgt.n	8004640 <prvUnlockQueue+0x60>
 800466c:	e000      	b.n	8004670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800466e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	22ff      	movs	r2, #255	@ 0xff
 8004674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004678:	f001 f888 	bl	800578c <vPortExitCritical>
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800468c:	f001 f84c 	bl	8005728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e001      	b.n	80046a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046a2:	f001 f873 	bl	800578c <vPortExitCritical>

	return xReturn;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046b8:	f001 f836 	bl	8005728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d102      	bne.n	80046ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e001      	b.n	80046d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046d2:	f001 f85b 	bl	800578c <vPortExitCritical>

	return xReturn;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	@ 0x38
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <xTaskCreateStatic+0x2c>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	61fb      	str	r3, [r7, #28]
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800472a:	2354      	movs	r3, #84	@ 0x54
 800472c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b54      	cmp	r3, #84	@ 0x54
 8004732:	d00b      	beq.n	800474c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61bb      	str	r3, [r7, #24]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800474c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01e      	beq.n	8004792 <xTaskCreateStatic+0xb2>
 8004754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01b      	beq.n	8004792 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800476c:	2300      	movs	r3, #0
 800476e:	9303      	str	r3, [sp, #12]
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	9302      	str	r3, [sp, #8]
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f850 	bl	800482a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800478a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800478c:	f000 f8d6 	bl	800493c <prvAddNewTaskToReadyList>
 8004790:	e001      	b.n	8004796 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004796:	697b      	ldr	r3, [r7, #20]
	}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	@ 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	@ 0x30
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f897 	bl	80058e8 <pvPortMalloc>
 80047ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047c2:	2054      	movs	r0, #84	@ 0x54
 80047c4:	f001 f890 	bl	80058e8 <pvPortMalloc>
 80047c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80047d6:	e005      	b.n	80047e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f001 f953 	bl	8005a84 <vPortFree>
 80047de:	e001      	b.n	80047e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	9302      	str	r3, [sp, #8]
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f80e 	bl	800482a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480e:	69f8      	ldr	r0, [r7, #28]
 8004810:	f000 f894 	bl	800493c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004814:	2301      	movs	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e002      	b.n	8004820 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004820:	69bb      	ldr	r3, [r7, #24]
	}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b088      	sub	sp, #32
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004842:	3b01      	subs	r3, #1
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	617b      	str	r3, [r7, #20]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01f      	beq.n	80048ba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e012      	b.n	80048a6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	7819      	ldrb	r1, [r3, #0]
 8004888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	3334      	adds	r3, #52	@ 0x34
 8004890:	460a      	mov	r2, r1
 8004892:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d9e9      	bls.n	8004880 <prvInitialiseNewTask+0x56>
 80048ac:	e000      	b.n	80048b0 <prvInitialiseNewTask+0x86>
			{
				break;
 80048ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b8:	e003      	b.n	80048c2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d901      	bls.n	80048cc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048c8:	2306      	movs	r3, #6
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff faaf 	bl	8003e46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	3318      	adds	r3, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff faaa 	bl	8003e46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	f1c3 0207 	rsb	r2, r3, #7
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	2200      	movs	r2, #0
 800490c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	69b8      	ldr	r0, [r7, #24]
 800491c:	f000 fdd4 	bl	80054c8 <pxPortInitialiseStack>
 8004920:	4602      	mov	r2, r0
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004944:	f000 fef0 	bl	8005728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800495a:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d110      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004968:	f000 fbe4 	bl	8005134 <prvInitialiseTaskLists>
 800496c:	e00d      	b.n	800498a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d802      	bhi.n	800498a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <prvAddNewTaskToReadyList+0xcc>)
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7ff fa4f 	bl	8003e60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049c2:	f000 fee3 	bl	800578c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ce:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvAddNewTaskToReadyList+0xd0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000900 	.word	0x20000900
 80049f8:	20000800 	.word	0x20000800
 80049fc:	2000090c 	.word	0x2000090c
 8004a00:	2000091c 	.word	0x2000091c
 8004a04:	20000908 	.word	0x20000908
 8004a08:	20000804 	.word	0x20000804
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <vTaskDelay+0x64>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <vTaskDelay+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a42:	f000 f87d 	bl	8004b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fcd7 	bl	80053fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a4e:	f000 f885 	bl	8004b5c <xTaskResumeAll>
 8004a52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <vTaskDelay+0x68>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000928 	.word	0x20000928
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	@ 0x28
 8004a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a8a:	463a      	mov	r2, r7
 8004a8c:	1d39      	adds	r1, r7, #4
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc f944 	bl	8000d20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	491f      	ldr	r1, [pc, #124]	@ (8004b28 <vTaskStartScheduler+0xac>)
 8004aac:	481f      	ldr	r0, [pc, #124]	@ (8004b2c <vTaskStartScheduler+0xb0>)
 8004aae:	f7ff fe17 	bl	80046e0 <xTaskCreateStatic>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b30 <vTaskStartScheduler+0xb4>)
 8004ab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b30 <vTaskStartScheduler+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e001      	b.n	8004aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d116      	bne.n	8004afe <vTaskStartScheduler+0x82>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ae4:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <vTaskStartScheduler+0xb8>)
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aec:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <vTaskStartScheduler+0xbc>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <vTaskStartScheduler+0xc0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004af8:	f000 fd72 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004afc:	e00f      	b.n	8004b1e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d10b      	bne.n	8004b1e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <vTaskStartScheduler+0x9e>
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	08005de0 	.word	0x08005de0
 8004b2c:	08005105 	.word	0x08005105
 8004b30:	20000924 	.word	0x20000924
 8004b34:	20000920 	.word	0x20000920
 8004b38:	2000090c 	.word	0x2000090c
 8004b3c:	20000904 	.word	0x20000904

08004b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <vTaskSuspendAll+0x18>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	4a03      	ldr	r2, [pc, #12]	@ (8004b58 <vTaskSuspendAll+0x18>)
 8004b4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b4e:	bf00      	nop
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000928 	.word	0x20000928

08004b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b6a:	4b42      	ldr	r3, [pc, #264]	@ (8004c74 <xTaskResumeAll+0x118>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <xTaskResumeAll+0x2e>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	603b      	str	r3, [r7, #0]
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b8a:	f000 fdcd 	bl	8005728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <xTaskResumeAll+0x118>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	4a37      	ldr	r2, [pc, #220]	@ (8004c74 <xTaskResumeAll+0x118>)
 8004b96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b98:	4b36      	ldr	r3, [pc, #216]	@ (8004c74 <xTaskResumeAll+0x118>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d161      	bne.n	8004c64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ba0:	4b35      	ldr	r3, [pc, #212]	@ (8004c78 <xTaskResumeAll+0x11c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05d      	beq.n	8004c64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba8:	e02e      	b.n	8004c08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b34      	ldr	r3, [pc, #208]	@ (8004c7c <xTaskResumeAll+0x120>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f9af 	bl	8003f1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f9aa 	bl	8003f1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	2201      	movs	r2, #1
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	4b2c      	ldr	r3, [pc, #176]	@ (8004c80 <xTaskResumeAll+0x124>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c80 <xTaskResumeAll+0x124>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4a27      	ldr	r2, [pc, #156]	@ (8004c84 <xTaskResumeAll+0x128>)
 8004be6:	441a      	add	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f7ff f936 	bl	8003e60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <xTaskResumeAll+0x12c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <xTaskResumeAll+0x130>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c08:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <xTaskResumeAll+0x120>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1cc      	bne.n	8004baa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c16:	f000 fb2b 	bl	8005270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <xTaskResumeAll+0x134>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c26:	f000 f847 	bl	8004cb8 <xTaskIncrementTick>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c30:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <xTaskResumeAll+0x130>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f1      	bne.n	8004c26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c42:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <xTaskResumeAll+0x134>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c48:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <xTaskResumeAll+0x130>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c54:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <xTaskResumeAll+0x138>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c64:	f000 fd92 	bl	800578c <vPortExitCritical>

	return xAlreadyYielded;
 8004c68:	68bb      	ldr	r3, [r7, #8]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000928 	.word	0x20000928
 8004c78:	20000900 	.word	0x20000900
 8004c7c:	200008c0 	.word	0x200008c0
 8004c80:	20000908 	.word	0x20000908
 8004c84:	20000804 	.word	0x20000804
 8004c88:	20000800 	.word	0x20000800
 8004c8c:	20000914 	.word	0x20000914
 8004c90:	20000910 	.word	0x20000910
 8004c94:	e000ed04 	.word	0xe000ed04

08004c98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c9e:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <xTaskGetTickCount+0x1c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ca4:	687b      	ldr	r3, [r7, #4]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000904 	.word	0x20000904

08004cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <xTaskIncrementTick+0x148>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 808f 	bne.w	8004dea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8004e04 <xTaskIncrementTick+0x14c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004e04 <xTaskIncrementTick+0x14c>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ce0:	4b49      	ldr	r3, [pc, #292]	@ (8004e08 <xTaskIncrementTick+0x150>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	603b      	str	r3, [r7, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xTaskIncrementTick+0x46>
 8004d02:	4b41      	ldr	r3, [pc, #260]	@ (8004e08 <xTaskIncrementTick+0x150>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	4b40      	ldr	r3, [pc, #256]	@ (8004e0c <xTaskIncrementTick+0x154>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e08 <xTaskIncrementTick+0x150>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4a3e      	ldr	r2, [pc, #248]	@ (8004e0c <xTaskIncrementTick+0x154>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b3e      	ldr	r3, [pc, #248]	@ (8004e10 <xTaskIncrementTick+0x158>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e10 <xTaskIncrementTick+0x158>)
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	f000 faa6 	bl	8005270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <xTaskIncrementTick+0x15c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d348      	bcc.n	8004dc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2e:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <xTaskIncrementTick+0x150>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d38:	4b36      	ldr	r3, [pc, #216]	@ (8004e14 <xTaskIncrementTick+0x15c>)
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	601a      	str	r2, [r3, #0]
					break;
 8004d40:	e03e      	b.n	8004dc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d42:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <xTaskIncrementTick+0x150>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d203      	bcs.n	8004d62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e14 <xTaskIncrementTick+0x15c>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d60:	e02e      	b.n	8004dc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff f8d7 	bl	8003f1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3318      	adds	r3, #24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff f8ce 	bl	8003f1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	409a      	lsls	r2, r3
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <xTaskIncrementTick+0x160>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a22      	ldr	r2, [pc, #136]	@ (8004e18 <xTaskIncrementTick+0x160>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e1c <xTaskIncrementTick+0x164>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7ff f85a 	bl	8003e60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <xTaskIncrementTick+0x168>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3b9      	bcc.n	8004d2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dbe:	e7b6      	b.n	8004d2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dc0:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <xTaskIncrementTick+0x168>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc6:	4915      	ldr	r1, [pc, #84]	@ (8004e1c <xTaskIncrementTick+0x164>)
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d901      	bls.n	8004ddc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ddc:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <xTaskIncrementTick+0x16c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e004      	b.n	8004df4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dea:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <xTaskIncrementTick+0x170>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e28 <xTaskIncrementTick+0x170>)
 8004df2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004df4:	697b      	ldr	r3, [r7, #20]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000928 	.word	0x20000928
 8004e04:	20000904 	.word	0x20000904
 8004e08:	200008b8 	.word	0x200008b8
 8004e0c:	200008bc 	.word	0x200008bc
 8004e10:	20000918 	.word	0x20000918
 8004e14:	20000920 	.word	0x20000920
 8004e18:	20000908 	.word	0x20000908
 8004e1c:	20000804 	.word	0x20000804
 8004e20:	20000800 	.word	0x20000800
 8004e24:	20000914 	.word	0x20000914
 8004e28:	20000910 	.word	0x20000910

08004e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <vTaskSwitchContext+0xa4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e3a:	4b26      	ldr	r3, [pc, #152]	@ (8004ed4 <vTaskSwitchContext+0xa8>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e40:	e040      	b.n	8004ec4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004e42:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <vTaskSwitchContext+0xa8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e48:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <vTaskSwitchContext+0xac>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	f1c3 031f 	rsb	r3, r3, #31
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	491f      	ldr	r1, [pc, #124]	@ (8004edc <vTaskSwitchContext+0xb0>)
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	607b      	str	r3, [r7, #4]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <vTaskSwitchContext+0x5a>
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <vTaskSwitchContext+0xb0>)
 8004e96:	4413      	add	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d104      	bne.n	8004eba <vTaskSwitchContext+0x8e>
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a07      	ldr	r2, [pc, #28]	@ (8004ee0 <vTaskSwitchContext+0xb4>)
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000928 	.word	0x20000928
 8004ed4:	20000914 	.word	0x20000914
 8004ed8:	20000908 	.word	0x20000908
 8004edc:	20000804 	.word	0x20000804
 8004ee0:	20000800 	.word	0x20000800

08004ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <vTaskPlaceOnEventList+0x48>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3318      	adds	r3, #24
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fe ffc7 	bl	8003ea8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	6838      	ldr	r0, [r7, #0]
 8004f1e:	f000 fa6d 	bl	80053fc <prvAddCurrentTaskToDelayedList>
}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000800 	.word	0x20000800

08004f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60fb      	str	r3, [r7, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3318      	adds	r3, #24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe ffd9 	bl	8003f1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f68:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <xTaskRemoveFromEventList+0xb0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d11c      	bne.n	8004faa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe ffd0 	bl	8003f1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	2201      	movs	r2, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <xTaskRemoveFromEventList+0xb4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <xTaskRemoveFromEventList+0xb4>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <xTaskRemoveFromEventList+0xb8>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe ff5c 	bl	8003e60 <vListInsertEnd>
 8004fa8:	e005      	b.n	8004fb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3318      	adds	r3, #24
 8004fae:	4619      	mov	r1, r3
 8004fb0:	480e      	ldr	r0, [pc, #56]	@ (8004fec <xTaskRemoveFromEventList+0xbc>)
 8004fb2:	f7fe ff55 	bl	8003e60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <xTaskRemoveFromEventList+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d905      	bls.n	8004fd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <xTaskRemoveFromEventList+0xc4>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e001      	b.n	8004fd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000928 	.word	0x20000928
 8004fe4:	20000908 	.word	0x20000908
 8004fe8:	20000804 	.word	0x20000804
 8004fec:	200008c0 	.word	0x200008c0
 8004ff0:	20000800 	.word	0x20000800
 8004ff4:	20000914 	.word	0x20000914

08004ff8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <vTaskInternalSetTimeOutState+0x24>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <vTaskInternalSetTimeOutState+0x28>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20000918 	.word	0x20000918
 8005020:	20000904 	.word	0x20000904

08005024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	613b      	str	r3, [r7, #16]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60fb      	str	r3, [r7, #12]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800506a:	f000 fb5d 	bl	8005728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800506e:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <xTaskCheckForTimeOut+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d102      	bne.n	800508e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e023      	b.n	80050d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <xTaskCheckForTimeOut+0xc4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d007      	beq.n	80050aa <xTaskCheckForTimeOut+0x86>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e015      	b.n	80050d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d20b      	bcs.n	80050cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff99 	bl	8004ff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e004      	b.n	80050d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f000 fb59 	bl	800578c <vPortExitCritical>

	return xReturn;
 80050da:	69fb      	ldr	r3, [r7, #28]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000904 	.word	0x20000904
 80050e8:	20000918 	.word	0x20000918

080050ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050f0:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <vTaskMissedYield+0x14>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000914 	.word	0x20000914

08005104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800510c:	f000 f852 	bl	80051b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <prvIdleTask+0x28>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d9f9      	bls.n	800510c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <prvIdleTask+0x2c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005128:	e7f0      	b.n	800510c <prvIdleTask+0x8>
 800512a:	bf00      	nop
 800512c:	20000804 	.word	0x20000804
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	e00c      	b.n	800515a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <prvInitialiseTaskLists+0x60>)
 800514c:	4413      	add	r3, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fe59 	bl	8003e06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d9ef      	bls.n	8005140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005160:	480d      	ldr	r0, [pc, #52]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005162:	f7fe fe50 	bl	8003e06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005166:	480d      	ldr	r0, [pc, #52]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005168:	f7fe fe4d 	bl	8003e06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <prvInitialiseTaskLists+0x6c>)
 800516e:	f7fe fe4a 	bl	8003e06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005172:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <prvInitialiseTaskLists+0x70>)
 8005174:	f7fe fe47 	bl	8003e06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005178:	480b      	ldr	r0, [pc, #44]	@ (80051a8 <prvInitialiseTaskLists+0x74>)
 800517a:	f7fe fe44 	bl	8003e06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <prvInitialiseTaskLists+0x78>)
 8005180:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvInitialiseTaskLists+0x7c>)
 8005186:	4a05      	ldr	r2, [pc, #20]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000804 	.word	0x20000804
 8005198:	20000890 	.word	0x20000890
 800519c:	200008a4 	.word	0x200008a4
 80051a0:	200008c0 	.word	0x200008c0
 80051a4:	200008d4 	.word	0x200008d4
 80051a8:	200008ec 	.word	0x200008ec
 80051ac:	200008b8 	.word	0x200008b8
 80051b0:	200008bc 	.word	0x200008bc

080051b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ba:	e019      	b.n	80051f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051bc:	f000 fab4 	bl	8005728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <prvCheckTasksWaitingTermination+0x50>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fe fea4 	bl	8003f1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051e6:	f000 fad1 	bl	800578c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f810 	bl	8005210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e1      	bne.n	80051bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200008d4 	.word	0x200008d4
 8005208:	20000900 	.word	0x20000900
 800520c:	200008e8 	.word	0x200008e8

08005210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc2c 	bl	8005a84 <vPortFree>
				vPortFree( pxTCB );
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fc29 	bl	8005a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005232:	e019      	b.n	8005268 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800523a:	2b01      	cmp	r3, #1
 800523c:	d103      	bne.n	8005246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc20 	bl	8005a84 <vPortFree>
	}
 8005244:	e010      	b.n	8005268 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800524c:	2b02      	cmp	r3, #2
 800524e:	d00b      	beq.n	8005268 <prvDeleteTCB+0x58>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <prvDeleteTCB+0x54>
	}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005276:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <prvResetNextTaskUnblockTime+0x38>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <prvResetNextTaskUnblockTime+0x3c>)
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005288:	e008      	b.n	800529c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528a:	4b07      	ldr	r3, [pc, #28]	@ (80052a8 <prvResetNextTaskUnblockTime+0x38>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <prvResetNextTaskUnblockTime+0x3c>)
 800529a:	6013      	str	r3, [r2, #0]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	200008b8 	.word	0x200008b8
 80052ac:	20000920 	.word	0x20000920

080052b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052b6:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <xTaskGetSchedulerState+0x34>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052be:	2301      	movs	r3, #1
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	e008      	b.n	80052d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052c4:	4b08      	ldr	r3, [pc, #32]	@ (80052e8 <xTaskGetSchedulerState+0x38>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052cc:	2302      	movs	r3, #2
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	e001      	b.n	80052d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052d6:	687b      	ldr	r3, [r7, #4]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	2000090c 	.word	0x2000090c
 80052e8:	20000928 	.word	0x20000928

080052ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d070      	beq.n	80053e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005302:	4b3b      	ldr	r3, [pc, #236]	@ (80053f0 <xTaskPriorityDisinherit+0x104>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	429a      	cmp	r2, r3
 800530a:	d00b      	beq.n	8005324 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	60fb      	str	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	429a      	cmp	r2, r3
 8005358:	d044      	beq.n	80053e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535e:	2b00      	cmp	r3, #0
 8005360:	d140      	bne.n	80053e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3304      	adds	r3, #4
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fdd7 	bl	8003f1a <uxListRemove>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d115      	bne.n	800539e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	491f      	ldr	r1, [pc, #124]	@ (80053f4 <xTaskPriorityDisinherit+0x108>)
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xTaskPriorityDisinherit+0xb2>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	2201      	movs	r2, #1
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43da      	mvns	r2, r3
 8005394:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <xTaskPriorityDisinherit+0x10c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4013      	ands	r3, r2
 800539a:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <xTaskPriorityDisinherit+0x10c>)
 800539c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	f1c3 0207 	rsb	r2, r3, #7
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	2201      	movs	r2, #1
 80053b8:	409a      	lsls	r2, r3
 80053ba:	4b0f      	ldr	r3, [pc, #60]	@ (80053f8 <xTaskPriorityDisinherit+0x10c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	4a0d      	ldr	r2, [pc, #52]	@ (80053f8 <xTaskPriorityDisinherit+0x10c>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4a08      	ldr	r2, [pc, #32]	@ (80053f4 <xTaskPriorityDisinherit+0x108>)
 80053d2:	441a      	add	r2, r3
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f7fe fd40 	bl	8003e60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053e4:	697b      	ldr	r3, [r7, #20]
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000800 	.word	0x20000800
 80053f4:	20000804 	.word	0x20000804
 80053f8:	20000908 	.word	0x20000908

080053fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005406:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fd81 	bl	8003f1a <uxListRemove>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800541e:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	2201      	movs	r2, #1
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43da      	mvns	r2, r3
 800542c:	4b21      	ldr	r3, [pc, #132]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4013      	ands	r3, r2
 8005432:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d10a      	bne.n	8005454 <prvAddCurrentTaskToDelayedList+0x58>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	481a      	ldr	r0, [pc, #104]	@ (80054b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800544e:	f7fe fd07 	bl	8003e60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005452:	e026      	b.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800545c:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d209      	bcs.n	8005480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546c:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe fd15 	bl	8003ea8 <vListInsert>
}
 800547e:	e010      	b.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005480:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe fd0b 	bl	8003ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d202      	bcs.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6013      	str	r3, [r2, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000904 	.word	0x20000904
 80054b0:	20000800 	.word	0x20000800
 80054b4:	20000908 	.word	0x20000908
 80054b8:	200008ec 	.word	0x200008ec
 80054bc:	200008bc 	.word	0x200008bc
 80054c0:	200008b8 	.word	0x200008b8
 80054c4:	20000920 	.word	0x20000920

080054c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3b04      	subs	r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b04      	subs	r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054f8:	4a0c      	ldr	r2, [pc, #48]	@ (800552c <pxPortInitialiseStack+0x64>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b14      	subs	r3, #20
 8005502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b04      	subs	r3, #4
 800550e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f06f 0202 	mvn.w	r2, #2
 8005516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b20      	subs	r3, #32
 800551c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800551e:	68fb      	ldr	r3, [r7, #12]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	08005531 	.word	0x08005531

08005530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800553a:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <prvTaskExitError+0x58>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d00b      	beq.n	800555c <prvTaskExitError+0x2c>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <prvTaskExitError+0x28>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60bb      	str	r3, [r7, #8]
}
 800556e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005570:	bf00      	nop
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0fc      	beq.n	8005572 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000020 	.word	0x20000020
 800558c:	00000000 	.word	0x00000000

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	20000800 	.word	0x20000800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	@ (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055e6:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <xPortStartScheduler+0x124>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a47      	ldr	r2, [pc, #284]	@ (8005708 <xPortStartScheduler+0x128>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10b      	bne.n	8005608 <xPortStartScheduler+0x28>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005608:	4b3e      	ldr	r3, [pc, #248]	@ (8005704 <xPortStartScheduler+0x124>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3f      	ldr	r2, [pc, #252]	@ (800570c <xPortStartScheduler+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10b      	bne.n	800562a <xPortStartScheduler+0x4a>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800562a:	4b39      	ldr	r3, [pc, #228]	@ (8005710 <xPortStartScheduler+0x130>)
 800562c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	22ff      	movs	r2, #255	@ 0xff
 800563a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b31      	ldr	r3, [pc, #196]	@ (8005714 <xPortStartScheduler+0x134>)
 8005650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005652:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <xPortStartScheduler+0x138>)
 8005654:	2207      	movs	r2, #7
 8005656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005658:	e009      	b.n	800566e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <xPortStartScheduler+0x138>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	4a2d      	ldr	r2, [pc, #180]	@ (8005718 <xPortStartScheduler+0x138>)
 8005662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d0ef      	beq.n	800565a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800567a:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <xPortStartScheduler+0x138>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1c3 0307 	rsb	r3, r3, #7
 8005682:	2b04      	cmp	r3, #4
 8005684:	d00b      	beq.n	800569e <xPortStartScheduler+0xbe>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60bb      	str	r3, [r7, #8]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800569e:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <xPortStartScheduler+0x138>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <xPortStartScheduler+0x138>)
 80056a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <xPortStartScheduler+0x138>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056b0:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <xPortStartScheduler+0x138>)
 80056b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056bc:	4b17      	ldr	r3, [pc, #92]	@ (800571c <xPortStartScheduler+0x13c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <xPortStartScheduler+0x13c>)
 80056c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056c8:	4b14      	ldr	r3, [pc, #80]	@ (800571c <xPortStartScheduler+0x13c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a13      	ldr	r2, [pc, #76]	@ (800571c <xPortStartScheduler+0x13c>)
 80056ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056d4:	f000 f8da 	bl	800588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056d8:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <xPortStartScheduler+0x140>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056de:	f000 f8f9 	bl	80058d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <xPortStartScheduler+0x144>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005724 <xPortStartScheduler+0x144>)
 80056e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80056ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056ee:	f7ff ff63 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056f2:	f7ff fb9b 	bl	8004e2c <vTaskSwitchContext>
	prvTaskExitError();
 80056f6:	f7ff ff1b 	bl	8005530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	410fc271 	.word	0x410fc271
 800570c:	410fc270 	.word	0x410fc270
 8005710:	e000e400 	.word	0xe000e400
 8005714:	2000092c 	.word	0x2000092c
 8005718:	20000930 	.word	0x20000930
 800571c:	e000ed20 	.word	0xe000ed20
 8005720:	20000020 	.word	0x20000020
 8005724:	e000ef34 	.word	0xe000ef34

08005728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005742:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <vPortEnterCritical+0x5c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3301      	adds	r3, #1
 8005748:	4a0e      	ldr	r2, [pc, #56]	@ (8005784 <vPortEnterCritical+0x5c>)
 800574a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800574c:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <vPortEnterCritical+0x5c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005754:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <vPortEnterCritical+0x60>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <vPortEnterCritical+0x4e>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	603b      	str	r3, [r7, #0]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <vPortEnterCritical+0x4a>
	}
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000020 	.word	0x20000020
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <vPortExitCritical+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <vPortExitCritical+0x26>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b2:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <vPortExitCritical+0x50>)
 80057ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vPortExitCritical+0x50>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <vPortExitCritical+0x44>
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000020 	.word	0x20000020

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f01e 0f10 	tst.w	lr, #16
 80057f0:	bf08      	it	eq
 80057f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005804:	f380 8811 	msr	BASEPRI, r0
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f7ff fb0c 	bl	8004e2c <vTaskSwitchContext>
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f380 8811 	msr	BASEPRI, r0
 800581c:	bc09      	pop	{r0, r3}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005826:	f01e 0f10 	tst.w	lr, #16
 800582a:	bf08      	it	eq
 800582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005830:	f380 8809 	msr	PSP, r0
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst>:
 8005840:	20000800 	.word	0x20000800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005862:	f7ff fa29 	bl	8004cb8 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <SysTick_Handler+0x40>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <vPortSetupTimerInterrupt+0x34>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <vPortSetupTimerInterrupt+0x38>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <vPortSetupTimerInterrupt+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <vPortSetupTimerInterrupt+0x40>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	4a09      	ldr	r2, [pc, #36]	@ (80058d0 <vPortSetupTimerInterrupt+0x44>)
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ae:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <vPortSetupTimerInterrupt+0x34>)
 80058b0:	2207      	movs	r2, #7
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010
 80058c4:	e000e018 	.word	0xe000e018
 80058c8:	20000000 	.word	0x20000000
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e000ed88 	.word	0xe000ed88

080058e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	@ 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f4:	f7ff f924 	bl	8004b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a6c <pvPortMalloc+0x184>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005900:	f000 f924 	bl	8005b4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005904:	4b5a      	ldr	r3, [pc, #360]	@ (8005a70 <pvPortMalloc+0x188>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8095 	bne.w	8005a3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005918:	2208      	movs	r2, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d015      	beq.n	8005956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <pvPortMalloc+0x6e>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d06f      	beq.n	8005a3c <pvPortMalloc+0x154>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <pvPortMalloc+0x18c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d86a      	bhi.n	8005a3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005966:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <pvPortMalloc+0x190>)
 8005968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800596a:	4b43      	ldr	r3, [pc, #268]	@ (8005a78 <pvPortMalloc+0x190>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005970:	e004      	b.n	800597c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <pvPortMalloc+0xa6>
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f1      	bne.n	8005972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800598e:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <pvPortMalloc+0x184>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	d051      	beq.n	8005a3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	4413      	add	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	2308      	movs	r3, #8
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d920      	bls.n	80059fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <pvPortMalloc+0xfc>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	613b      	str	r3, [r7, #16]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1ad2      	subs	r2, r2, r3
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f6:	69b8      	ldr	r0, [r7, #24]
 80059f8:	f000 f90a 	bl	8005c10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <pvPortMalloc+0x18c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <pvPortMalloc+0x194>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a16:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <pvPortMalloc+0x194>)
 8005a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <pvPortMalloc+0x188>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a32:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <pvPortMalloc+0x198>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a11      	ldr	r2, [pc, #68]	@ (8005a80 <pvPortMalloc+0x198>)
 8005a3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a3c:	f7ff f88e 	bl	8004b5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <pvPortMalloc+0x17a>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <pvPortMalloc+0x176>
	return pvReturn;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2000453c 	.word	0x2000453c
 8005a70:	20004550 	.word	0x20004550
 8005a74:	20004540 	.word	0x20004540
 8005a78:	20004534 	.word	0x20004534
 8005a7c:	20004544 	.word	0x20004544
 8005a80:	20004548 	.word	0x20004548

08005a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a96:	2308      	movs	r3, #8
 8005a98:	425b      	negs	r3, r3
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <vPortFree+0xbc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <vPortFree+0x46>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60fb      	str	r3, [r7, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <vPortFree+0x66>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <vPortFree+0xbc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11a      	bne.n	8005b36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <vPortFree+0xbc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b10:	f7ff f816 	bl	8004b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <vPortFree+0xc0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a09      	ldr	r2, [pc, #36]	@ (8005b44 <vPortFree+0xc0>)
 8005b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b22:	6938      	ldr	r0, [r7, #16]
 8005b24:	f000 f874 	bl	8005c10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <vPortFree+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <vPortFree+0xc4>)
 8005b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b32:	f7ff f813 	bl	8004b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20004550 	.word	0x20004550
 8005b44:	20004540 	.word	0x20004540
 8005b48:	2000454c 	.word	0x2000454c

08005b4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005b56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b58:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <prvHeapInit+0xac>)
 8005b5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3307      	adds	r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf8 <prvHeapInit+0xac>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <prvHeapInit+0xb0>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bfc <prvHeapInit+0xb0>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b98:	2208      	movs	r2, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bb6:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <prvHeapInit+0xb8>)
 8005bda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a09      	ldr	r2, [pc, #36]	@ (8005c08 <prvHeapInit+0xbc>)
 8005be2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <prvHeapInit+0xc0>)
 8005be6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000934 	.word	0x20000934
 8005bfc:	20004534 	.word	0x20004534
 8005c00:	2000453c 	.word	0x2000453c
 8005c04:	20004544 	.word	0x20004544
 8005c08:	20004540 	.word	0x20004540
 8005c0c:	20004550 	.word	0x20004550

08005c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c18:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <prvInsertBlockIntoFreeList+0xac>)
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e002      	b.n	8005c24 <prvInsertBlockIntoFreeList+0x14>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d8f7      	bhi.n	8005c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d108      	bne.n	8005c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	441a      	add	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d118      	bne.n	8005c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b15      	ldr	r3, [pc, #84]	@ (8005cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d00d      	beq.n	8005c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e008      	b.n	8005ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e003      	b.n	8005ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d002      	beq.n	8005cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20004534 	.word	0x20004534
 8005cc0:	2000453c 	.word	0x2000453c

08005cc4 <memset>:
 8005cc4:	4402      	add	r2, r0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d100      	bne.n	8005cce <memset+0xa>
 8005ccc:	4770      	bx	lr
 8005cce:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd2:	e7f9      	b.n	8005cc8 <memset+0x4>

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8005d0c <__libc_init_array+0x38>)
 8005cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8005d10 <__libc_init_array+0x3c>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8005d14 <__libc_init_array+0x40>)
 8005ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8005d18 <__libc_init_array+0x44>)
 8005ce8:	f000 f826 	bl	8005d38 <_init>
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08007ec8 	.word	0x08007ec8
 8005d10:	08007ec8 	.word	0x08007ec8
 8005d14:	08007ec8 	.word	0x08007ec8
 8005d18:	08007ecc 	.word	0x08007ecc

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <_init>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	bf00      	nop
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr

08005d44 <_fini>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr
