
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002170  08006f00  08006f00  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009070  08009070  0000b028  2**0
                  CONTENTS
  4 .ARM          00000008  08009070  08009070  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009078  08009078  0000b028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009078  08009078  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800907c  0800907c  0000a07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08009080  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004538  20000028  080090a8  0000b028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004560  080090a8  0000b560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b31  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1d  00000000  00000000  00023b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00027aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121e  00000000  00000000  000291f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e98  00000000  00000000  0002a40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f734  00000000  00000000  0002f2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd08  00000000  00000000  0004e9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea6e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  000ea728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f07e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ee8 	.word	0x08006ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08006ee8 	.word	0x08006ee8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2104      	movs	r1, #4
 80004d8:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <SELECT+0x18>)
 80004da:	f002 f983 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 fede 	bl	80022a0 <HAL_Delay>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40020c00 	.word	0x40020c00

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2104      	movs	r1, #4
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <DESELECT+0x18>)
 80004f6:	f002 f975 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 fed0 	bl	80022a0 <HAL_Delay>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020c00 	.word	0x40020c00

08000508 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <SPI_TxByte+0x30>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	@ 0x64
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <SPI_TxByte+0x30>)
 800052a:	f003 fb76 	bl	8003c1a <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200006f8 	.word	0x200006f8

0800053c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <SPI_TxBuffer+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b02      	cmp	r3, #2
 8000556:	d1f8      	bne.n	800054a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	@ 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <SPI_TxBuffer+0x30>)
 8000560:	f003 fb5b 	bl	8003c1a <HAL_SPI_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200006f8 	.word	0x200006f8

08000570 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	@ 0xff
 8000578:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057a:	bf00      	nop
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <SPI_RxByte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b02      	cmp	r3, #2
 8000588:	d1f8      	bne.n	800057c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058a:	1dba      	adds	r2, r7, #6
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <SPI_RxByte+0x34>)
 8000596:	f003 fc83 	bl	8003ea0 <HAL_SPI_TransmitReceive>

	return data;
 800059a:	79bb      	ldrb	r3, [r7, #6]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200006f8 	.word	0x200006f8

080005a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b0:	f7ff ffde 	bl	8000570 <SPI_RxByte>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <SD_ReadyWait+0x30>)
 80005cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d2:	f7ff ffcd 	bl	8000570 <SPI_RxByte>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2bff      	cmp	r3, #255	@ 0xff
 80005de:	d004      	beq.n	80005ea <SD_ReadyWait+0x26>
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <SD_ReadyWait+0x30>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1f3      	bne.n	80005d2 <SD_ReadyWait+0xe>

	return res;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200007e6 	.word	0x200007e6

080005f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005fe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000602:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000604:	f7ff ff72 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e005      	b.n	800061a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800060e:	20ff      	movs	r0, #255	@ 0xff
 8000610:	f7ff ff7a 	bl	8000508 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b09      	cmp	r3, #9
 800061e:	ddf6      	ble.n	800060e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000620:	f7ff ff56 	bl	80004d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000624:	2340      	movs	r3, #64	@ 0x40
 8000626:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000638:	2395      	movs	r3, #149	@ 0x95
 800063a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800063c:	463b      	mov	r3, r7
 800063e:	2106      	movs	r1, #6
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff7b 	bl	800053c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000646:	e002      	b.n	800064e <SD_PowerOn+0x56>
	{
		cnt--;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800064e:	f7ff ff8f 	bl	8000570 <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d002      	beq.n	800065e <SD_PowerOn+0x66>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f4      	bne.n	8000648 <SD_PowerOn+0x50>
	}

	DESELECT();
 800065e:	f7ff ff45 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000662:	20ff      	movs	r0, #255	@ 0xff
 8000664:	f7ff ff50 	bl	8000508 <SPI_TxByte>

	PowerFlag = 1;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <SD_PowerOn+0x80>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000045 	.word	0x20000045

0800067c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <SD_PowerOff+0x14>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000045 	.word	0x20000045

08000694 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <SD_CheckPower+0x14>)
 800069a:	781b      	ldrb	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000045 	.word	0x20000045

080006ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <SD_RxDataBlock+0x5c>)
 80006b8:	22c8      	movs	r2, #200	@ 0xc8
 80006ba:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006bc:	f7ff ff58 	bl	8000570 <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2bff      	cmp	r3, #255	@ 0xff
 80006c8:	d104      	bne.n	80006d4 <SD_RxDataBlock+0x28>
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <SD_RxDataBlock+0x5c>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f3      	bne.n	80006bc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80006d8:	d001      	beq.n	80006de <SD_RxDataBlock+0x32>
 80006da:	2300      	movs	r3, #0
 80006dc:	e00f      	b.n	80006fe <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff5f 	bl	80005a8 <SPI_RxBytePtr>
	} while(len--);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	603a      	str	r2, [r7, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f4      	bne.n	80006de <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80006f4:	f7ff ff3c 	bl	8000570 <SPI_RxByte>
	SPI_RxByte();
 80006f8:	f7ff ff3a 	bl	8000570 <SPI_RxByte>

	return TRUE;
 80006fc:	2301      	movs	r3, #1
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200007e5 	.word	0x200007e5

0800070c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800071c:	f7ff ff52 	bl	80005c4 <SD_ReadyWait>
 8000720:	4603      	mov	r3, r0
 8000722:	2bff      	cmp	r3, #255	@ 0xff
 8000724:	d001      	beq.n	800072a <SD_TxDataBlock+0x1e>
 8000726:	2300      	movs	r3, #0
 8000728:	e02f      	b.n	800078a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feeb 	bl	8000508 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2bfd      	cmp	r3, #253	@ 0xfd
 8000736:	d020      	beq.n	800077a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fefd 	bl	800053c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000742:	f7ff ff15 	bl	8000570 <SPI_RxByte>
		SPI_RxByte();
 8000746:	f7ff ff13 	bl	8000570 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074a:	e00b      	b.n	8000764 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800074c:	f7ff ff10 	bl	8000570 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b05      	cmp	r3, #5
 800075c:	d006      	beq.n	800076c <SD_TxDataBlock+0x60>
			i++;
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b40      	cmp	r3, #64	@ 0x40
 8000768:	d9f0      	bls.n	800074c <SD_TxDataBlock+0x40>
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800076c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076e:	bf00      	nop
 8000770:	f7ff fefe 	bl	8000570 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d101      	bne.n	8000788 <SD_TxDataBlock+0x7c>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	6039      	str	r1, [r7, #0]
 800079c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079e:	f7ff ff11 	bl	80005c4 <SD_ReadyWait>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2bff      	cmp	r3, #255	@ 0xff
 80007a6:	d001      	beq.n	80007ac <SD_SendCmd+0x1a>
 80007a8:	23ff      	movs	r3, #255	@ 0xff
 80007aa:	e042      	b.n	8000832 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feaa 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea4 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe9e 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe98 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe93 	bl	8000508 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b40      	cmp	r3, #64	@ 0x40
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x5c>
 80007e8:	2395      	movs	r3, #149	@ 0x95
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e007      	b.n	80007fe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b48      	cmp	r3, #72	@ 0x48
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x68>
 80007f4:	2387      	movs	r3, #135	@ 0x87
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <SD_SendCmd+0x6c>
	else crc = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe81 	bl	8000508 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b4c      	cmp	r3, #76	@ 0x4c
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x7e>
 800080c:	f7ff feb0 	bl	8000570 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000814:	f7ff feac 	bl	8000570 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800081c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da05      	bge.n	8000830 <SD_SendCmd+0x9e>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	3b01      	subs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <SD_SendCmd+0x82>

	return res;
 8000830:	7b7b      	ldrb	r3, [r7, #13]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SD_disk_initialize+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e0d6      	b.n	80009fe <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000850:	4b6d      	ldr	r3, [pc, #436]	@ (8000a08 <SD_disk_initialize+0x1cc>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <SD_disk_initialize+0x2a>
 800085e:	4b6a      	ldr	r3, [pc, #424]	@ (8000a08 <SD_disk_initialize+0x1cc>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0cb      	b.n	80009fe <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000866:	f7ff fec7 	bl	80005f8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800086a:	f7ff fe31 	bl	80004d0 <SELECT>

	/* check disk type */
	type = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	@ 0x40
 8000876:	f7ff ff8c 	bl	8000792 <SD_SendCmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a6 	bne.w	80009ce <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000882:	4b62      	ldr	r3, [pc, #392]	@ (8000a0c <SD_disk_initialize+0x1d0>)
 8000884:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000888:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800088e:	2048      	movs	r0, #72	@ 0x48
 8000890:	f7ff ff7f 	bl	8000792 <SD_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d158      	bne.n	800094c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e00c      	b.n	80008ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	f7ff fe65 	bl	8000570 <SPI_RxByte>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f104 0310 	add.w	r3, r4, #16
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9ef      	bls.n	80008a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	f040 8083 	bne.w	80009ce <SD_disk_initialize+0x192>
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	2baa      	cmp	r3, #170	@ 0xaa
 80008cc:	d17f      	bne.n	80009ce <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008ce:	2100      	movs	r1, #0
 80008d0:	2077      	movs	r0, #119	@ 0x77
 80008d2:	f7ff ff5e 	bl	8000792 <SD_SendCmd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d807      	bhi.n	80008ec <SD_disk_initialize+0xb0>
 80008dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008e0:	2069      	movs	r0, #105	@ 0x69
 80008e2:	f7ff ff56 	bl	8000792 <SD_SendCmd>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80008ec:	4b47      	ldr	r3, [pc, #284]	@ (8000a0c <SD_disk_initialize+0x1d0>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1eb      	bne.n	80008ce <SD_disk_initialize+0x92>
 80008f6:	e000      	b.n	80008fa <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008fa:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <SD_disk_initialize+0x1d0>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d064      	beq.n	80009ce <SD_disk_initialize+0x192>
 8000904:	2100      	movs	r1, #0
 8000906:	207a      	movs	r0, #122	@ 0x7a
 8000908:	f7ff ff43 	bl	8000792 <SD_SendCmd>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d15d      	bne.n	80009ce <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e00c      	b.n	8000932 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000918:	7bfc      	ldrb	r4, [r7, #15]
 800091a:	f7ff fe29 	bl	8000570 <SPI_RxByte>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	f104 0310 	add.w	r3, r4, #16
 8000926:	443b      	add	r3, r7
 8000928:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	3301      	adds	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d9ef      	bls.n	8000918 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000938:	7a3b      	ldrb	r3, [r7, #8]
 800093a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SD_disk_initialize+0x10a>
 8000942:	230c      	movs	r3, #12
 8000944:	e000      	b.n	8000948 <SD_disk_initialize+0x10c>
 8000946:	2304      	movs	r3, #4
 8000948:	73bb      	strb	r3, [r7, #14]
 800094a:	e040      	b.n	80009ce <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800094c:	2100      	movs	r1, #0
 800094e:	2077      	movs	r0, #119	@ 0x77
 8000950:	f7ff ff1f 	bl	8000792 <SD_SendCmd>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d808      	bhi.n	800096c <SD_disk_initialize+0x130>
 800095a:	2100      	movs	r1, #0
 800095c:	2069      	movs	r0, #105	@ 0x69
 800095e:	f7ff ff18 	bl	8000792 <SD_SendCmd>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d801      	bhi.n	800096c <SD_disk_initialize+0x130>
 8000968:	2302      	movs	r3, #2
 800096a:	e000      	b.n	800096e <SD_disk_initialize+0x132>
 800096c:	2301      	movs	r3, #1
 800096e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d10e      	bne.n	8000994 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	@ 0x77
 800097a:	f7ff ff0a 	bl	8000792 <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d80e      	bhi.n	80009a2 <SD_disk_initialize+0x166>
 8000984:	2100      	movs	r1, #0
 8000986:	2069      	movs	r0, #105	@ 0x69
 8000988:	f7ff ff03 	bl	8000792 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d107      	bne.n	80009a2 <SD_disk_initialize+0x166>
 8000992:	e00d      	b.n	80009b0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000994:	2100      	movs	r1, #0
 8000996:	2041      	movs	r0, #65	@ 0x41
 8000998:	f7ff fefb 	bl	8000792 <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <SD_disk_initialize+0x1d0>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e1      	bne.n	8000970 <SD_disk_initialize+0x134>
 80009ac:	e000      	b.n	80009b0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ae:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <SD_disk_initialize+0x1d0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SD_disk_initialize+0x18e>
 80009ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009be:	2050      	movs	r0, #80	@ 0x50
 80009c0:	f7ff fee7 	bl	8000792 <SD_SendCmd>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SD_disk_initialize+0x192>
 80009ca:	2300      	movs	r3, #0
 80009cc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <SD_disk_initialize+0x1d4>)
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009d4:	f7ff fd8a 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80009d8:	f7ff fdca 	bl	8000570 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <SD_disk_initialize+0x1cc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SD_disk_initialize+0x1cc>)
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e001      	b.n	80009f8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009f4:	f7ff fe42 	bl	800067c <SD_PowerOff>
	}

	return Stat;
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <SD_disk_initialize+0x1cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	200007e5 	.word	0x200007e5
 8000a10:	20000044 	.word	0x20000044

08000a14 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SD_disk_status+0x14>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e002      	b.n	8000a2e <SD_disk_status+0x1a>
	return Stat;
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SD_disk_status+0x28>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000

08000a40 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <SD_disk_read+0x1c>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <SD_disk_read+0x20>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	e051      	b.n	8000b04 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <SD_disk_read+0xcc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SD_disk_read+0x32>
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e048      	b.n	8000b04 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a72:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <SD_disk_read+0xd0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <SD_disk_read+0x44>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a84:	f7ff fd24 	bl	80004d0 <SELECT>

	if (count == 1)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d111      	bne.n	8000ab2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2051      	movs	r0, #81	@ 0x51
 8000a92:	f7ff fe7e 	bl	8000792 <SD_SendCmd>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d129      	bne.n	8000af0 <SD_disk_read+0xb0>
 8000a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa0:	68b8      	ldr	r0, [r7, #8]
 8000aa2:	f7ff fe03 	bl	80006ac <SD_RxDataBlock>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d021      	beq.n	8000af0 <SD_disk_read+0xb0>
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	e01e      	b.n	8000af0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2052      	movs	r0, #82	@ 0x52
 8000ab6:	f7ff fe6c 	bl	8000792 <SD_SendCmd>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d117      	bne.n	8000af0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f7ff fdf1 	bl	80006ac <SD_RxDataBlock>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00a      	beq.n	8000ae6 <SD_disk_read+0xa6>
				buff += 512;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ad6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1ed      	bne.n	8000ac0 <SD_disk_read+0x80>
 8000ae4:	e000      	b.n	8000ae8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	204c      	movs	r0, #76	@ 0x4c
 8000aec:	f7ff fe51 	bl	8000792 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000af0:	f7ff fcfc 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000af4:	f7ff fd3c 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000044 	.word	0x20000044

08000b14 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d102      	bne.n	8000b30 <SD_disk_write+0x1c>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <SD_disk_write+0x20>
 8000b30:	2304      	movs	r3, #4
 8000b32:	e06b      	b.n	8000c0c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b34:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <SD_disk_write+0x100>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SD_disk_write+0x32>
 8000b42:	2303      	movs	r3, #3
 8000b44:	e062      	b.n	8000c0c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b46:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <SD_disk_write+0x100>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SD_disk_write+0x44>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e059      	b.n	8000c0c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <SD_disk_write+0x104>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <SD_disk_write+0x56>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	025b      	lsls	r3, r3, #9
 8000b68:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b6a:	f7ff fcb1 	bl	80004d0 <SELECT>

	if (count == 1)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d110      	bne.n	8000b96 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	2058      	movs	r0, #88	@ 0x58
 8000b78:	f7ff fe0b 	bl	8000792 <SD_SendCmd>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d13a      	bne.n	8000bf8 <SD_disk_write+0xe4>
 8000b82:	21fe      	movs	r1, #254	@ 0xfe
 8000b84:	68b8      	ldr	r0, [r7, #8]
 8000b86:	f7ff fdc1 	bl	800070c <SD_TxDataBlock>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d033      	beq.n	8000bf8 <SD_disk_write+0xe4>
			count = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	e030      	b.n	8000bf8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <SD_disk_write+0x104>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d007      	beq.n	8000bb2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2077      	movs	r0, #119	@ 0x77
 8000ba6:	f7ff fdf4 	bl	8000792 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	2057      	movs	r0, #87	@ 0x57
 8000bae:	f7ff fdf0 	bl	8000792 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2059      	movs	r0, #89	@ 0x59
 8000bb6:	f7ff fdec 	bl	8000792 <SD_SendCmd>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bc0:	21fc      	movs	r1, #252	@ 0xfc
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f7ff fda2 	bl	800070c <SD_TxDataBlock>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00a      	beq.n	8000be4 <SD_disk_write+0xd0>
				buff += 512;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bd4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1ee      	bne.n	8000bc0 <SD_disk_write+0xac>
 8000be2:	e000      	b.n	8000be6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000be6:	21fd      	movs	r1, #253	@ 0xfd
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fd8f 	bl	800070c <SD_TxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bf8:	f7ff fc78 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000bfc:	f7ff fcb8 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000044 	.word	0x20000044

08000c1c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b08b      	sub	sp, #44	@ 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SD_disk_ioctl+0x1e>
 8000c36:	2304      	movs	r3, #4
 8000c38:	e113      	b.n	8000e62 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d124      	bne.n	8000c90 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d012      	beq.n	8000c74 <SD_disk_ioctl+0x58>
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	dc1a      	bgt.n	8000c88 <SD_disk_ioctl+0x6c>
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <SD_disk_ioctl+0x40>
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d006      	beq.n	8000c68 <SD_disk_ioctl+0x4c>
 8000c5a:	e015      	b.n	8000c88 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c5c:	f7ff fd0e 	bl	800067c <SD_PowerOff>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c66:	e0fa      	b.n	8000e5e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c68:	f7ff fcc6 	bl	80005f8 <SD_PowerOn>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c72:	e0f4      	b.n	8000e5e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	1c5c      	adds	r4, r3, #1
 8000c78:	f7ff fd0c 	bl	8000694 <SD_CheckPower>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c86:	e0ea      	b.n	8000e5e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c8e:	e0e6      	b.n	8000e5e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c90:	4b76      	ldr	r3, [pc, #472]	@ (8000e6c <SD_disk_ioctl+0x250>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SD_disk_ioctl+0x86>
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e0df      	b.n	8000e62 <SD_disk_ioctl+0x246>

		SELECT();
 8000ca2:	f7ff fc15 	bl	80004d0 <SELECT>

		switch (ctrl)
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	2b0d      	cmp	r3, #13
 8000caa:	f200 80c9 	bhi.w	8000e40 <SD_disk_ioctl+0x224>
 8000cae:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb4 <SD_disk_ioctl+0x98>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000dab 	.word	0x08000dab
 8000cb8:	08000ced 	.word	0x08000ced
 8000cbc:	08000d9b 	.word	0x08000d9b
 8000cc0:	08000e41 	.word	0x08000e41
 8000cc4:	08000e41 	.word	0x08000e41
 8000cc8:	08000e41 	.word	0x08000e41
 8000ccc:	08000e41 	.word	0x08000e41
 8000cd0:	08000e41 	.word	0x08000e41
 8000cd4:	08000e41 	.word	0x08000e41
 8000cd8:	08000e41 	.word	0x08000e41
 8000cdc:	08000e41 	.word	0x08000e41
 8000ce0:	08000dbd 	.word	0x08000dbd
 8000ce4:	08000de1 	.word	0x08000de1
 8000ce8:	08000e05 	.word	0x08000e05
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cec:	2100      	movs	r1, #0
 8000cee:	2049      	movs	r0, #73	@ 0x49
 8000cf0:	f7ff fd4f 	bl	8000792 <SD_SendCmd>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 80a6 	bne.w	8000e48 <SD_disk_ioctl+0x22c>
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2110      	movs	r1, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcd2 	bl	80006ac <SD_RxDataBlock>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 809c 	beq.w	8000e48 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d10:	7b3b      	ldrb	r3, [r7, #12]
 8000d12:	099b      	lsrs	r3, r3, #6
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10d      	bne.n	8000d36 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d1a:	7d7b      	ldrb	r3, [r7, #21]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	7d3b      	ldrb	r3, [r7, #20]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d2c:	8bfb      	ldrh	r3, [r7, #30]
 8000d2e:	029a      	lsls	r2, r3, #10
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e02d      	b.n	8000d92 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d36:	7c7b      	ldrb	r3, [r7, #17]
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7dbb      	ldrb	r3, [r7, #22]
 8000d40:	09db      	lsrs	r3, r3, #7
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	7d7b      	ldrb	r3, [r7, #21]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 0306 	and.w	r3, r3, #6
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d5e:	7d3b      	ldrb	r3, [r7, #20]
 8000d60:	099b      	lsrs	r3, r3, #6
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	7cbb      	ldrb	r3, [r7, #18]
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3301      	adds	r3, #1
 8000d82:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d84:	8bfa      	ldrh	r2, [r7, #30]
 8000d86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d8a:	3b09      	subs	r3, #9
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000d98:	e056      	b.n	8000e48 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000da8:	e055      	b.n	8000e56 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000daa:	f7ff fc0b 	bl	80005c4 <SD_ReadyWait>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2bff      	cmp	r3, #255	@ 0xff
 8000db2:	d14b      	bne.n	8000e4c <SD_disk_ioctl+0x230>
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e047      	b.n	8000e4c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2049      	movs	r0, #73	@ 0x49
 8000dc0:	f7ff fce7 	bl	8000792 <SD_SendCmd>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d142      	bne.n	8000e50 <SD_disk_ioctl+0x234>
 8000dca:	2110      	movs	r1, #16
 8000dcc:	6a38      	ldr	r0, [r7, #32]
 8000dce:	f7ff fc6d 	bl	80006ac <SD_RxDataBlock>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d03b      	beq.n	8000e50 <SD_disk_ioctl+0x234>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dde:	e037      	b.n	8000e50 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de0:	2100      	movs	r1, #0
 8000de2:	204a      	movs	r0, #74	@ 0x4a
 8000de4:	f7ff fcd5 	bl	8000792 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d132      	bne.n	8000e54 <SD_disk_ioctl+0x238>
 8000dee:	2110      	movs	r1, #16
 8000df0:	6a38      	ldr	r0, [r7, #32]
 8000df2:	f7ff fc5b 	bl	80006ac <SD_RxDataBlock>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d02b      	beq.n	8000e54 <SD_disk_ioctl+0x238>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e02:	e027      	b.n	8000e54 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e04:	2100      	movs	r1, #0
 8000e06:	207a      	movs	r0, #122	@ 0x7a
 8000e08:	f7ff fcc3 	bl	8000792 <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e18:	e00b      	b.n	8000e32 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e1a:	6a3c      	ldr	r4, [r7, #32]
 8000e1c:	1c63      	adds	r3, r4, #1
 8000e1e:	623b      	str	r3, [r7, #32]
 8000e20:	f7ff fba6 	bl	8000570 <SPI_RxByte>
 8000e24:	4603      	mov	r3, r0
 8000e26:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d9ef      	bls.n	8000e1a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e40:	2304      	movs	r3, #4
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e46:	e006      	b.n	8000e56 <SD_disk_ioctl+0x23a>
			break;
 8000e48:	bf00      	nop
 8000e4a:	e004      	b.n	8000e56 <SD_disk_ioctl+0x23a>
			break;
 8000e4c:	bf00      	nop
 8000e4e:	e002      	b.n	8000e56 <SD_disk_ioctl+0x23a>
			break;
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <SD_disk_ioctl+0x23a>
			break;
 8000e54:	bf00      	nop
		}

		DESELECT();
 8000e56:	f7ff fb49 	bl	80004ec <DESELECT>
		SPI_RxByte();
 8000e5a:	f7ff fb89 	bl	8000570 <SPI_RxByte>
	}

	return res;
 8000e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	372c      	adds	r7, #44	@ 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HandleInput>:
#include "keypad.h"
/*Funciones relacionadas al keypad*/
eventoSecuencia HandleInput(FSM *FSM1){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoEnviado;
	uint8_t KeyPressed;
	if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){		//Mientras no se supere el timeout puedo ingresar digito
 8000e78:	f004 ffe2 	bl	8005e40 <xTaskGetTickCount>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d849      	bhi.n	8000f20 <HandleInput+0xb0>
		KeyPressed = GetKey();
 8000e8c:	f000 f852 	bl	8000f34 <GetKey>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73bb      	strb	r3, [r7, #14]
		if(KeyPressed != 0){
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d03f      	beq.n	8000f1a <HandleInput+0xaa>
			if(KeyPressed == BORRAR_DIGITO){
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b23      	cmp	r3, #35	@ 0x23
 8000e9e:	d119      	bne.n	8000ed4 <HandleInput+0x64>
				FSM1->CurrentIndex--;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	719a      	strb	r2, [r3, #6]
				FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	799b      	ldrb	r3, [r3, #6]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	5499      	strb	r1, [r3, r2]
				FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8000eb8:	f004 ffc2 	bl	8005e40 <xTaskGetTickCount>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
				FSM1->CurrentState--;									//Vuelvo al estado anterior
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	79db      	ldrb	r3, [r3, #7]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e02a      	b.n	8000f2a <HandleInput+0xba>
			}
			else{
				if(KeyPressed == ENTER){
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ed8:	d105      	bne.n	8000ee6 <HandleInput+0x76>
					/*Esta seccion maneja el caso de secuencia incompleta*/
					FSM1->CurrentState = INCOMPLETO;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2208      	movs	r2, #8
 8000ede:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_SECUENCIA_INCOMPLETA;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e021      	b.n	8000f2a <HandleInput+0xba>
				}
				else{
					/*Esta seccion se encarga de tomar cualquier otro digito*/
					FSM1->Buffer[FSM1->CurrentIndex] = KeyPressed;			//Guardo el digito en el buffer
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	799b      	ldrb	r3, [r3, #6]
 8000eea:	4619      	mov	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7bba      	ldrb	r2, [r7, #14]
 8000ef0:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	799b      	ldrb	r3, [r3, #6]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();
 8000efe:	f004 ff9f 	bl	8005e40 <xTaskGetTickCount>
 8000f02:	4602      	mov	r2, r0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState++;									//Paso al siguiente estado
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	79db      	ldrb	r3, [r3, #7]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;
 8000f14:	2302      	movs	r3, #2
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e007      	b.n	8000f2a <HandleInput+0xba>
				}

			}
		}
		else{
			eventoEnviado = PANTALLA_IDLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e004      	b.n	8000f2a <HandleInput+0xba>
		}
	}
	else{
		FSM1->CurrentState = TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2207      	movs	r2, #7
 8000f24:	71da      	strb	r2, [r3, #7]
		eventoEnviado = PANTALLA_TIMEOUT;
 8000f26:	2306      	movs	r3, #6
 8000f28:	73fb      	strb	r3, [r7, #15]
	}
	return eventoEnviado;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <GetKey>:

uint8_t GetKey(void){
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08b      	sub	sp, #44	@ 0x2c
 8000f38:	af00      	add	r7, sp, #0
	/*Esta funcion realiza un barrido al keypad matricial 4x4*/
	/*Si se presiona una tecla, devuelve el ascii asociado. Si no, devuelve 0*/
	uint16_t PinRows[ROWS] = {GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 8000f3a:	4a43      	ldr	r2, [pc, #268]	@ (8001048 <GetKey+0x114>)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f44:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t PinCols[COLS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};
 8000f48:	4a40      	ldr	r2, [pc, #256]	@ (800104c <GetKey+0x118>)
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f52:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t KeyPressed;
	char Keypad[ROWS][COLS] = {
 8000f56:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <GetKey+0x11c>)
 8000f58:	1d3c      	adds	r4, r7, #4
 8000f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      {'4', '5', '6', 'B'},
	      {'7', '8', '9', 'C'},
	      {'*', '0', '#', 'D'}
	 };
	 /*Escaneo el teclado en busca de 1 tecla presionada. Si hay tecla presionada*/
	 for(uint8_t i = 0; i < ROWS; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f66:	e066      	b.n	8001036 <GetKey+0x102>
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_SET);					//Prendo y apago secuencialmente las filas
 8000f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	3328      	adds	r3, #40	@ 0x28
 8000f70:	443b      	add	r3, r7
 8000f72:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4836      	ldr	r0, [pc, #216]	@ (8001054 <GetKey+0x120>)
 8000f7c:	f001 fc32 	bl	80027e4 <HAL_GPIO_WritePin>
		 for(uint8_t j = 0; j < COLS; j++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f86:	e041      	b.n	800100c <GetKey+0xd8>
			 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){			//Barro las columnas y verifico si se presiona una tecla
 8000f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	3328      	adds	r3, #40	@ 0x28
 8000f90:	443b      	add	r3, r7
 8000f92:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f96:	4619      	mov	r1, r3
 8000f98:	482e      	ldr	r0, [pc, #184]	@ (8001054 <GetKey+0x120>)
 8000f9a:	f001 fc0b 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d12e      	bne.n	8001002 <GetKey+0xce>
				 vTaskDelay(20 / portTICK_RATE_MS);								//Espero 20 ms y reconfirmo el estado. Si no se reconfirma sigue el barrido.
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f004 fe07 	bl	8005bb8 <vTaskDelay>
				 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){
 8000faa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	3328      	adds	r3, #40	@ 0x28
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4826      	ldr	r0, [pc, #152]	@ (8001054 <GetKey+0x120>)
 8000fbc:	f001 fbfa 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d11d      	bne.n	8001002 <GetKey+0xce>
					 KeyPressed = (uint8_t) Keypad[i][j];
 8000fc6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	3228      	adds	r2, #40	@ 0x28
 8000fd2:	443a      	add	r2, r7
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b24      	subs	r3, #36	@ 0x24
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);		//Pongo fila a 0 antes de salir de la funcion.
 8000fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	3328      	adds	r3, #40	@ 0x28
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4818      	ldr	r0, [pc, #96]	@ (8001054 <GetKey+0x120>)
 8000ff2:	f001 fbf7 	bl	80027e4 <HAL_GPIO_WritePin>
					 vTaskDelay(150/ portTICK_RATE_MS);
 8000ff6:	2096      	movs	r0, #150	@ 0x96
 8000ff8:	f004 fdde 	bl	8005bb8 <vTaskDelay>
					 return KeyPressed;
 8000ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001000:	e01e      	b.n	8001040 <GetKey+0x10c>
		 for(uint8_t j = 0; j < COLS; j++){
 8001002:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001006:	3301      	adds	r3, #1
 8001008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800100c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001010:	2b03      	cmp	r3, #3
 8001012:	d9b9      	bls.n	8000f88 <GetKey+0x54>
				 }
			 }
		 }
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);
 8001014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	3328      	adds	r3, #40	@ 0x28
 800101c:	443b      	add	r3, r7
 800101e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <GetKey+0x120>)
 8001028:	f001 fbdc 	bl	80027e4 <HAL_GPIO_WritePin>
	 for(uint8_t i = 0; i < ROWS; i++){
 800102c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001030:	3301      	adds	r3, #1
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800103a:	2b03      	cmp	r3, #3
 800103c:	d994      	bls.n	8000f68 <GetKey+0x34>
	 }
	 return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	08006f00 	.word	0x08006f00
 800104c:	08006f08 	.word	0x08006f08
 8001050:	08006f10 	.word	0x08006f10
 8001054:	40020800 	.word	0x40020800

08001058 <ClearBuffer>:
		str++;
	}
	return;
}

void ClearBuffer(uint8_t *Buffer, uint8_t size){
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e007      	b.n	800107a <ClearBuffer+0x22>
		Buffer[i] = 0;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3f3      	bcc.n	800106a <ClearBuffer+0x12>
	}
	return;
 8001082:	bf00      	nop
}
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <displayInit>:
#include "screen.h"
extern QueueHandle_t uiQueue;

void displayInit(void){
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 8001092:	f000 f917 	bl	80012c4 <ssd1306_Init>
	return;
 8001096:	bf00      	nop
}
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <displayInsertKeyMsg>:

void displayInsertKeyMsg(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 80010a2:	2305      	movs	r3, #5
 80010a4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f974 	bl	8001398 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80010b0:	79ba      	ldrb	r2, [r7, #6]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fab8 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <displayInsertKeyMsg+0x68>)
 80010be:	2201      	movs	r2, #1
 80010c0:	9200      	str	r2, [sp, #0]
 80010c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c4:	4810      	ldr	r0, [pc, #64]	@ (8001108 <displayInsertKeyMsg+0x6c>)
 80010c6:	f000 fa8b 	bl	80015e0 <ssd1306_WriteString>
	x += 15;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	330f      	adds	r3, #15
 80010ce:	71fb      	strb	r3, [r7, #7]
	y += 26;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	331a      	adds	r3, #26
 80010d4:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80010d6:	79ba      	ldrb	r2, [r7, #6]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 faa5 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <displayInsertKeyMsg+0x68>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <displayInsertKeyMsg+0x70>)
 80010ec:	f000 fa78 	bl	80015e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80010f0:	f000 f96a 	bl	80013c8 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f94f 	bl	8001398 <ssd1306_Fill>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	0800904c 	.word	0x0800904c
 8001108:	08006f20 	.word	0x08006f20
 800110c:	08006f28 	.word	0x08006f28

08001110 <displayTimeoutMsg>:

void displayTimeoutMsg(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8001116:	2305      	movs	r3, #5
 8001118:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 800111a:	2312      	movs	r3, #18
 800111c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f93a 	bl	8001398 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fa7e 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <displayTimeoutMsg+0x3c>)
 8001132:	2201      	movs	r2, #1
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <displayTimeoutMsg+0x40>)
 800113a:	f000 fa51 	bl	80015e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800113e:	f000 f943 	bl	80013c8 <ssd1306_UpdateScreen>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	08009040 	.word	0x08009040
 8001150:	08006f30 	.word	0x08006f30

08001154 <displayIncompleteMsg>:

void displayIncompleteMsg(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 800115a:	2314      	movs	r3, #20
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f918 	bl	8001398 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fa5c 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <displayIncompleteMsg+0x84>)
 8001176:	2201      	movs	r2, #1
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117c:	4817      	ldr	r0, [pc, #92]	@ (80011dc <displayIncompleteMsg+0x88>)
 800117e:	f000 fa2f 	bl	80015e0 <ssd1306_WriteString>
	x = 10;
 8001182:	230a      	movs	r3, #10
 8001184:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	3312      	adds	r3, #18
 800118a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa4a 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <displayIncompleteMsg+0x84>)
 800119a:	2201      	movs	r2, #1
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	480f      	ldr	r0, [pc, #60]	@ (80011e0 <displayIncompleteMsg+0x8c>)
 80011a2:	f000 fa1d 	bl	80015e0 <ssd1306_WriteString>
	x = 20;
 80011a6:	2314      	movs	r3, #20
 80011a8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	3312      	adds	r3, #18
 80011ae:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80011b0:	79ba      	ldrb	r2, [r7, #6]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fa38 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <displayIncompleteMsg+0x84>)
 80011be:	2201      	movs	r2, #1
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <displayIncompleteMsg+0x90>)
 80011c6:	f000 fa0b 	bl	80015e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011ca:	f000 f8fd 	bl	80013c8 <ssd1306_UpdateScreen>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08009040 	.word	0x08009040
 80011dc:	08006f20 	.word	0x08006f20
 80011e0:	08006f3c 	.word	0x08006f3c
 80011e4:	08006f48 	.word	0x08006f48

080011e8 <displayAccessState>:

void displayAccessState(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 80011ee:	2305      	movs	r3, #5
 80011f0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f8ce 	bl	8001398 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fa12 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <displayAccessState+0x5c>)
 800120a:	2201      	movs	r2, #1
 800120c:	9200      	str	r2, [sp, #0]
 800120e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <displayAccessState+0x60>)
 8001212:	f000 f9e5 	bl	80015e0 <ssd1306_WriteString>
	y += 18;
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	3312      	adds	r3, #18
 800121a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800121c:	79ba      	ldrb	r2, [r7, #6]
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fa02 	bl	800162c <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <displayAccessState+0x5c>)
 800122a:	2201      	movs	r2, #1
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001230:	4806      	ldr	r0, [pc, #24]	@ (800124c <displayAccessState+0x64>)
 8001232:	f000 f9d5 	bl	80015e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001236:	f000 f8c7 	bl	80013c8 <ssd1306_UpdateScreen>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08009040 	.word	0x08009040
 8001248:	08006f50 	.word	0x08006f50
 800124c:	08006f58 	.word	0x08006f58

08001250 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	2200      	movs	r2, #0
 800127c:	2178      	movs	r1, #120	@ 0x78
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <ssd1306_WriteCommand+0x2c>)
 8001280:	f001 fc0e 	bl	8002aa0 <HAL_I2C_Mem_Write>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200006a4 	.word	0x200006a4

08001290 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af04      	add	r7, sp, #16
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	9202      	str	r2, [sp, #8]
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	2240      	movs	r2, #64	@ 0x40
 80012ae:	2178      	movs	r1, #120	@ 0x78
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <ssd1306_WriteData+0x30>)
 80012b2:	f001 fbf5 	bl	8002aa0 <HAL_I2C_Mem_Write>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200006a4 	.word	0x200006a4

080012c4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012c8:	f7ff ffc2 	bl	8001250 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f004 fc73 	bl	8005bb8 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f9d6 	bl	8001684 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012d8:	2020      	movs	r0, #32
 80012da:	f7ff ffc1 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff ffbe 	bl	8001260 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012e4:	20b0      	movs	r0, #176	@ 0xb0
 80012e6:	f7ff ffbb 	bl	8001260 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012ea:	20c8      	movs	r0, #200	@ 0xc8
 80012ec:	f7ff ffb8 	bl	8001260 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ffb5 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012f6:	2010      	movs	r0, #16
 80012f8:	f7ff ffb2 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012fc:	2040      	movs	r0, #64	@ 0x40
 80012fe:	f7ff ffaf 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001302:	20ff      	movs	r0, #255	@ 0xff
 8001304:	f000 f9aa 	bl	800165c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001308:	20a1      	movs	r0, #161	@ 0xa1
 800130a:	f7ff ffa9 	bl	8001260 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800130e:	20a6      	movs	r0, #166	@ 0xa6
 8001310:	f7ff ffa6 	bl	8001260 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001314:	20a8      	movs	r0, #168	@ 0xa8
 8001316:	f7ff ffa3 	bl	8001260 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800131a:	203f      	movs	r0, #63	@ 0x3f
 800131c:	f7ff ffa0 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001320:	20a4      	movs	r0, #164	@ 0xa4
 8001322:	f7ff ff9d 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001326:	20d3      	movs	r0, #211	@ 0xd3
 8001328:	f7ff ff9a 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff ff97 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001332:	20d5      	movs	r0, #213	@ 0xd5
 8001334:	f7ff ff94 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001338:	20f0      	movs	r0, #240	@ 0xf0
 800133a:	f7ff ff91 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800133e:	20d9      	movs	r0, #217	@ 0xd9
 8001340:	f7ff ff8e 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001344:	2022      	movs	r0, #34	@ 0x22
 8001346:	f7ff ff8b 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800134a:	20da      	movs	r0, #218	@ 0xda
 800134c:	f7ff ff88 	bl	8001260 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001350:	2012      	movs	r0, #18
 8001352:	f7ff ff85 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001356:	20db      	movs	r0, #219	@ 0xdb
 8001358:	f7ff ff82 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800135c:	2020      	movs	r0, #32
 800135e:	f7ff ff7f 	bl	8001260 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001362:	208d      	movs	r0, #141	@ 0x8d
 8001364:	f7ff ff7c 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001368:	2014      	movs	r0, #20
 800136a:	f7ff ff79 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800136e:	2001      	movs	r0, #1
 8001370:	f000 f988 	bl	8001684 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001374:	2000      	movs	r0, #0
 8001376:	f000 f80f 	bl	8001398 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800137a:	f000 f825 	bl	80013c8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <ssd1306_Init+0xd0>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <ssd1306_Init+0xd0>)
 8001386:	2200      	movs	r2, #0
 8001388:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800138a:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <ssd1306_Init+0xd0>)
 800138c:	2201      	movs	r2, #1
 800138e:	711a      	strb	r2, [r3, #4]
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000448 	.word	0x20000448

08001398 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <ssd1306_Fill+0x14>
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <ssd1306_Fill+0x16>
 80013ac:	23ff      	movs	r3, #255	@ 0xff
 80013ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b2:	4619      	mov	r1, r3
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <ssd1306_Fill+0x2c>)
 80013b6:	f005 fd5d 	bl	8006e74 <memset>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000048 	.word	0x20000048

080013c8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	e016      	b.n	8001402 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3b50      	subs	r3, #80	@ 0x50
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff40 	bl	8001260 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ff3d 	bl	8001260 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013e6:	2010      	movs	r0, #16
 80013e8:	f7ff ff3a 	bl	8001260 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	01db      	lsls	r3, r3, #7
 80013f0:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <ssd1306_UpdateScreen+0x4c>)
 80013f2:	4413      	add	r3, r2
 80013f4:	2180      	movs	r1, #128	@ 0x80
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff4a 	bl	8001290 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3301      	adds	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d9e5      	bls.n	80013d4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000048 	.word	0x20000048

08001418 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	460b      	mov	r3, r1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db3d      	blt.n	80014ae <ssd1306_DrawPixel+0x96>
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	2b3f      	cmp	r3, #63	@ 0x3f
 8001436:	d83a      	bhi.n	80014ae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d11a      	bne.n	8001474 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	b2d8      	uxtb	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	01db      	lsls	r3, r3, #7
 800144a:	4413      	add	r3, r2
 800144c:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <ssd1306_DrawPixel+0xa4>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b259      	sxtb	r1, r3
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	4603      	mov	r3, r0
 8001468:	01db      	lsls	r3, r3, #7
 800146a:	4413      	add	r3, r2
 800146c:	b2c9      	uxtb	r1, r1
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <ssd1306_DrawPixel+0xa4>)
 8001470:	54d1      	strb	r1, [r2, r3]
 8001472:	e01d      	b.n	80014b0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	b2d8      	uxtb	r0, r3
 800147c:	4603      	mov	r3, r0
 800147e:	01db      	lsls	r3, r3, #7
 8001480:	4413      	add	r3, r2
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <ssd1306_DrawPixel+0xa4>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	b25a      	sxtb	r2, r3
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	b25b      	sxtb	r3, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4013      	ands	r3, r2
 800149c:	b259      	sxtb	r1, r3
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4603      	mov	r3, r0
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4413      	add	r3, r2
 80014a6:	b2c9      	uxtb	r1, r1
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <ssd1306_DrawPixel+0xa4>)
 80014aa:	54d1      	strb	r1, [r2, r3]
 80014ac:	e000      	b.n	80014b0 <ssd1306_DrawPixel+0x98>
        return;
 80014ae:	bf00      	nop
    }
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000048 	.word	0x20000048

080014c0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4638      	mov	r0, r7
 80014ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014ce:	4623      	mov	r3, r4
 80014d0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b1f      	cmp	r3, #31
 80014d6:	d902      	bls.n	80014de <ssd1306_WriteChar+0x1e>
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b7e      	cmp	r3, #126	@ 0x7e
 80014dc:	d901      	bls.n	80014e2 <ssd1306_WriteChar+0x22>
        return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e077      	b.n	80015d2 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	783b      	ldrb	r3, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	2b80      	cmp	r3, #128	@ 0x80
 80014ee:	dc06      	bgt.n	80014fe <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80014f0:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 80014f2:	885b      	ldrh	r3, [r3, #2]
 80014f4:	461a      	mov	r2, r3
 80014f6:	787b      	ldrb	r3, [r7, #1]
 80014f8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014fa:	2b40      	cmp	r3, #64	@ 0x40
 80014fc:	dd01      	ble.n	8001502 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e067      	b.n	80015d2 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e04e      	b.n	80015a6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3b20      	subs	r3, #32
 800150e:	7879      	ldrb	r1, [r7, #1]
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4619      	mov	r1, r3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	440b      	add	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	e036      	b.n	8001596 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b2d8      	uxtb	r0, r3
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff ff5d 	bl	8001418 <ssd1306_DrawPixel>
 800155e:	e017      	b.n	8001590 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b2d8      	uxtb	r0, r3
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff ff44 	bl	8001418 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	3301      	adds	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	783b      	ldrb	r3, [r7, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4293      	cmp	r3, r2
 800159e:	d3c3      	bcc.n	8001528 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	787b      	ldrb	r3, [r7, #1]
 80015a8:	461a      	mov	r2, r3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d3ab      	bcc.n	8001508 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d005      	beq.n	80015c6 <ssd1306_WriteChar+0x106>
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	3a20      	subs	r2, #32
 80015c0:	440a      	add	r2, r1
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	e000      	b.n	80015c8 <ssd1306_WriteChar+0x108>
 80015c6:	783a      	ldrb	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <ssd1306_WriteChar+0x11c>)
 80015ce:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000448 	.word	0x20000448

080015e0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	4638      	mov	r0, r7
 80015ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80015ee:	e013      	b.n	8001618 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	7818      	ldrb	r0, [r3, #0]
 80015f4:	7e3b      	ldrb	r3, [r7, #24]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	463b      	mov	r3, r7
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	f7ff ff60 	bl	80014c0 <ssd1306_WriteChar>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d002      	beq.n	8001612 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	e008      	b.n	8001624 <ssd1306_WriteString+0x44>
        }
        str++;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e7      	bne.n	80015f0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	781b      	ldrb	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <ssd1306_SetCursor+0x2c>)
 8001642:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <ssd1306_SetCursor+0x2c>)
 800164a:	805a      	strh	r2, [r3, #2]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000448 	.word	0x20000448

0800165c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001666:	2381      	movs	r3, #129	@ 0x81
 8001668:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdf7 	bl	8001260 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fdf3 	bl	8001260 <ssd1306_WriteCommand>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001694:	23af      	movs	r3, #175	@ 0xaf
 8001696:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <ssd1306_SetDisplayOn+0x38>)
 800169a:	2201      	movs	r2, #1
 800169c:	715a      	strb	r2, [r3, #5]
 800169e:	e004      	b.n	80016aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016a0:	23ae      	movs	r3, #174	@ 0xae
 80016a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <ssd1306_SetDisplayOn+0x38>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fdd7 	bl	8001260 <ssd1306_WriteCommand>
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000448 	.word	0x20000448

080016c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <vApplicationGetIdleTaskMemory+0x2c>)
 80016d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <vApplicationGetIdleTaskMemory+0x30>)
 80016d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2280      	movs	r2, #128	@ 0x80
 80016dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000450 	.word	0x20000450
 80016f0:	200004a4 	.word	0x200004a4

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f000 fd8f 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f843 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 f93b 	bl	800197c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001706:	f000 f90f 	bl	8001928 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800170a:	f000 f8a9 	bl	8001860 <MX_I2C1_Init>
  MX_SPI3_Init();
 800170e:	f000 f8d5 	bl	80018bc <MX_SPI3_Init>
  MX_FATFS_Init();
 8001712:	f003 fb89 	bl	8004e28 <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoSecuencia));
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	2001      	movs	r0, #1
 800171c:	f003 fd66 	bl	80051ec <xQueueGenericCreate>
 8001720:	4603      	mov	r3, r0
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <main+0x78>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2304      	movs	r3, #4
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	490f      	ldr	r1, [pc, #60]	@ (8001770 <main+0x7c>)
 8001734:	480f      	ldr	r0, [pc, #60]	@ (8001774 <main+0x80>)
 8001736:	f004 f907 	bl	8005948 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(SavingOnSD, "Tarea 02", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800173a:	2300      	movs	r3, #0
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2301      	movs	r3, #1
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	490c      	ldr	r1, [pc, #48]	@ (8001778 <main+0x84>)
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <main+0x88>)
 800174a:	f004 f8fd 	bl	8005948 <xTaskCreate>
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 800174e:	2300      	movs	r3, #0
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	2300      	movs	r3, #0
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	4909      	ldr	r1, [pc, #36]	@ (8001780 <main+0x8c>)
 800175c:	4809      	ldr	r0, [pc, #36]	@ (8001784 <main+0x90>)
 800175e:	f004 f8f3 	bl	8005948 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001762:	f004 fa5f 	bl	8005c24 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001766:	bf00      	nop
 8001768:	e7fd      	b.n	8001766 <main+0x72>
 800176a:	bf00      	nop
 800176c:	20000798 	.word	0x20000798
 8001770:	08006f64 	.word	0x08006f64
 8001774:	080020d1 	.word	0x080020d1
 8001778:	08006f70 	.word	0x08006f70
 800177c:	08001ee9 	.word	0x08001ee9
 8001780:	08006f7c 	.word	0x08006f7c
 8001784:	080021bd 	.word	0x080021bd

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f005 fb6c 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <SystemClock_Config+0xd0>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <SystemClock_Config+0xd0>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <SystemClock_Config+0xd0>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <SystemClock_Config+0xd4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <SystemClock_Config+0xd4>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <SystemClock_Config+0xd4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017fc:	2310      	movs	r3, #16
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001806:	2304      	movs	r3, #4
 8001808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800180a:	2307      	movs	r3, #7
 800180c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fcae 	bl	8003174 <HAL_RCC_OscConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800181e:	f000 f96e 	bl	8001afe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001822:	230f      	movs	r3, #15
 8001824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001826:	2302      	movs	r3, #2
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2102      	movs	r1, #2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 ff10 	bl	8003664 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800184a:	f000 f958 	bl	8001afe <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	@ 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <MX_I2C1_Init+0x54>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800186c:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <MX_I2C1_Init+0x58>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800187e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800189e:	f000 ffbb 	bl	8002818 <HAL_I2C_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 f929 	bl	8001afe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200006a4 	.word	0x200006a4
 80018b4:	40005400 	.word	0x40005400
 80018b8:	00061a80 	.word	0x00061a80

080018bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018c2:	4a18      	ldr	r2, [pc, #96]	@ (8001924 <MX_SPI3_Init+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018f0:	2210      	movs	r2, #16
 80018f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_SPI3_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <MX_SPI3_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <MX_SPI3_Init+0x64>)
 8001908:	220a      	movs	r2, #10
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <MX_SPI3_Init+0x64>)
 800190e:	f002 f8fb 	bl	8003b08 <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001918:	f000 f8f1 	bl	8001afe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200006f8 	.word	0x200006f8
 8001924:	40003c00 	.word	0x40003c00

08001928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_USART2_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001960:	f002 ff9e 	bl	80048a0 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f000 f8c8 	bl	8001afe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000750 	.word	0x20000750
 8001978:	40004400 	.word	0x40004400

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a46      	ldr	r2, [pc, #280]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b44      	ldr	r3, [pc, #272]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a38      	ldr	r2, [pc, #224]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b32      	ldr	r3, [pc, #200]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a31      	ldr	r2, [pc, #196]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad0 <MX_GPIO_Init+0x154>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2120      	movs	r1, #32
 8001a22:	482c      	ldr	r0, [pc, #176]	@ (8001ad4 <MX_GPIO_Init+0x158>)
 8001a24:	f000 fede 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001a2e:	482a      	ldr	r0, [pc, #168]	@ (8001ad8 <MX_GPIO_Init+0x15c>)
 8001a30:	f000 fed8 	bl	80027e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2104      	movs	r1, #4
 8001a38:	4828      	ldr	r0, [pc, #160]	@ (8001adc <MX_GPIO_Init+0x160>)
 8001a3a:	f000 fed3 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <MX_GPIO_Init+0x15c>)
 8001a56:	f000 fd29 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481a      	ldr	r0, [pc, #104]	@ (8001ad8 <MX_GPIO_Init+0x15c>)
 8001a6e:	f000 fd1d 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a72:	2320      	movs	r3, #32
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4812      	ldr	r0, [pc, #72]	@ (8001ad4 <MX_GPIO_Init+0x158>)
 8001a8a:	f000 fd0f 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001a8e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001a92:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <MX_GPIO_Init+0x15c>)
 8001aa8:	f000 fd00 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001aac:	2304      	movs	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <MX_GPIO_Init+0x160>)
 8001ac4:	f000 fcf2 	bl	80024ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	@ 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00

08001ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001af2:	f000 fbb5 	bl	8002260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b02:	b672      	cpsid	i
}
 8001b04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_MspInit+0x54>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	f06f 0001 	mvn.w	r0, #1
 8001b52:	f000 fc81 	bl	8002458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_I2C_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12b      	bne.n	8001bde <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23c0      	movs	r3, #192	@ 0xc0
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <HAL_I2C_MspInit+0x8c>)
 8001bbe:	f000 fc75 	bl	80024ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	4a08      	ldr	r2, [pc, #32]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	@ 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40005400 	.word	0x40005400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_SPI_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12c      	bne.n	8001c70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c60:	2306      	movs	r3, #6
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c6c:	f000 fc1e 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40003c00 	.word	0x40003c00
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020800 	.word	0x40020800

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_UART_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cde:	230c      	movs	r3, #12
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_UART_MspInit+0x8c>)
 8001cfa:	f000 fbd7 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_InitTick+0xe8>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	4a33      	ldr	r2, [pc, #204]	@ (8001dfc <HAL_InitTick+0xe8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d34:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <HAL_InitTick+0xe8>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 feaa 	bl	8003aa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d5a:	f001 fe7b 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d60:	e004      	b.n	8001d6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d62:	f001 fe77 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8001d66:	4603      	mov	r3, r0
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	4a24      	ldr	r2, [pc, #144]	@ (8001e00 <HAL_InitTick+0xec>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	3b01      	subs	r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d7a:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d88:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001da2:	4818      	ldr	r0, [pc, #96]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001da4:	f002 fb08 	bl	80043b8 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d11b      	bne.n	8001dee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001db6:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <HAL_InitTick+0xf0>)
 8001db8:	f002 fb58 	bl	800446c <HAL_TIM_Base_Start_IT>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d111      	bne.n	8001dee <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f000 fb60 	bl	8002490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	d808      	bhi.n	8001de8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	201c      	movs	r0, #28
 8001ddc:	f000 fb3c 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de0:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_InitTick+0xf4>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e002      	b.n	8001dee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3738      	adds	r7, #56	@ 0x38
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	2000079c 	.word	0x2000079c
 8001e08:	20000008 	.word	0x20000008

08001e0c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <SDTimer_Handler+0x40>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <SDTimer_Handler+0x40>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <SDTimer_Handler+0x40>)
 8001e26:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <SDTimer_Handler+0x44>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <SDTimer_Handler+0x34>
    Timer2--;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <SDTimer_Handler+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SDTimer_Handler+0x44>)
 8001e3e:	701a      	strb	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200007e5 	.word	0x200007e5
 8001e50:	200007e6 	.word	0x200007e6

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <NMI_Handler+0x4>

08001e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <TIM2_IRQHandler+0x30>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <TIM2_IRQHandler+0x30>)
 8001e9c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <TIM2_IRQHandler+0x30>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d904      	bls.n	8001eb2 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <TIM2_IRQHandler+0x30>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001eae:	f7ff ffad 	bl	8001e0c <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <TIM2_IRQHandler+0x34>)
 8001eb4:	f002 fb3c 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200007e4 	.word	0x200007e4
 8001ec0:	2000079c 	.word	0x2000079c

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <KeypadScanning>:

void VoiceProcessing(void *pvParameters){

}

void KeypadScanning (void *pvParameters){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoEnviado;
	uint8_t keyPressed;
	FSM *FSM1 = &StateMachine;
 8001ef0:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <KeypadScanning+0x1e0>)
 8001ef2:	60fb      	str	r3, [r7, #12]
	FSM1->CurrentState = ESPERA_DIGITO_1;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	71da      	strb	r2, [r3, #7]
	/*Inicio el funcionamiento con la pantalla inicial*/
	eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	72bb      	strb	r3, [r7, #10]
	xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 8001efe:	4b73      	ldr	r3, [pc, #460]	@ (80020cc <KeypadScanning+0x1e4>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f107 010a 	add.w	r1, r7, #10
 8001f06:	2300      	movs	r3, #0
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	f003 f9c8 	bl	80052a0 <xQueueGenericSend>
	while(1){
		switch(FSM1->CurrentState){
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	79db      	ldrb	r3, [r3, #7]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	f200 80ba 	bhi.w	800208e <KeypadScanning+0x1a6>
 8001f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <KeypadScanning+0x38>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f45 	.word	0x08001f45
 8001f24:	08001f9d 	.word	0x08001f9d
 8001f28:	08001fa9 	.word	0x08001fa9
 8001f2c:	08001fb5 	.word	0x08001fb5
 8001f30:	08001fc1 	.word	0x08001fc1
 8001f34:	08001fcd 	.word	0x08001fcd
 8001f38:	08001fd9 	.word	0x08001fd9
 8001f3c:	08002063 	.word	0x08002063
 8001f40:	08002079 	.word	0x08002079
		case ESPERA_DIGITO_1:
			/*Parseo la primer tecla*/
			keyPressed = GetKey();
 8001f44:	f7fe fff6 	bl	8000f34 <GetKey>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	72fb      	strb	r3, [r7, #11]
			if(keyPressed != 0){
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d021      	beq.n	8001f96 <KeypadScanning+0xae>
            	if((keyPressed != BORRAR_DIGITO) && (keyPressed != ENTER)){
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	2b23      	cmp	r3, #35	@ 0x23
 8001f56:	f000 80a5 	beq.w	80020a4 <KeypadScanning+0x1bc>
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f5e:	f000 80a1 	beq.w	80020a4 <KeypadScanning+0x1bc>
					FSM1->CurrentIndex = 0;												//Reinicializo indice del buffer
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	719a      	strb	r2, [r3, #6]
					FSM1->Buffer[FSM1->CurrentIndex] = keyPressed;						//Guardo el primer digito
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	799b      	ldrb	r3, [r3, #6]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	7afa      	ldrb	r2, [r7, #11]
 8001f72:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	799b      	ldrb	r3, [r3, #6]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();								//Guardo tiempo de inicio para el timeout
 8001f80:	f003 ff5e 	bl	8005e40 <xTaskGetTickCount>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState = ESPERA_DIGITO_2;								//Config estado para parsear la sig tecla
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;							//Defino indicaciones para el display
 8001f90:	2302      	movs	r3, #2
 8001f92:	72bb      	strb	r3, [r7, #10]
            	}
			}
			else{
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
			}
			break;
 8001f94:	e086      	b.n	80020a4 <KeypadScanning+0x1bc>
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	72bb      	strb	r3, [r7, #10]
			break;
 8001f9a:	e083      	b.n	80020a4 <KeypadScanning+0x1bc>
		case ESPERA_DIGITO_2:
			eventoEnviado = HandleInput(FSM1);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7fe ff67 	bl	8000e70 <HandleInput>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	72bb      	strb	r3, [r7, #10]
			break;
 8001fa6:	e080      	b.n	80020aa <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_3:
			eventoEnviado = HandleInput(FSM1);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7fe ff61 	bl	8000e70 <HandleInput>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	72bb      	strb	r3, [r7, #10]
			break;
 8001fb2:	e07a      	b.n	80020aa <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_4:
			eventoEnviado = HandleInput(FSM1);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7fe ff5b 	bl	8000e70 <HandleInput>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	72bb      	strb	r3, [r7, #10]
			break;
 8001fbe:	e074      	b.n	80020aa <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_5:
			eventoEnviado = HandleInput(FSM1);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7fe ff55 	bl	8000e70 <HandleInput>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	72bb      	strb	r3, [r7, #10]
			break;
 8001fca:	e06e      	b.n	80020aa <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_6:
			eventoEnviado = HandleInput(FSM1);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7fe ff4f 	bl	8000e70 <HandleInput>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	72bb      	strb	r3, [r7, #10]
			break;
 8001fd6:	e068      	b.n	80020aa <KeypadScanning+0x1c2>
		case ESPERA_ENTER:
			if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8001fd8:	f003 ff32 	bl	8005e40 <xTaskGetTickCount>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d834      	bhi.n	8002056 <KeypadScanning+0x16e>
				keyPressed = GetKey();
 8001fec:	f7fe ffa2 	bl	8000f34 <GetKey>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	72fb      	strb	r3, [r7, #11]
				if(keyPressed != 0){
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02a      	beq.n	8002050 <KeypadScanning+0x168>
					if(keyPressed == BORRAR_DIGITO){
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	2b23      	cmp	r3, #35	@ 0x23
 8001ffe:	d119      	bne.n	8002034 <KeypadScanning+0x14c>
						FSM1->CurrentIndex--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	799b      	ldrb	r3, [r3, #6]
 8002004:	3b01      	subs	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	719a      	strb	r2, [r3, #6]
						FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	799b      	ldrb	r3, [r3, #6]
 8002010:	461a      	mov	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2100      	movs	r1, #0
 8002016:	5499      	strb	r1, [r3, r2]
						FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8002018:	f003 ff12 	bl	8005e40 <xTaskGetTickCount>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
						FSM1->CurrentState--;									//Vuelvo al estado anterior
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	79db      	ldrb	r3, [r3, #7]
 8002026:	3b01      	subs	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	71da      	strb	r2, [r3, #7]
						eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 800202e:	2303      	movs	r3, #3
 8002030:	72bb      	strb	r3, [r7, #10]
			else{
				FSM1->CurrentState = TIMEOUT;
				eventoEnviado = PANTALLA_TIMEOUT;

			}
			break;
 8002032:	e039      	b.n	80020a8 <KeypadScanning+0x1c0>
						if(keyPressed == ENTER){
 8002034:	7afb      	ldrb	r3, [r7, #11]
 8002036:	2b2a      	cmp	r3, #42	@ 0x2a
 8002038:	d136      	bne.n	80020a8 <KeypadScanning+0x1c0>
							eventoEnviado = PANTALLA_ACCESO_CONCEDIDO;
 800203a:	2304      	movs	r3, #4
 800203c:	72bb      	strb	r3, [r7, #10]
							ClearBuffer(FSM1->Buffer, 6);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2106      	movs	r1, #6
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f808 	bl	8001058 <ClearBuffer>
							FSM1->CurrentState = ESPERA_DIGITO_1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	71da      	strb	r2, [r3, #7]
			break;
 800204e:	e02b      	b.n	80020a8 <KeypadScanning+0x1c0>
					eventoEnviado = PANTALLA_IDLE;								//No actualizar la pantalla
 8002050:	2300      	movs	r3, #0
 8002052:	72bb      	strb	r3, [r7, #10]
			break;
 8002054:	e028      	b.n	80020a8 <KeypadScanning+0x1c0>
				FSM1->CurrentState = TIMEOUT;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2207      	movs	r2, #7
 800205a:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_TIMEOUT;
 800205c:	2306      	movs	r3, #6
 800205e:	72bb      	strb	r3, [r7, #10]
			break;
 8002060:	e022      	b.n	80020a8 <KeypadScanning+0x1c0>
		case TIMEOUT:
			ClearBuffer(FSM1->Buffer, 6);								//Limpio buffer y vuelvo a estado inicial
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2106      	movs	r1, #6
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fff6 	bl	8001058 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002072:	2300      	movs	r3, #0
 8002074:	72bb      	strb	r3, [r7, #10]
			break;
 8002076:	e018      	b.n	80020aa <KeypadScanning+0x1c2>
		case INCOMPLETO:
			ClearBuffer(FSM1->Buffer, 6);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2106      	movs	r1, #6
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffeb 	bl	8001058 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002088:	2300      	movs	r3, #0
 800208a:	72bb      	strb	r3, [r7, #10]
			break;
 800208c:	e00d      	b.n	80020aa <KeypadScanning+0x1c2>
		default:
			ClearBuffer(FSM1->Buffer, 6);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2106      	movs	r1, #6
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe ffe0 	bl	8001058 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	72bb      	strb	r3, [r7, #10]
			break;
 80020a2:	e002      	b.n	80020aa <KeypadScanning+0x1c2>
			break;
 80020a4:	bf00      	nop
 80020a6:	e000      	b.n	80020aa <KeypadScanning+0x1c2>
			break;
 80020a8:	bf00      	nop
		}
		/*Si el evento es PANTALLA_IDLE no se envian indicaciones al display*/
		/*En ese caso se deja la pantalla previa*/
		if(eventoEnviado != PANTALLA_IDLE) xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f43f af2f 	beq.w	8001f10 <KeypadScanning+0x28>
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <KeypadScanning+0x1e4>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	f107 010a 	add.w	r1, r7, #10
 80020ba:	2300      	movs	r3, #0
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	f003 f8ee 	bl	80052a0 <xQueueGenericSend>
		switch(FSM1->CurrentState){
 80020c4:	e724      	b.n	8001f10 <KeypadScanning+0x28>
 80020c6:	bf00      	nop
 80020c8:	200007e8 	.word	0x200007e8
 80020cc:	20000798 	.word	0x20000798

080020d0 <ScreenManager>:
	}
}

void ScreenManager  (void *pvParameters){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
	eventoSecuencia eventoRecibido = PANTALLA_INGRESE_CLAVE;
 80020d8:	2301      	movs	r3, #1
 80020da:	737b      	strb	r3, [r7, #13]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80020dc:	230a      	movs	r3, #10
 80020de:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 26;
 80020e0:	231a      	movs	r3, #26
 80020e2:	73bb      	strb	r3, [r7, #14]
	displayInit();
 80020e4:	f7fe ffd3 	bl	800108e <displayInit>
	while(1){
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 80020e8:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <ScreenManager+0xdc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f107 010d 	add.w	r1, r7, #13
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f9d5 	bl	80054a4 <xQueueReceive>
		switch(eventoRecibido){
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d853      	bhi.n	80021a8 <ScreenManager+0xd8>
 8002100:	a201      	add	r2, pc, #4	@ (adr r2, 8002108 <ScreenManager+0x38>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	080021a9 	.word	0x080021a9
 800210c:	08002129 	.word	0x08002129
 8002110:	08002133 	.word	0x08002133
 8002114:	08002159 	.word	0x08002159
 8002118:	0800219b 	.word	0x0800219b
 800211c:	080021a9 	.word	0x080021a9
 8002120:	0800217f 	.word	0x0800217f
 8002124:	0800218d 	.word	0x0800218d
		case PANTALLA_INGRESE_CLAVE:
			x = 10;
 8002128:	230a      	movs	r3, #10
 800212a:	73fb      	strb	r3, [r7, #15]
			displayInsertKeyMsg();
 800212c:	f7fe ffb6 	bl	800109c <displayInsertKeyMsg>
			break;
 8002130:	e03b      	b.n	80021aa <ScreenManager+0xda>
		case PANTALLA_AÑADIR_ENTRADA:
			ssd1306_SetCursor(x, y);
 8002132:	7bba      	ldrb	r2, [r7, #14]
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fa77 	bl	800162c <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <ScreenManager+0xe0>)
 8002140:	2201      	movs	r2, #1
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002146:	481b      	ldr	r0, [pc, #108]	@ (80021b4 <ScreenManager+0xe4>)
 8002148:	f7ff fa4a 	bl	80015e0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800214c:	f7ff f93c 	bl	80013c8 <ssd1306_UpdateScreen>
			x += 16;													//Avanzo una posición en pantalla acorde al font seleccionado
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3310      	adds	r3, #16
 8002154:	73fb      	strb	r3, [r7, #15]
			break;
 8002156:	e028      	b.n	80021aa <ScreenManager+0xda>
		case PANTALLA_BORRAR_ENTRADA:
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3b10      	subs	r3, #16
 800215c:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(x, y);
 800215e:	7bba      	ldrb	r2, [r7, #14]
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa61 	bl	800162c <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <ScreenManager+0xe0>)
 800216c:	2201      	movs	r2, #1
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002172:	4811      	ldr	r0, [pc, #68]	@ (80021b8 <ScreenManager+0xe8>)
 8002174:	f7ff fa34 	bl	80015e0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002178:	f7ff f926 	bl	80013c8 <ssd1306_UpdateScreen>
			break;
 800217c:	e015      	b.n	80021aa <ScreenManager+0xda>
		case PANTALLA_TIMEOUT:
			displayTimeoutMsg();
 800217e:	f7fe ffc7 	bl	8001110 <displayTimeoutMsg>
			HAL_Delay(3000);											//Timer bloqueante para evitar el ingreso de otra secuencia
 8002182:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002186:	f000 f88b 	bl	80022a0 <HAL_Delay>
			break;														//mientras se muestra el mensaje.
 800218a:	e00e      	b.n	80021aa <ScreenManager+0xda>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			displayIncompleteMsg();
 800218c:	f7fe ffe2 	bl	8001154 <displayIncompleteMsg>
			HAL_Delay(3000);
 8002190:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002194:	f000 f884 	bl	80022a0 <HAL_Delay>
			break;
 8002198:	e007      	b.n	80021aa <ScreenManager+0xda>
		case PANTALLA_ACCESO_CONCEDIDO:
			displayAccessState();
 800219a:	f7ff f825 	bl	80011e8 <displayAccessState>
			HAL_Delay(3000);
 800219e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021a2:	f000 f87d 	bl	80022a0 <HAL_Delay>
			break;
 80021a6:	e000      	b.n	80021aa <ScreenManager+0xda>
			break;
		case PANTALLA_IDLE:
			/*No hacer nada*/
			break;
		default:
			break;
 80021a8:	bf00      	nop
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 80021aa:	e79d      	b.n	80020e8 <ScreenManager+0x18>
 80021ac:	20000798 	.word	0x20000798
 80021b0:	0800904c 	.word	0x0800904c
 80021b4:	08006f88 	.word	0x08006f88
 80021b8:	08006f8c 	.word	0x08006f8c

080021bc <IdleTask>:
}

void sdHandler(void *pvParameters){

}
void IdleTask(void *pvParameters){
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	while(1){
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <IdleTask+0x8>

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021cc:	f7ff fe7a 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f004 fe45 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7ff fa7b 	bl	80016f4 <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002200:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800220c:	08009080 	.word	0x08009080
  ldr r2, =_sbss
 8002210:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002214:	20004560 	.word	0x20004560

08002218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	@ (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f8fc 	bl	8002442 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	200f      	movs	r0, #15
 800224c:	f7ff fd62 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff fc5c 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c
 8002284:	200007f4 	.word	0x200007f4

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200007f4 	.word	0x200007f4

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	@ (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	@ (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4c 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246a:	f7ff ff61 	bl	8002330 <__NVIC_GetPriorityGrouping>
 800246e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	f7ff ffb1 	bl	80023dc <NVIC_EncodePriority>
 800247a:	4602      	mov	r2, r0
 800247c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff80 	bl	8002388 <__NVIC_SetPriority>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff54 	bl	800234c <__NVIC_EnableIRQ>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e159      	b.n	800277c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8148 	bne.w	8002776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d005      	beq.n	80024fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d130      	bne.n	8002560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0201 	and.w	r2, r3, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b03      	cmp	r3, #3
 800256a:	d017      	beq.n	800259c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a2 	beq.w	8002776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <HAL_GPIO_Init+0x2e8>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a56      	ldr	r2, [pc, #344]	@ (8002794 <HAL_GPIO_Init+0x2e8>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <HAL_GPIO_Init+0x2e8>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_GPIO_Init+0x2ec>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a49      	ldr	r2, [pc, #292]	@ (800279c <HAL_GPIO_Init+0x2f0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x202>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a48      	ldr	r2, [pc, #288]	@ (80027a0 <HAL_GPIO_Init+0x2f4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x1fe>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a47      	ldr	r2, [pc, #284]	@ (80027a4 <HAL_GPIO_Init+0x2f8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x1fa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a46      	ldr	r2, [pc, #280]	@ (80027a8 <HAL_GPIO_Init+0x2fc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x1f6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a45      	ldr	r2, [pc, #276]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x1f2>
 800269a:	2304      	movs	r3, #4
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 800269e:	2307      	movs	r3, #7
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c0:	4935      	ldr	r1, [pc, #212]	@ (8002798 <HAL_GPIO_Init+0x2ec>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b38      	ldr	r3, [pc, #224]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a2f      	ldr	r2, [pc, #188]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a24      	ldr	r2, [pc, #144]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002746:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274c:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002770:	4a0f      	ldr	r2, [pc, #60]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f aea2 	bls.w	80024c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e12b      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff f990 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800286a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800287a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800287c:	f001 f8ea 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a81      	ldr	r2, [pc, #516]	@ (8002a8c <HAL_I2C_Init+0x274>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d807      	bhi.n	800289c <HAL_I2C_Init+0x84>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a80      	ldr	r2, [pc, #512]	@ (8002a90 <HAL_I2C_Init+0x278>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e006      	b.n	80028aa <HAL_I2C_Init+0x92>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a94 <HAL_I2C_Init+0x27c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0e7      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a78      	ldr	r2, [pc, #480]	@ (8002a98 <HAL_I2C_Init+0x280>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9b      	lsrs	r3, r3, #18
 80028bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a8c <HAL_I2C_Init+0x274>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d802      	bhi.n	80028ec <HAL_I2C_Init+0xd4>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	e009      	b.n	8002900 <HAL_I2C_Init+0xe8>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	4a69      	ldr	r2, [pc, #420]	@ (8002a9c <HAL_I2C_Init+0x284>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	3301      	adds	r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002912:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	495c      	ldr	r1, [pc, #368]	@ (8002a8c <HAL_I2C_Init+0x274>)
 800291c:	428b      	cmp	r3, r1
 800291e:	d819      	bhi.n	8002954 <HAL_I2C_Init+0x13c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e59      	subs	r1, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb1 f3f3 	udiv	r3, r1, r3
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002934:	400b      	ands	r3, r1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_I2C_Init+0x138>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e59      	subs	r1, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fbb1 f3f3 	udiv	r3, r1, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	e051      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002950:	2304      	movs	r3, #4
 8002952:	e04f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <HAL_I2C_Init+0x168>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e012      	b.n	80029a6 <HAL_I2C_Init+0x18e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x196>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e022      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10e      	bne.n	80029d4 <HAL_I2C_Init+0x1bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e58      	subs	r0, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	440b      	add	r3, r1
 80029c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	6809      	ldr	r1, [r1, #0]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6911      	ldr	r1, [r2, #16]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68d2      	ldr	r2, [r2, #12]
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	000186a0 	.word	0x000186a0
 8002a90:	001e847f 	.word	0x001e847f
 8002a94:	003d08ff 	.word	0x003d08ff
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	10624dd3 	.word	0x10624dd3

08002aa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	813b      	strh	r3, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aba:	f7ff fbe5 	bl	8002288 <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	f040 80d9 	bne.w	8002c80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2319      	movs	r3, #25
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	496d      	ldr	r1, [pc, #436]	@ (8002c8c <HAL_I2C_Mem_Write+0x1ec>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f971 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0cc      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Mem_Write+0x56>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0c5      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d007      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2221      	movs	r2, #33	@ 0x21
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c90 <HAL_I2C_Mem_Write+0x1f0>)
 8002b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b5e:	88f8      	ldrh	r0, [r7, #6]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f890 	bl	8002c94 <I2C_RequestMemoryWrite>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d052      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e081      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fa36 	bl	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06b      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11b      	bne.n	8002c20 <HAL_I2C_Mem_Write+0x180>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1aa      	bne.n	8002b7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa29 	bl	8003084 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d107      	bne.n	8002c50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e016      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	00100002 	.word	0x00100002
 8002c90:	ffff0000 	.word	0xffff0000

08002c94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	813b      	strh	r3, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f878 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce4:	d103      	bne.n	8002cee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e05f      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	492d      	ldr	r1, [pc, #180]	@ (8002dbc <I2C_RequestMemoryWrite+0x128>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f8d3 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e04c      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f95e 	bl	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e02b      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e021      	b.n	8002db0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6c:	893b      	ldrh	r3, [r7, #8]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f938 	bl	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e005      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00010002 	.word	0x00010002

08002dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd0:	e048      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d044      	beq.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7ff fa55 	bl	8002288 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d139      	bne.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	0c1b      	lsrs	r3, r3, #16
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10d      	bne.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	43da      	mvns	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4013      	ands	r3, r2
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	e00c      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e023      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10d      	bne.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	e00c      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d093      	beq.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec2:	e071      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed2:	d123      	bne.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e067      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d041      	beq.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f24:	f7ff f9b0 	bl	8002288 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d302      	bcc.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d136      	bne.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10c      	bne.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	e00b      	b.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e021      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10c      	bne.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e00b      	b.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f af6d 	bne.w	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003000:	e034      	b.n	800306c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f886 	bl	8003114 <I2C_IsAcknowledgeFailed>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e034      	b.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d028      	beq.n	800306c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7ff f935 	bl	8002288 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11d      	bne.n	800306c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d016      	beq.n	800306c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003076:	2b80      	cmp	r3, #128	@ 0x80
 8003078:	d1c3      	bne.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003090:	e034      	b.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f83e 	bl	8003114 <I2C_IsAcknowledgeFailed>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e034      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d028      	beq.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7ff f8ed 	bl	8002288 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11d      	bne.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d016      	beq.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d1c3      	bne.n	8003092 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312a:	d11b      	bne.n	8003164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e267      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d075      	beq.n	800327e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003192:	4b88      	ldr	r3, [pc, #544]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d00c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b85      	ldr	r3, [pc, #532]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b82      	ldr	r3, [pc, #520]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	4b7e      	ldr	r3, [pc, #504]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05b      	beq.n	800327c <HAL_RCC_OscConfig+0x108>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d157      	bne.n	800327c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e242      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_OscConfig+0x74>
 80031da:	4b76      	ldr	r3, [pc, #472]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a75      	ldr	r2, [pc, #468]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e01d      	b.n	8003224 <HAL_RCC_OscConfig+0xb0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x98>
 80031f2:	4b70      	ldr	r3, [pc, #448]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6f      	ldr	r2, [pc, #444]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b6d      	ldr	r3, [pc, #436]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6c      	ldr	r2, [pc, #432]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0xb0>
 800320c:	4b69      	ldr	r3, [pc, #420]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a68      	ldr	r2, [pc, #416]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a65      	ldr	r2, [pc, #404]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7ff f82c 	bl	8002288 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003234:	f7ff f828 	bl	8002288 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e207      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b5b      	ldr	r3, [pc, #364]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xc0>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7ff f818 	bl	8002288 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7ff f814 	bl	8002288 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1f3      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	4b51      	ldr	r3, [pc, #324]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0xe8>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d063      	beq.n	8003352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328a:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b47      	ldr	r3, [pc, #284]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b44      	ldr	r3, [pc, #272]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x152>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1c7      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4937      	ldr	r1, [pc, #220]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e03a      	b.n	8003352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <HAL_RCC_OscConfig+0x244>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe ffcd 	bl	8002288 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe ffc9 	bl	8002288 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1a8      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4925      	ldr	r1, [pc, #148]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b24      	ldr	r3, [pc, #144]	@ (80033b8 <HAL_RCC_OscConfig+0x244>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe ffac 	bl	8002288 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe ffa8 	bl	8002288 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e187      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <HAL_RCC_OscConfig+0x248>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe ff8c 	bl	8002288 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe ff88 	bl	8002288 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e167      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x200>
 8003392:	e01b      	b.n	80033cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_OscConfig+0x248>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe ff75 	bl	8002288 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	e00e      	b.n	80033c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe ff71 	bl	8002288 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d907      	bls.n	80033c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e150      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470000 	.word	0x42470000
 80033bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b88      	ldr	r3, [pc, #544]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ea      	bne.n	80033a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8097 	beq.w	8003508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b81      	ldr	r3, [pc, #516]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b7d      	ldr	r3, [pc, #500]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	4a7c      	ldr	r2, [pc, #496]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fa:	4b7a      	ldr	r3, [pc, #488]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b77      	ldr	r3, [pc, #476]	@ (80035e8 <HAL_RCC_OscConfig+0x474>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b74      	ldr	r3, [pc, #464]	@ (80035e8 <HAL_RCC_OscConfig+0x474>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a73      	ldr	r2, [pc, #460]	@ (80035e8 <HAL_RCC_OscConfig+0x474>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe ff31 	bl	8002288 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe ff2d 	bl	8002288 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e10c      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <HAL_RCC_OscConfig+0x474>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x2ea>
 8003450:	4b64      	ldr	r3, [pc, #400]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a63      	ldr	r2, [pc, #396]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x324>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x30c>
 8003466:	4b5f      	ldr	r3, [pc, #380]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	4a5e      	ldr	r2, [pc, #376]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	@ 0x70
 8003472:	4b5c      	ldr	r3, [pc, #368]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a5b      	ldr	r2, [pc, #364]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0x324>
 8003480:	4b58      	ldr	r3, [pc, #352]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a57      	ldr	r2, [pc, #348]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
 800348c:	4b55      	ldr	r3, [pc, #340]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a54      	ldr	r2, [pc, #336]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fef2 	bl	8002288 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe feee 	bl	8002288 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0cb      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	4b49      	ldr	r3, [pc, #292]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <HAL_RCC_OscConfig+0x334>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe fedc 	bl	8002288 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fed8 	bl	8002288 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0b5      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4b3e      	ldr	r3, [pc, #248]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ee      	bne.n	80034d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b39      	ldr	r3, [pc, #228]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	4a38      	ldr	r2, [pc, #224]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a1 	beq.w	8003654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d05c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d141      	bne.n	80035aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <HAL_RCC_OscConfig+0x478>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe feac 	bl	8002288 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fea8 	bl	8002288 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e087      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b27      	ldr	r3, [pc, #156]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	491b      	ldr	r1, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <HAL_RCC_OscConfig+0x478>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fe81 	bl	8002288 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fe7d 	bl	8002288 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e05c      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x416>
 80035a8:	e054      	b.n	8003654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <HAL_RCC_OscConfig+0x478>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fe6a 	bl	8002288 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fe66 	bl	8002288 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e045      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_RCC_OscConfig+0x470>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x444>
 80035d6:	e03d      	b.n	8003654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e038      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_RCC_OscConfig+0x4ec>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d028      	beq.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d121      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d11a      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	3b01      	subs	r3, #1
 800363a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800

08003664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0cc      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b68      	ldr	r3, [pc, #416]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d90c      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b65      	ldr	r3, [pc, #404]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b63      	ldr	r3, [pc, #396]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b8      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d020      	beq.n	80036ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b8:	4b59      	ldr	r3, [pc, #356]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d0:	4b53      	ldr	r3, [pc, #332]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a52      	ldr	r2, [pc, #328]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	494d      	ldr	r1, [pc, #308]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d044      	beq.n	8003784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d119      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e07f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d003      	beq.n	8003722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371e:	2b03      	cmp	r3, #3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e067      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b37      	ldr	r3, [pc, #220]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4934      	ldr	r1, [pc, #208]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003754:	f7fe fd98 	bl	8002288 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fe fd94 	bl	8002288 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e04f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b25      	ldr	r3, [pc, #148]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d20c      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b22      	ldr	r3, [pc, #136]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b20      	ldr	r3, [pc, #128]	@ (800381c <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e032      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b8:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4916      	ldr	r1, [pc, #88]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d6:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	490e      	ldr	r1, [pc, #56]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ea:	f000 f821 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	490a      	ldr	r1, [pc, #40]	@ (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	5ccb      	ldrb	r3, [r1, r3]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a09      	ldr	r2, [pc, #36]	@ (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fa82 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00
 8003820:	40023800 	.word	0x40023800
 8003824:	08009058 	.word	0x08009058
 8003828:	20000004 	.word	0x20000004
 800382c:	20000008 	.word	0x20000008

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003834:	b094      	sub	sp, #80	@ 0x50
 8003836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	647b      	str	r3, [r7, #68]	@ 0x44
 800383c:	2300      	movs	r3, #0
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	2300      	movs	r3, #0
 8003842:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003848:	4b79      	ldr	r3, [pc, #484]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d00d      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x40>
 8003854:	2b08      	cmp	r3, #8
 8003856:	f200 80e1 	bhi.w	8003a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x34>
 800385e:	2b04      	cmp	r3, #4
 8003860:	d003      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x3a>
 8003862:	e0db      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b73      	ldr	r3, [pc, #460]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003866:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003868:	e0db      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386a:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800386e:	e0d8      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003870:	4b6f      	ldr	r3, [pc, #444]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d063      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	2200      	movs	r2, #0
 800388e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
 800389e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	f04f 0000 	mov.w	r0, #0
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b4:	0150      	lsls	r0, r2, #5
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4621      	mov	r1, r4
 80038bc:	1a51      	subs	r1, r2, r1
 80038be:	6139      	str	r1, [r7, #16]
 80038c0:	4629      	mov	r1, r5
 80038c2:	eb63 0301 	sbc.w	r3, r3, r1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d4:	4659      	mov	r1, fp
 80038d6:	018b      	lsls	r3, r1, #6
 80038d8:	4651      	mov	r1, sl
 80038da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038de:	4651      	mov	r1, sl
 80038e0:	018a      	lsls	r2, r1, #6
 80038e2:	4651      	mov	r1, sl
 80038e4:	ebb2 0801 	subs.w	r8, r2, r1
 80038e8:	4659      	mov	r1, fp
 80038ea:	eb63 0901 	sbc.w	r9, r3, r1
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003902:	4690      	mov	r8, r2
 8003904:	4699      	mov	r9, r3
 8003906:	4623      	mov	r3, r4
 8003908:	eb18 0303 	adds.w	r3, r8, r3
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	462b      	mov	r3, r5
 8003910:	eb49 0303 	adc.w	r3, r9, r3
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003922:	4629      	mov	r1, r5
 8003924:	024b      	lsls	r3, r1, #9
 8003926:	4621      	mov	r1, r4
 8003928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800392c:	4621      	mov	r1, r4
 800392e:	024a      	lsls	r2, r1, #9
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003936:	2200      	movs	r2, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800393c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003940:	f7fc fc4e 	bl	80001e0 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394c:	e058      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394e:	4b38      	ldr	r3, [pc, #224]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	2200      	movs	r2, #0
 8003956:	4618      	mov	r0, r3
 8003958:	4611      	mov	r1, r2
 800395a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0159      	lsls	r1, r3, #5
 8003976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397a:	0150      	lsls	r0, r2, #5
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4641      	mov	r1, r8
 8003982:	ebb2 0a01 	subs.w	sl, r2, r1
 8003986:	4649      	mov	r1, r9
 8003988:	eb63 0b01 	sbc.w	fp, r3, r1
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800399c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a0:	ebb2 040a 	subs.w	r4, r2, sl
 80039a4:	eb63 050b 	sbc.w	r5, r3, fp
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	00eb      	lsls	r3, r5, #3
 80039b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	4614      	mov	r4, r2
 80039ba:	461d      	mov	r5, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	18e3      	adds	r3, r4, r3
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	464b      	mov	r3, r9
 80039c4:	eb45 0303 	adc.w	r3, r5, r3
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039d6:	4629      	mov	r1, r5
 80039d8:	028b      	lsls	r3, r1, #10
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e0:	4621      	mov	r1, r4
 80039e2:	028a      	lsls	r2, r1, #10
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	61fa      	str	r2, [r7, #28]
 80039f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f4:	f7fc fbf4 	bl	80001e0 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3750      	adds	r7, #80	@ 0x50
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a58:	f7ff fff0 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0a9b      	lsrs	r3, r3, #10
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	08009068 	.word	0x08009068

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a80:	f7ff ffdc 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0b5b      	lsrs	r3, r3, #13
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08009068 	.word	0x08009068

08003aa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab4:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0203 	and.w	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ae6:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <HAL_RCC_GetClockConfig+0x60>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0207 	and.w	r2, r3, #7
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07b      	b.n	8003c12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2a:	d009      	beq.n	8003b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe f84a 	bl	8001bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	ea42 0103 	orr.w	r1, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0104 	and.w	r1, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f003 0210 	and.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_SPI_Transmit+0x22>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e12d      	b.n	8003e98 <HAL_SPI_Transmit+0x27e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c44:	f7fe fb20 	bl	8002288 <HAL_GetTick>
 8003c48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c5e:	e116      	b.n	8003e8e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0x52>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c70:	e10d      	b.n	8003e8e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb8:	d10f      	bne.n	8003cda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d007      	beq.n	8003cf8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d00:	d14f      	bne.n	8003da2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Transmit+0xf6>
 8003d0a:	8afb      	ldrh	r3, [r7, #22]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d142      	bne.n	8003d96 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d34:	e02f      	b.n	8003d96 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d112      	bne.n	8003d6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d68:	e015      	b.n	8003d96 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d6a:	f7fe fa8d 	bl	8002288 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d803      	bhi.n	8003d82 <HAL_SPI_Transmit+0x168>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d102      	bne.n	8003d88 <HAL_SPI_Transmit+0x16e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d94:	e07b      	b.n	8003e8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ca      	bne.n	8003d36 <HAL_SPI_Transmit+0x11c>
 8003da0:	e050      	b.n	8003e44 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Transmit+0x196>
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d144      	bne.n	8003e3a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd6:	e030      	b.n	8003e3a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d113      	bne.n	8003e0e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e0c:	e015      	b.n	8003e3a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0e:	f7fe fa3b 	bl	8002288 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d803      	bhi.n	8003e26 <HAL_SPI_Transmit+0x20c>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d102      	bne.n	8003e2c <HAL_SPI_Transmit+0x212>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e38:	e029      	b.n	8003e8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1c9      	bne.n	8003dd8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fa61 	bl	8004310 <SPI_EndRxTxTransaction>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e003      	b.n	8003e8e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	@ 0x30
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x26>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e198      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x358>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ece:	f7fe f9db 	bl	8002288 <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d00f      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x70>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef6:	d107      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x68>
 8003f00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d003      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f0e:	e16d      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x82>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x82>
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f28:	e160      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d007      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9a:	d17c      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x10a>
 8003fa4:	8b7b      	ldrh	r3, [r7, #26]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d16a      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fce:	e057      	b.n	8004080 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d11b      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x176>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x176>
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d113      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d119      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x1b8>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d014      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	b292      	uxth	r2, r2
 800403a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004054:	2301      	movs	r3, #1
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004058:	f7fe f916 	bl	8002288 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004064:	429a      	cmp	r2, r3
 8004066:	d80b      	bhi.n	8004080 <HAL_SPI_TransmitReceive+0x1e0>
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d007      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800407e:	e0b5      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1a2      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x130>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d19d      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x130>
 8004094:	e080      	b.n	8004198 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x204>
 800409e:	8b7b      	ldrh	r3, [r7, #26]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d16f      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	7812      	ldrb	r2, [r2, #0]
 80040b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ca:	e05b      	b.n	8004184 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d11c      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x274>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x274>
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d114      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d119      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x2b6>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d014      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004152:	2301      	movs	r3, #1
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004156:	f7fe f897 	bl	8002288 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004162:	429a      	cmp	r2, r3
 8004164:	d803      	bhi.n	800416e <HAL_SPI_TransmitReceive+0x2ce>
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d102      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x2d4>
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004182:	e033      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d19e      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x22c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d199      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8b7 	bl	8004310 <SPI_EndRxTxTransaction>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80041b4:	e01a      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e003      	b.n	80041ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3730      	adds	r7, #48	@ 0x30
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004210:	f7fe f83a 	bl	8002288 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004220:	f7fe f832 	bl	8002288 <HAL_GetTick>
 8004224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004226:	4b39      	ldr	r3, [pc, #228]	@ (800430c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	0d1b      	lsrs	r3, r3, #20
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004236:	e054      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d050      	beq.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004240:	f7fe f822 	bl	8002288 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d13d      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800426e:	d111      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004278:	d004      	beq.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004282:	d107      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429c:	d10f      	bne.n	80042be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e017      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d19b      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000004 	.word	0x20000004

08004310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2201      	movs	r2, #1
 8004324:	2102      	movs	r1, #2
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ff6a 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e032      	b.n	80043a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004342:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <SPI_EndRxTxTransaction+0xa0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <SPI_EndRxTxTransaction+0xa4>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0d5b      	lsrs	r3, r3, #21
 800434e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004360:	d112      	bne.n	8004388 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff47 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e00f      	b.n	80043a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3b01      	subs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d0f2      	beq.n	8004388 <SPI_EndRxTxTransaction+0x78>
 80043a2:	e000      	b.n	80043a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80043a4:	bf00      	nop
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000004 	.word	0x20000004
 80043b4:	165e9f81 	.word	0x165e9f81

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e041      	b.n	800444e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f839 	bl	8004456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 f9b2 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e044      	b.n	800450e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <HAL_TIM_Base_Start_IT+0xb0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x6c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d013      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x6c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004520 <HAL_TIM_Base_Start_IT+0xb4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <HAL_TIM_Base_Start_IT+0xb8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x6c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_TIM_Base_Start_IT+0xbc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x6c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a16      	ldr	r2, [pc, #88]	@ (800452c <HAL_TIM_Base_Start_IT+0xc0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d111      	bne.n	80044fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d010      	beq.n	800450c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	e007      	b.n	800450c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40014000 	.word	0x40014000

08004530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d020      	beq.n	8004594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0202 	mvn.w	r2, #2
 8004564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8d2 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8c4 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8d5 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d020      	beq.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0204 	mvn.w	r2, #4
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8ac 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f89e 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f8af 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0208 	mvn.w	r2, #8
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f886 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f878 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f889 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0210 	mvn.w	r2, #16
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2208      	movs	r2, #8
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f860 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f852 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f863 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0201 	mvn.w	r2, #1
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd fa22 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8e6 	bl	800488c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f834 	bl	800474c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0220 	mvn.w	r2, #32
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8b8 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3a      	ldr	r2, [pc, #232]	@ (800485c <TIM_Base_SetConfig+0xfc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00f      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477e:	d00b      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a37      	ldr	r2, [pc, #220]	@ (8004860 <TIM_Base_SetConfig+0x100>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a36      	ldr	r2, [pc, #216]	@ (8004864 <TIM_Base_SetConfig+0x104>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a35      	ldr	r2, [pc, #212]	@ (8004868 <TIM_Base_SetConfig+0x108>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	@ (800485c <TIM_Base_SetConfig+0xfc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01b      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b8:	d017      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a28      	ldr	r2, [pc, #160]	@ (8004860 <TIM_Base_SetConfig+0x100>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a27      	ldr	r2, [pc, #156]	@ (8004864 <TIM_Base_SetConfig+0x104>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00f      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a26      	ldr	r2, [pc, #152]	@ (8004868 <TIM_Base_SetConfig+0x108>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a25      	ldr	r2, [pc, #148]	@ (800486c <TIM_Base_SetConfig+0x10c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <TIM_Base_SetConfig+0x110>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <TIM_Base_SetConfig+0x114>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0e      	ldr	r2, [pc, #56]	@ (800485c <TIM_Base_SetConfig+0xfc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d103      	bne.n	8004830 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	611a      	str	r2, [r3, #16]
  }
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd f9dc 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	@ 0x24
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f82b 	bl	8004940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b0c0      	sub	sp, #256	@ 0x100
 8004946:	af00      	add	r7, sp, #0
 8004948:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	ea40 0301 	orr.w	r3, r0, r1
 8004968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	431a      	orrs	r2, r3
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004998:	f021 010c 	bic.w	r1, r1, #12
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049a6:	430b      	orrs	r3, r1
 80049a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	6999      	ldr	r1, [r3, #24]
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	ea40 0301 	orr.w	r3, r0, r1
 80049c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b8f      	ldr	r3, [pc, #572]	@ (8004c0c <UART_SetConfig+0x2cc>)
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d005      	beq.n	80049e0 <UART_SetConfig+0xa0>
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b8d      	ldr	r3, [pc, #564]	@ (8004c10 <UART_SetConfig+0x2d0>)
 80049dc:	429a      	cmp	r2, r3
 80049de:	d104      	bne.n	80049ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7ff f84c 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 80049e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049e8:	e003      	b.n	80049f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ea:	f7ff f833 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 80049ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fc:	f040 810c 	bne.w	8004c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a22:	4621      	mov	r1, r4
 8004a24:	eb12 0801 	adds.w	r8, r2, r1
 8004a28:	4629      	mov	r1, r5
 8004a2a:	eb43 0901 	adc.w	r9, r3, r1
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a42:	4690      	mov	r8, r2
 8004a44:	4699      	mov	r9, r3
 8004a46:	4623      	mov	r3, r4
 8004a48:	eb18 0303 	adds.w	r3, r8, r3
 8004a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a50:	462b      	mov	r3, r5
 8004a52:	eb49 0303 	adc.w	r3, r9, r3
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a6e:	460b      	mov	r3, r1
 8004a70:	18db      	adds	r3, r3, r3
 8004a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a74:	4613      	mov	r3, r2
 8004a76:	eb42 0303 	adc.w	r3, r2, r3
 8004a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a84:	f7fb fbac 	bl	80001e0 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4b61      	ldr	r3, [pc, #388]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	011c      	lsls	r4, r3, #4
 8004a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	1891      	adds	r1, r2, r2
 8004aae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ab0:	415b      	adcs	r3, r3
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ab8:	4641      	mov	r1, r8
 8004aba:	eb12 0a01 	adds.w	sl, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad8:	4692      	mov	sl, r2
 8004ada:	469b      	mov	fp, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	eb1a 0303 	adds.w	r3, sl, r3
 8004ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8004aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b04:	460b      	mov	r3, r1
 8004b06:	18db      	adds	r3, r3, r3
 8004b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b1a:	f7fb fb61 	bl	80001e0 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004b26:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2264      	movs	r2, #100	@ 0x64
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	1acb      	subs	r3, r1, r3
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b3a:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b48:	441c      	add	r4, r3
 8004b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	1891      	adds	r1, r2, r2
 8004b62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b64:	415b      	adcs	r3, r3
 8004b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	1851      	adds	r1, r2, r1
 8004b70:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b72:	4649      	mov	r1, r9
 8004b74:	414b      	adcs	r3, r1
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b84:	4659      	mov	r1, fp
 8004b86:	00cb      	lsls	r3, r1, #3
 8004b88:	4651      	mov	r1, sl
 8004b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8e:	4651      	mov	r1, sl
 8004b90:	00ca      	lsls	r2, r1, #3
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	4642      	mov	r2, r8
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	18db      	adds	r3, r3, r3
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bd6:	f7fb fb03 	bl	80001e0 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	@ 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3332      	adds	r3, #50	@ 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 0207 	and.w	r2, r3, #7
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c08:	e106      	b.n	8004e18 <UART_SetConfig+0x4d8>
 8004c0a:	bf00      	nop
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	40011400 	.word	0x40011400
 8004c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	6239      	str	r1, [r7, #32]
 8004c32:	415b      	adcs	r3, r3
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	4649      	mov	r1, r9
 8004c40:	eb43 0501 	adc.w	r5, r3, r1
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	00eb      	lsls	r3, r5, #3
 8004c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c52:	00e2      	lsls	r2, r4, #3
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	18e3      	adds	r3, r4, r3
 8004c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c60:	464b      	mov	r3, r9
 8004c62:	eb45 0303 	adc.w	r3, r5, r3
 8004c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c86:	4629      	mov	r1, r5
 8004c88:	008b      	lsls	r3, r1, #2
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c90:	4621      	mov	r1, r4
 8004c92:	008a      	lsls	r2, r1, #2
 8004c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c98:	f7fb faa2 	bl	80001e0 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	011c      	lsls	r4, r3, #4
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	61b9      	str	r1, [r7, #24]
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6139      	str	r1, [r7, #16]
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d24:	4649      	mov	r1, r9
 8004d26:	008b      	lsls	r3, r1, #2
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2e:	4641      	mov	r1, r8
 8004d30:	008a      	lsls	r2, r1, #2
 8004d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d36:	f7fb fa53 	bl	80001e0 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4b38      	ldr	r3, [pc, #224]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 2301 	umull	r2, r3, r3, r1
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2264      	movs	r2, #100	@ 0x64
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	1acb      	subs	r3, r1, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	@ 0x32
 8004d54:	4a33      	ldr	r2, [pc, #204]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d80:	4641      	mov	r1, r8
 8004d82:	1851      	adds	r1, r2, r1
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	4649      	mov	r1, r9
 8004d88:	414b      	adcs	r3, r1
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d98:	4659      	mov	r1, fp
 8004d9a:	00cb      	lsls	r3, r1, #3
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da2:	4651      	mov	r1, sl
 8004da4:	00ca      	lsls	r2, r1, #3
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	4642      	mov	r2, r8
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db2:	464b      	mov	r3, r9
 8004db4:	460a      	mov	r2, r1
 8004db6:	eb42 0303 	adc.w	r3, r2, r3
 8004dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004de6:	f7fb f9fb 	bl	80001e0 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	@ 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	3332      	adds	r3, #50	@ 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4422      	add	r2, r4
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e24:	51eb851f 	.word	0x51eb851f

08004e28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e2c:	4904      	ldr	r1, [pc, #16]	@ (8004e40 <MX_FATFS_Init+0x18>)
 8004e2e:	4805      	ldr	r0, [pc, #20]	@ (8004e44 <MX_FATFS_Init+0x1c>)
 8004e30:	f000 f8ae 	bl	8004f90 <FATFS_LinkDriver>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b03      	ldr	r3, [pc, #12]	@ (8004e48 <MX_FATFS_Init+0x20>)
 8004e3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200007fc 	.word	0x200007fc
 8004e44:	20000010 	.word	0x20000010
 8004e48:	200007f8 	.word	0x200007f8

08004e4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fcef 	bl	800083c <SD_disk_initialize>
 8004e5e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb fdcd 	bl	8000a14 <SD_disk_status>
 8004e7a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004e94:	7bf8      	ldrb	r0, [r7, #15]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	f7fb fdd0 	bl	8000a40 <SD_disk_read>
 8004ea0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004eba:	7bf8      	ldrb	r0, [r7, #15]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	f7fb fe27 	bl	8000b14 <SD_disk_write>
 8004ec6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	603a      	str	r2, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
 8004edc:	460b      	mov	r3, r1
 8004ede:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004ee0:	79b9      	ldrb	r1, [r7, #6]
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb fe98 	bl	8000c1c <SD_disk_ioctl>
 8004eec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f10:	7a5b      	ldrb	r3, [r3, #9]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d131      	bne.n	8004f7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f18:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f1a:	7a5b      	ldrb	r3, [r3, #9]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004f26:	4b19      	ldr	r3, [pc, #100]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f28:	7a5b      	ldrb	r3, [r3, #9]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	4a17      	ldr	r2, [pc, #92]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004f36:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f38:	7a5b      	ldrb	r3, [r3, #9]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f40:	4413      	add	r3, r2
 8004f42:	79fa      	ldrb	r2, [r7, #7]
 8004f44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004f46:	4b11      	ldr	r3, [pc, #68]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f48:	7a5b      	ldrb	r3, [r3, #9]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	b2d1      	uxtb	r1, r2
 8004f50:	4a0e      	ldr	r2, [pc, #56]	@ (8004f8c <FATFS_LinkDriverEx+0x94>)
 8004f52:	7251      	strb	r1, [r2, #9]
 8004f54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004f56:	7dbb      	ldrb	r3, [r7, #22]
 8004f58:	3330      	adds	r3, #48	@ 0x30
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	223a      	movs	r2, #58	@ 0x3a
 8004f66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	222f      	movs	r2, #47	@ 0x2f
 8004f6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	3303      	adds	r3, #3
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000800 	.word	0x20000800

08004f90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffaa 	bl	8004ef8 <FATFS_LinkDriverEx>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0208 	add.w	r2, r3, #8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 0208 	add.w	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d103      	bne.n	8005070 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e00c      	b.n	800508a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3308      	adds	r3, #8
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e002      	b.n	800507e <vListInsert+0x2e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d2f6      	bcs.n	8005078 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6892      	ldr	r2, [r2, #8]
 80050d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6852      	ldr	r2, [r2, #4]
 80050e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d103      	bne.n	80050f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	e7fd      	b.n	8005140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005144:	f001 fbc8 	bl	80068d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	441a      	add	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005174:	3b01      	subs	r3, #1
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	@ 0xff
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d114      	bne.n	80051c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3310      	adds	r3, #16
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 ff96 	bl	80060d8 <xTaskRemoveFromEventList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <xQueueGenericReset+0xd0>)
 80051b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	e009      	b.n	80051d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3310      	adds	r3, #16
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fef0 	bl	8004fae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3324      	adds	r3, #36	@ 0x24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff feeb 	bl	8004fae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d8:	f001 fbb0 	bl	800693c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051dc:	2301      	movs	r3, #1
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3348      	adds	r3, #72	@ 0x48
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fc36 	bl	8006a98 <pvPortMalloc>
 800522c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3348      	adds	r3, #72	@ 0x48
 800523c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005246:	79fa      	ldrb	r2, [r7, #7]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f805 	bl	8005262 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005258:	69bb      	ldr	r3, [r7, #24]
	}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e002      	b.n	8005284 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005290:	2101      	movs	r1, #1
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f7ff ff40 	bl	8005118 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	@ 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052ae:	2300      	movs	r3, #0
 80052b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xQueueGenericSend+0x34>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSend+0x42>
 80052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSend+0x46>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericSend+0x48>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <xQueueGenericSend+0x64>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	e7fd      	b.n	8005300 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d103      	bne.n	8005312 <xQueueGenericSend+0x72>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <xQueueGenericSend+0x76>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSend+0x78>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <xQueueGenericSend+0x94>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	623b      	str	r3, [r7, #32]
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005334:	f001 f890 	bl	8006458 <xTaskGetSchedulerState>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <xQueueGenericSend+0xa4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <xQueueGenericSend+0xa8>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <xQueueGenericSend+0xaa>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <xQueueGenericSend+0xc6>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61fb      	str	r3, [r7, #28]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005366:	f001 fab7 	bl	80068d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <xQueueGenericSend+0xdc>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d129      	bne.n	80053d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005382:	f000 f971 	bl	8005668 <prvCopyDataToQueue>
 8005386:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	3324      	adds	r3, #36	@ 0x24
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fe9f 	bl	80060d8 <xTaskRemoveFromEventList>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053a0:	4b3f      	ldr	r3, [pc, #252]	@ (80054a0 <xQueueGenericSend+0x200>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	e00a      	b.n	80053c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053b8:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <xQueueGenericSend+0x200>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053c8:	f001 fab8 	bl	800693c <vPortExitCritical>
				return pdPASS;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e063      	b.n	8005498 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053d6:	f001 fab1 	bl	800693c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	e05c      	b.n	8005498 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053e4:	f107 0314 	add.w	r3, r7, #20
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fed9 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053f2:	f001 faa3 	bl	800693c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053f6:	f000 fc77 	bl	8005ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053fa:	f001 fa6d 	bl	80068d8 <vPortEnterCritical>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005404:	b25b      	sxtb	r3, r3
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d103      	bne.n	8005414 <xQueueGenericSend+0x174>
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800541a:	b25b      	sxtb	r3, r3
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d103      	bne.n	800542a <xQueueGenericSend+0x18a>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800542a:	f001 fa87 	bl	800693c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800542e:	1d3a      	adds	r2, r7, #4
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fec8 	bl	80061cc <xTaskCheckForTimeOut>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d124      	bne.n	800548c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005444:	f000 fa08 	bl	8005858 <prvIsQueueFull>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d018      	beq.n	8005480 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	3310      	adds	r3, #16
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fe18 	bl	800608c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800545c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800545e:	f000 f993 	bl	8005788 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005462:	f000 fc4f 	bl	8005d04 <xTaskResumeAll>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	f47f af7c 	bne.w	8005366 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800546e:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <xQueueGenericSend+0x200>)
 8005470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	e772      	b.n	8005366 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005482:	f000 f981 	bl	8005788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005486:	f000 fc3d 	bl	8005d04 <xTaskResumeAll>
 800548a:	e76c      	b.n	8005366 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800548c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800548e:	f000 f97b 	bl	8005788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005492:	f000 fc37 	bl	8005d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005498:	4618      	mov	r0, r3
 800549a:	3738      	adds	r7, #56	@ 0x38
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	@ 0x30
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <xQueueReceive+0x32>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	623b      	str	r3, [r7, #32]
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <xQueueReceive+0x40>
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <xQueueReceive+0x44>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <xQueueReceive+0x46>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <xQueueReceive+0x62>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61fb      	str	r3, [r7, #28]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005506:	f000 ffa7 	bl	8006458 <xTaskGetSchedulerState>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <xQueueReceive+0x72>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <xQueueReceive+0x76>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueReceive+0x78>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <xQueueReceive+0x94>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61bb      	str	r3, [r7, #24]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005538:	f001 f9ce 	bl	80068d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01f      	beq.n	8005588 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800554c:	f000 f8f6 	bl	800573c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00f      	beq.n	8005580 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	3310      	adds	r3, #16
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fdb7 	bl	80060d8 <xTaskRemoveFromEventList>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005570:	4b3c      	ldr	r3, [pc, #240]	@ (8005664 <xQueueReceive+0x1c0>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005580:	f001 f9dc 	bl	800693c <vPortExitCritical>
				return pdPASS;
 8005584:	2301      	movs	r3, #1
 8005586:	e069      	b.n	800565c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800558e:	f001 f9d5 	bl	800693c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005592:	2300      	movs	r3, #0
 8005594:	e062      	b.n	800565c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fdfd 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a6:	2301      	movs	r3, #1
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055aa:	f001 f9c7 	bl	800693c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ae:	f000 fb9b 	bl	8005ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b2:	f001 f991 	bl	80068d8 <vPortEnterCritical>
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d103      	bne.n	80055cc <xQueueReceive+0x128>
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d103      	bne.n	80055e2 <xQueueReceive+0x13e>
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e2:	f001 f9ab 	bl	800693c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e6:	1d3a      	adds	r2, r7, #4
 80055e8:	f107 0310 	add.w	r3, r7, #16
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fdec 	bl	80061cc <xTaskCheckForTimeOut>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d123      	bne.n	8005642 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055fc:	f000 f916 	bl	800582c <prvIsQueueEmpty>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	3324      	adds	r3, #36	@ 0x24
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4611      	mov	r1, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fd3c 	bl	800608c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005616:	f000 f8b7 	bl	8005788 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800561a:	f000 fb73 	bl	8005d04 <xTaskResumeAll>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d189      	bne.n	8005538 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005624:	4b0f      	ldr	r3, [pc, #60]	@ (8005664 <xQueueReceive+0x1c0>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	e780      	b.n	8005538 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005638:	f000 f8a6 	bl	8005788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563c:	f000 fb62 	bl	8005d04 <xTaskResumeAll>
 8005640:	e77a      	b.n	8005538 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	f000 f8a0 	bl	8005788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005648:	f000 fb5c 	bl	8005d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800564c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800564e:	f000 f8ed 	bl	800582c <prvIsQueueEmpty>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	f43f af6f 	beq.w	8005538 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800565a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800565c:	4618      	mov	r0, r3
 800565e:	3730      	adds	r7, #48	@ 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10d      	bne.n	80056a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d14d      	bne.n	800572a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fefe 	bl	8006494 <xTaskPriorityDisinherit>
 8005698:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	e043      	b.n	800572a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d119      	bne.n	80056dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6858      	ldr	r0, [r3, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	461a      	mov	r2, r3
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	f001 fc0a 	bl	8006ecc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	441a      	add	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d32b      	bcc.n	800572a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	e026      	b.n	800572a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68d8      	ldr	r0, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	f001 fbf0 	bl	8006ecc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	425b      	negs	r3, r3
 80056f6:	441a      	add	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d207      	bcs.n	8005718 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	425b      	negs	r3, r3
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d105      	bne.n	800572a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3b01      	subs	r3, #1
 8005728:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005732:	697b      	ldr	r3, [r7, #20]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	441a      	add	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d303      	bcc.n	8005770 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68d9      	ldr	r1, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	461a      	mov	r2, r3
 800577a:	6838      	ldr	r0, [r7, #0]
 800577c:	f001 fba6 	bl	8006ecc <memcpy>
	}
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005790:	f001 f8a2 	bl	80068d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800579a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800579c:	e011      	b.n	80057c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d012      	beq.n	80057cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3324      	adds	r3, #36	@ 0x24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fc94 	bl	80060d8 <xTaskRemoveFromEventList>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057b6:	f000 fd6d 	bl	8006294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	3b01      	subs	r3, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dce9      	bgt.n	800579e <prvUnlockQueue+0x16>
 80057ca:	e000      	b.n	80057ce <prvUnlockQueue+0x46>
					break;
 80057cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	22ff      	movs	r2, #255	@ 0xff
 80057d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057d6:	f001 f8b1 	bl	800693c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057da:	f001 f87d 	bl	80068d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057e6:	e011      	b.n	800580c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d012      	beq.n	8005816 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3310      	adds	r3, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fc6f 	bl	80060d8 <xTaskRemoveFromEventList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005800:	f000 fd48 	bl	8006294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	3b01      	subs	r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800580c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	dce9      	bgt.n	80057e8 <prvUnlockQueue+0x60>
 8005814:	e000      	b.n	8005818 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005816:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	22ff      	movs	r2, #255	@ 0xff
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005820:	f001 f88c 	bl	800693c <vPortExitCritical>
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005834:	f001 f850 	bl	80068d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e001      	b.n	800584a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800584a:	f001 f877 	bl	800693c <vPortExitCritical>

	return xReturn;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005860:	f001 f83a 	bl	80068d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	429a      	cmp	r2, r3
 800586e:	d102      	bne.n	8005876 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e001      	b.n	800587a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800587a:	f001 f85f 	bl	800693c <vPortExitCritical>

	return xReturn;
 800587e:	68fb      	ldr	r3, [r7, #12]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	@ 0x38
 800588c:	af04      	add	r7, sp, #16
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	623b      	str	r3, [r7, #32]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	61fb      	str	r3, [r7, #28]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058d2:	2354      	movs	r3, #84	@ 0x54
 80058d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b54      	cmp	r3, #84	@ 0x54
 80058da:	d00b      	beq.n	80058f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	61bb      	str	r3, [r7, #24]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <xTaskCreateStatic+0xb2>
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01b      	beq.n	800593a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005914:	2300      	movs	r3, #0
 8005916:	9303      	str	r3, [sp, #12]
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f850 	bl	80059d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005934:	f000 f8d6 	bl	8005ae4 <prvAddNewTaskToReadyList>
 8005938:	e001      	b.n	800593e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800593e:	697b      	ldr	r3, [r7, #20]
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3728      	adds	r7, #40	@ 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	@ 0x30
 800594c:	af04      	add	r7, sp, #16
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f89b 	bl	8006a98 <pvPortMalloc>
 8005962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800596a:	2054      	movs	r0, #84	@ 0x54
 800596c:	f001 f894 	bl	8006a98 <pvPortMalloc>
 8005970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	631a      	str	r2, [r3, #48]	@ 0x30
 800597e:	e005      	b.n	800598c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005980:	6978      	ldr	r0, [r7, #20]
 8005982:	f001 f957 	bl	8006c34 <vPortFree>
 8005986:	e001      	b.n	800598c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d017      	beq.n	80059c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	2300      	movs	r3, #0
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	9302      	str	r3, [sp, #8]
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f80e 	bl	80059d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b6:	69f8      	ldr	r0, [r7, #28]
 80059b8:	f000 f894 	bl	8005ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059bc:	2301      	movs	r3, #1
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e002      	b.n	80059c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059c8:	69bb      	ldr	r3, [r7, #24]
	}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ea:	3b01      	subs	r3, #1
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01f      	beq.n	8005a62 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e012      	b.n	8005a4e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	7819      	ldrb	r1, [r3, #0]
 8005a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	3334      	adds	r3, #52	@ 0x34
 8005a38:	460a      	mov	r2, r1
 8005a3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b0f      	cmp	r3, #15
 8005a52:	d9e9      	bls.n	8005a28 <prvInitialiseNewTask+0x56>
 8005a54:	e000      	b.n	8005a58 <prvInitialiseNewTask+0x86>
			{
				break;
 8005a56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a60:	e003      	b.n	8005a6a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d901      	bls.n	8005a74 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a70:	2306      	movs	r3, #6
 8005a72:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a78:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	2200      	movs	r2, #0
 8005a84:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff faaf 	bl	8004fee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	3318      	adds	r3, #24
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff faaa 	bl	8004fee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	f1c3 0207 	rsb	r2, r3, #7
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	69b8      	ldr	r0, [r7, #24]
 8005ac4:	f000 fdd4 	bl	8006670 <pxPortInitialiseStack>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ada:	bf00      	nop
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aec:	f000 fef4 	bl	80068d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005af0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b9c <prvAddNewTaskToReadyList+0xb8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a29      	ldr	r2, [pc, #164]	@ (8005b9c <prvAddNewTaskToReadyList+0xb8>)
 8005af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005afa:	4b29      	ldr	r3, [pc, #164]	@ (8005ba0 <prvAddNewTaskToReadyList+0xbc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b02:	4a27      	ldr	r2, [pc, #156]	@ (8005ba0 <prvAddNewTaskToReadyList+0xbc>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b08:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <prvAddNewTaskToReadyList+0xb8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d110      	bne.n	8005b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b10:	f000 fbe4 	bl	80062dc <prvInitialiseTaskLists>
 8005b14:	e00d      	b.n	8005b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <prvAddNewTaskToReadyList+0xc0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b1e:	4b20      	ldr	r3, [pc, #128]	@ (8005ba0 <prvAddNewTaskToReadyList+0xbc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d802      	bhi.n	8005b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <prvAddNewTaskToReadyList+0xbc>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <prvAddNewTaskToReadyList+0xc4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <prvAddNewTaskToReadyList+0xc4>)
 8005b3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	2201      	movs	r2, #1
 8005b42:	409a      	lsls	r2, r3
 8005b44:	4b19      	ldr	r3, [pc, #100]	@ (8005bac <prvAddNewTaskToReadyList+0xc8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	4a18      	ldr	r2, [pc, #96]	@ (8005bac <prvAddNewTaskToReadyList+0xc8>)
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <prvAddNewTaskToReadyList+0xcc>)
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7ff fa4f 	bl	8005008 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b6a:	f000 fee7 	bl	800693c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <prvAddNewTaskToReadyList+0xc0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <prvAddNewTaskToReadyList+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d207      	bcs.n	8005b94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b84:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvAddNewTaskToReadyList+0xd0>)
 8005b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	2000090c 	.word	0x2000090c
 8005ba0:	2000080c 	.word	0x2000080c
 8005ba4:	20000918 	.word	0x20000918
 8005ba8:	20000928 	.word	0x20000928
 8005bac:	20000914 	.word	0x20000914
 8005bb0:	20000810 	.word	0x20000810
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bca:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <vTaskDelay+0x64>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <vTaskDelay+0x32>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60bb      	str	r3, [r7, #8]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bea:	f000 f87d 	bl	8005ce8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fcd7 	bl	80065a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bf6:	f000 f885 	bl	8005d04 <xTaskResumeAll>
 8005bfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <vTaskDelay+0x68>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000934 	.word	0x20000934
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	@ 0x28
 8005c28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c32:	463a      	mov	r2, r7
 8005c34:	1d39      	adds	r1, r7, #4
 8005c36:	f107 0308 	add.w	r3, r7, #8
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fb fd40 	bl	80016c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	9202      	str	r2, [sp, #8]
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	460a      	mov	r2, r1
 8005c52:	491f      	ldr	r1, [pc, #124]	@ (8005cd0 <vTaskStartScheduler+0xac>)
 8005c54:	481f      	ldr	r0, [pc, #124]	@ (8005cd4 <vTaskStartScheduler+0xb0>)
 8005c56:	f7ff fe17 	bl	8005888 <xTaskCreateStatic>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd8 <vTaskStartScheduler+0xb4>)
 8005c5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <vTaskStartScheduler+0xb4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e001      	b.n	8005c72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d116      	bne.n	8005ca6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8c:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <vTaskStartScheduler+0xb8>)
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c94:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <vTaskStartScheduler+0xbc>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <vTaskStartScheduler+0xc0>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ca0:	f000 fd76 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ca4:	e00f      	b.n	8005cc6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d10b      	bne.n	8005cc6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <vTaskStartScheduler+0x9e>
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	08006f90 	.word	0x08006f90
 8005cd4:	080062ad 	.word	0x080062ad
 8005cd8:	20000930 	.word	0x20000930
 8005cdc:	2000092c 	.word	0x2000092c
 8005ce0:	20000918 	.word	0x20000918
 8005ce4:	20000910 	.word	0x20000910

08005ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a03      	ldr	r2, [pc, #12]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000934 	.word	0x20000934

08005d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d12:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	603b      	str	r3, [r7, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d32:	f000 fdd1 	bl	80068d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d36:	4b39      	ldr	r3, [pc, #228]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4a37      	ldr	r2, [pc, #220]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b36      	ldr	r3, [pc, #216]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d161      	bne.n	8005e0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d48:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <xTaskResumeAll+0x11c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05d      	beq.n	8005e0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d50:	e02e      	b.n	8005db0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d52:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff f9af 	bl	80050c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f9aa 	bl	80050c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	2201      	movs	r2, #1
 8005d74:	409a      	lsls	r2, r3
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <xTaskResumeAll+0x128>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7ff f936 	bl	8005008 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b23      	ldr	r3, [pc, #140]	@ (8005e30 <xTaskResumeAll+0x12c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005daa:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1cc      	bne.n	8005d52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dbe:	f000 fb2b 	bl	8006418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dce:	f000 f847 	bl	8005e60 <xTaskIncrementTick>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005dd8:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f1      	bne.n	8005dce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005dea:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <xTaskResumeAll+0x138>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e0c:	f000 fd96 	bl	800693c <vPortExitCritical>

	return xAlreadyYielded;
 8005e10:	68bb      	ldr	r3, [r7, #8]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000934 	.word	0x20000934
 8005e20:	2000090c 	.word	0x2000090c
 8005e24:	200008cc 	.word	0x200008cc
 8005e28:	20000914 	.word	0x20000914
 8005e2c:	20000810 	.word	0x20000810
 8005e30:	2000080c 	.word	0x2000080c
 8005e34:	20000920 	.word	0x20000920
 8005e38:	2000091c 	.word	0x2000091c
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <xTaskGetTickCount+0x1c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000910 	.word	0x20000910

08005e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <xTaskIncrementTick+0x148>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 808f 	bne.w	8005f92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e74:	4b4d      	ldr	r3, [pc, #308]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d121      	bne.n	8005ecc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e88:	4b49      	ldr	r3, [pc, #292]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	603b      	str	r3, [r7, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xTaskIncrementTick+0x46>
 8005eaa:	4b41      	ldr	r3, [pc, #260]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f000 faa6 	bl	8006418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d348      	bcc.n	8005f68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed6:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	4b36      	ldr	r3, [pc, #216]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	601a      	str	r2, [r3, #0]
					break;
 8005ee8:	e03e      	b.n	8005f68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d203      	bcs.n	8005f0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f02:	4a2e      	ldr	r2, [pc, #184]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f08:	e02e      	b.n	8005f68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f8d7 	bl	80050c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f8ce 	bl	80050c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f46:	441a      	add	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7ff f85a 	bl	8005008 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f58:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3b9      	bcc.n	8005ed6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f66:	e7b6      	b.n	8005ed6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f68:	4b17      	ldr	r3, [pc, #92]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	4915      	ldr	r1, [pc, #84]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d901      	bls.n	8005f84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f84:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <xTaskIncrementTick+0x16c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e004      	b.n	8005f9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f92:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f9c:	697b      	ldr	r3, [r7, #20]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000934 	.word	0x20000934
 8005fac:	20000910 	.word	0x20000910
 8005fb0:	200008c4 	.word	0x200008c4
 8005fb4:	200008c8 	.word	0x200008c8
 8005fb8:	20000924 	.word	0x20000924
 8005fbc:	2000092c 	.word	0x2000092c
 8005fc0:	20000914 	.word	0x20000914
 8005fc4:	20000810 	.word	0x20000810
 8005fc8:	2000080c 	.word	0x2000080c
 8005fcc:	20000920 	.word	0x20000920
 8005fd0:	2000091c 	.word	0x2000091c

08005fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fda:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <vTaskSwitchContext+0xa4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fe2:	4b26      	ldr	r3, [pc, #152]	@ (800607c <vTaskSwitchContext+0xa8>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fe8:	e040      	b.n	800606c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005fea:	4b24      	ldr	r3, [pc, #144]	@ (800607c <vTaskSwitchContext+0xa8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	4b23      	ldr	r3, [pc, #140]	@ (8006080 <vTaskSwitchContext+0xac>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	f1c3 031f 	rsb	r3, r3, #31
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	491f      	ldr	r1, [pc, #124]	@ (8006084 <vTaskSwitchContext+0xb0>)
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <vTaskSwitchContext+0x5e>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vTaskSwitchContext+0x5a>
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a11      	ldr	r2, [pc, #68]	@ (8006084 <vTaskSwitchContext+0xb0>)
 800603e:	4413      	add	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3308      	adds	r3, #8
 8006054:	429a      	cmp	r2, r3
 8006056:	d104      	bne.n	8006062 <vTaskSwitchContext+0x8e>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a07      	ldr	r2, [pc, #28]	@ (8006088 <vTaskSwitchContext+0xb4>)
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000934 	.word	0x20000934
 800607c:	20000920 	.word	0x20000920
 8006080:	20000914 	.word	0x20000914
 8006084:	20000810 	.word	0x20000810
 8006088:	2000080c 	.word	0x2000080c

0800608c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60fb      	str	r3, [r7, #12]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <vTaskPlaceOnEventList+0x48>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3318      	adds	r3, #24
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fe ffc7 	bl	8005050 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060c2:	2101      	movs	r1, #1
 80060c4:	6838      	ldr	r0, [r7, #0]
 80060c6:	f000 fa6d 	bl	80065a4 <prvAddCurrentTaskToDelayedList>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2000080c 	.word	0x2000080c

080060d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60fb      	str	r3, [r7, #12]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3318      	adds	r3, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe ffd9 	bl	80050c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <xTaskRemoveFromEventList+0xb0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe ffd0 	bl	80050c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	4b18      	ldr	r3, [pc, #96]	@ (800618c <xTaskRemoveFromEventList+0xb4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <xTaskRemoveFromEventList+0xb4>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a13      	ldr	r2, [pc, #76]	@ (8006190 <xTaskRemoveFromEventList+0xb8>)
 8006142:	441a      	add	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe ff5c 	bl	8005008 <vListInsertEnd>
 8006150:	e005      	b.n	800615e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3318      	adds	r3, #24
 8006156:	4619      	mov	r1, r3
 8006158:	480e      	ldr	r0, [pc, #56]	@ (8006194 <xTaskRemoveFromEventList+0xbc>)
 800615a:	f7fe ff55 	bl	8005008 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <xTaskRemoveFromEventList+0xc0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d905      	bls.n	8006178 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <xTaskRemoveFromEventList+0xc4>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e001      	b.n	800617c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000934 	.word	0x20000934
 800618c:	20000914 	.word	0x20000914
 8006190:	20000810 	.word	0x20000810
 8006194:	200008cc 	.word	0x200008cc
 8006198:	2000080c 	.word	0x2000080c
 800619c:	20000920 	.word	0x20000920

080061a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <vTaskInternalSetTimeOutState+0x24>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <vTaskInternalSetTimeOutState+0x28>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	20000924 	.word	0x20000924
 80061c8:	20000910 	.word	0x20000910

080061cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	613b      	str	r3, [r7, #16]
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60fb      	str	r3, [r7, #12]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006212:	f000 fb61 	bl	80068d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006216:	4b1d      	ldr	r3, [pc, #116]	@ (800628c <xTaskCheckForTimeOut+0xc0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d102      	bne.n	8006236 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	e023      	b.n	800627e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <xTaskCheckForTimeOut+0xc4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d007      	beq.n	8006252 <xTaskCheckForTimeOut+0x86>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	e015      	b.n	800627e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	429a      	cmp	r2, r3
 800625a:	d20b      	bcs.n	8006274 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ff99 	bl	80061a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e004      	b.n	800627e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800627a:	2301      	movs	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800627e:	f000 fb5d 	bl	800693c <vPortExitCritical>

	return xReturn;
 8006282:	69fb      	ldr	r3, [r7, #28]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3720      	adds	r7, #32
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000910 	.word	0x20000910
 8006290:	20000924 	.word	0x20000924

08006294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <vTaskMissedYield+0x14>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	20000920 	.word	0x20000920

080062ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062b4:	f000 f852 	bl	800635c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <prvIdleTask+0x28>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d9f9      	bls.n	80062b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <prvIdleTask+0x2c>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062d0:	e7f0      	b.n	80062b4 <prvIdleTask+0x8>
 80062d2:	bf00      	nop
 80062d4:	20000810 	.word	0x20000810
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	e00c      	b.n	8006302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4a12      	ldr	r2, [pc, #72]	@ (800633c <prvInitialiseTaskLists+0x60>)
 80062f4:	4413      	add	r3, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fe59 	bl	8004fae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b06      	cmp	r3, #6
 8006306:	d9ef      	bls.n	80062e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006308:	480d      	ldr	r0, [pc, #52]	@ (8006340 <prvInitialiseTaskLists+0x64>)
 800630a:	f7fe fe50 	bl	8004fae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800630e:	480d      	ldr	r0, [pc, #52]	@ (8006344 <prvInitialiseTaskLists+0x68>)
 8006310:	f7fe fe4d 	bl	8004fae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006314:	480c      	ldr	r0, [pc, #48]	@ (8006348 <prvInitialiseTaskLists+0x6c>)
 8006316:	f7fe fe4a 	bl	8004fae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800631a:	480c      	ldr	r0, [pc, #48]	@ (800634c <prvInitialiseTaskLists+0x70>)
 800631c:	f7fe fe47 	bl	8004fae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006320:	480b      	ldr	r0, [pc, #44]	@ (8006350 <prvInitialiseTaskLists+0x74>)
 8006322:	f7fe fe44 	bl	8004fae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <prvInitialiseTaskLists+0x78>)
 8006328:	4a05      	ldr	r2, [pc, #20]	@ (8006340 <prvInitialiseTaskLists+0x64>)
 800632a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800632c:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <prvInitialiseTaskLists+0x7c>)
 800632e:	4a05      	ldr	r2, [pc, #20]	@ (8006344 <prvInitialiseTaskLists+0x68>)
 8006330:	601a      	str	r2, [r3, #0]
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000810 	.word	0x20000810
 8006340:	2000089c 	.word	0x2000089c
 8006344:	200008b0 	.word	0x200008b0
 8006348:	200008cc 	.word	0x200008cc
 800634c:	200008e0 	.word	0x200008e0
 8006350:	200008f8 	.word	0x200008f8
 8006354:	200008c4 	.word	0x200008c4
 8006358:	200008c8 	.word	0x200008c8

0800635c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006362:	e019      	b.n	8006398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006364:	f000 fab8 	bl	80068d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006368:	4b10      	ldr	r3, [pc, #64]	@ (80063ac <prvCheckTasksWaitingTermination+0x50>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fea4 	bl	80050c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <prvCheckTasksWaitingTermination+0x54>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	4a0b      	ldr	r2, [pc, #44]	@ (80063b0 <prvCheckTasksWaitingTermination+0x54>)
 8006382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <prvCheckTasksWaitingTermination+0x58>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	4a0a      	ldr	r2, [pc, #40]	@ (80063b4 <prvCheckTasksWaitingTermination+0x58>)
 800638c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800638e:	f000 fad5 	bl	800693c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f810 	bl	80063b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <prvCheckTasksWaitingTermination+0x58>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e1      	bne.n	8006364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200008e0 	.word	0x200008e0
 80063b0:	2000090c 	.word	0x2000090c
 80063b4:	200008f4 	.word	0x200008f4

080063b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d108      	bne.n	80063dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fc30 	bl	8006c34 <vPortFree>
				vPortFree( pxTCB );
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc2d 	bl	8006c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063da:	e019      	b.n	8006410 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d103      	bne.n	80063ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fc24 	bl	8006c34 <vPortFree>
	}
 80063ec:	e010      	b.n	8006410 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d00b      	beq.n	8006410 <prvDeleteTCB+0x58>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <prvDeleteTCB+0x54>
	}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641e:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <prvResetNextTaskUnblockTime+0x38>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006428:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <prvResetNextTaskUnblockTime+0x3c>)
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006430:	e008      	b.n	8006444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <prvResetNextTaskUnblockTime+0x38>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <prvResetNextTaskUnblockTime+0x3c>)
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	200008c4 	.word	0x200008c4
 8006454:	2000092c 	.word	0x2000092c

08006458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800645e:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <xTaskGetSchedulerState+0x34>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006466:	2301      	movs	r3, #1
 8006468:	607b      	str	r3, [r7, #4]
 800646a:	e008      	b.n	800647e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646c:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <xTaskGetSchedulerState+0x38>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006474:	2302      	movs	r3, #2
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	e001      	b.n	800647e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800647e:	687b      	ldr	r3, [r7, #4]
	}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000918 	.word	0x20000918
 8006490:	20000934 	.word	0x20000934

08006494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d070      	beq.n	800658c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <xTaskPriorityDisinherit+0x104>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d00b      	beq.n	80064cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60bb      	str	r3, [r7, #8]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	429a      	cmp	r2, r3
 8006500:	d044      	beq.n	800658c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	2b00      	cmp	r3, #0
 8006508:	d140      	bne.n	800658c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fdd7 	bl	80050c2 <uxListRemove>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d115      	bne.n	8006546 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651e:	491f      	ldr	r1, [pc, #124]	@ (800659c <xTaskPriorityDisinherit+0x108>)
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xTaskPriorityDisinherit+0xb2>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <xTaskPriorityDisinherit+0x10c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4013      	ands	r3, r2
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <xTaskPriorityDisinherit+0x10c>)
 8006544:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	f1c3 0207 	rsb	r2, r3, #7
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	2201      	movs	r2, #1
 8006560:	409a      	lsls	r2, r3
 8006562:	4b0f      	ldr	r3, [pc, #60]	@ (80065a0 <xTaskPriorityDisinherit+0x10c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	4a0d      	ldr	r2, [pc, #52]	@ (80065a0 <xTaskPriorityDisinherit+0x10c>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a08      	ldr	r2, [pc, #32]	@ (800659c <xTaskPriorityDisinherit+0x108>)
 800657a:	441a      	add	r2, r3
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe fd40 	bl	8005008 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800658c:	697b      	ldr	r3, [r7, #20]
	}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000080c 	.word	0x2000080c
 800659c:	20000810 	.word	0x20000810
 80065a0:	20000914 	.word	0x20000914

080065a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ae:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b4:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fd81 	bl	80050c2 <uxListRemove>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065c6:	4b24      	ldr	r3, [pc, #144]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	2201      	movs	r2, #1
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43da      	mvns	r2, r3
 80065d4:	4b21      	ldr	r3, [pc, #132]	@ (800665c <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4013      	ands	r3, r2
 80065da:	4a20      	ldr	r2, [pc, #128]	@ (800665c <prvAddCurrentTaskToDelayedList+0xb8>)
 80065dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d10a      	bne.n	80065fc <prvAddCurrentTaskToDelayedList+0x58>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4619      	mov	r1, r3
 80065f4:	481a      	ldr	r0, [pc, #104]	@ (8006660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065f6:	f7fe fd07 	bl	8005008 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065fa:	e026      	b.n	800664a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006604:	4b14      	ldr	r3, [pc, #80]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	429a      	cmp	r2, r3
 8006612:	d209      	bcs.n	8006628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006614:	4b13      	ldr	r3, [pc, #76]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b0f      	ldr	r3, [pc, #60]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3304      	adds	r3, #4
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f7fe fd15 	bl	8005050 <vListInsert>
}
 8006626:	e010      	b.n	800664a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006628:	4b0f      	ldr	r3, [pc, #60]	@ (8006668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3304      	adds	r3, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f7fe fd0b 	bl	8005050 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800663a:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <prvAddCurrentTaskToDelayedList+0xc8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	d202      	bcs.n	800664a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006644:	4a09      	ldr	r2, [pc, #36]	@ (800666c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6013      	str	r3, [r2, #0]
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000910 	.word	0x20000910
 8006658:	2000080c 	.word	0x2000080c
 800665c:	20000914 	.word	0x20000914
 8006660:	200008f8 	.word	0x200008f8
 8006664:	200008c8 	.word	0x200008c8
 8006668:	200008c4 	.word	0x200008c4
 800666c:	2000092c 	.word	0x2000092c

08006670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3b04      	subs	r3, #4
 8006680:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3b04      	subs	r3, #4
 800668e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3b04      	subs	r3, #4
 800669e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066a0:	4a0c      	ldr	r2, [pc, #48]	@ (80066d4 <pxPortInitialiseStack+0x64>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3b14      	subs	r3, #20
 80066aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f06f 0202 	mvn.w	r2, #2
 80066be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b20      	subs	r3, #32
 80066c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066c6:	68fb      	ldr	r3, [r7, #12]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	080066d9 	.word	0x080066d9

080066d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066e2:	4b13      	ldr	r3, [pc, #76]	@ (8006730 <prvTaskExitError+0x58>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d00b      	beq.n	8006704 <prvTaskExitError+0x2c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	60fb      	str	r3, [r7, #12]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <prvTaskExitError+0x28>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60bb      	str	r3, [r7, #8]
}
 8006716:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006718:	bf00      	nop
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0fc      	beq.n	800671a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000024 	.word	0x20000024
	...

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	@ (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b47      	ldr	r3, [pc, #284]	@ (80068b4 <xPortStartScheduler+0x124>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a47      	ldr	r2, [pc, #284]	@ (80068b8 <xPortStartScheduler+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10b      	bne.n	80067b8 <xPortStartScheduler+0x28>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b8:	4b3e      	ldr	r3, [pc, #248]	@ (80068b4 <xPortStartScheduler+0x124>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a3f      	ldr	r2, [pc, #252]	@ (80068bc <xPortStartScheduler+0x12c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d10b      	bne.n	80067da <xPortStartScheduler+0x4a>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60fb      	str	r3, [r7, #12]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067da:	4b39      	ldr	r3, [pc, #228]	@ (80068c0 <xPortStartScheduler+0x130>)
 80067dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	4b31      	ldr	r3, [pc, #196]	@ (80068c4 <xPortStartScheduler+0x134>)
 8006800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006802:	4b31      	ldr	r3, [pc, #196]	@ (80068c8 <xPortStartScheduler+0x138>)
 8006804:	2207      	movs	r2, #7
 8006806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006808:	e009      	b.n	800681e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800680a:	4b2f      	ldr	r3, [pc, #188]	@ (80068c8 <xPortStartScheduler+0x138>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3b01      	subs	r3, #1
 8006810:	4a2d      	ldr	r2, [pc, #180]	@ (80068c8 <xPortStartScheduler+0x138>)
 8006812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b80      	cmp	r3, #128	@ 0x80
 8006828:	d0ef      	beq.n	800680a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800682a:	4b27      	ldr	r3, [pc, #156]	@ (80068c8 <xPortStartScheduler+0x138>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1c3 0307 	rsb	r3, r3, #7
 8006832:	2b04      	cmp	r3, #4
 8006834:	d00b      	beq.n	800684e <xPortStartScheduler+0xbe>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60bb      	str	r3, [r7, #8]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800684e:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <xPortStartScheduler+0x138>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	4a1c      	ldr	r2, [pc, #112]	@ (80068c8 <xPortStartScheduler+0x138>)
 8006856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <xPortStartScheduler+0x138>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006860:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <xPortStartScheduler+0x138>)
 8006862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800686c:	4b17      	ldr	r3, [pc, #92]	@ (80068cc <xPortStartScheduler+0x13c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <xPortStartScheduler+0x13c>)
 8006872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006878:	4b14      	ldr	r3, [pc, #80]	@ (80068cc <xPortStartScheduler+0x13c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a13      	ldr	r2, [pc, #76]	@ (80068cc <xPortStartScheduler+0x13c>)
 800687e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006884:	f000 f8da 	bl	8006a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006888:	4b11      	ldr	r3, [pc, #68]	@ (80068d0 <xPortStartScheduler+0x140>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800688e:	f000 f8f9 	bl	8006a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006892:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <xPortStartScheduler+0x144>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a0f      	ldr	r2, [pc, #60]	@ (80068d4 <xPortStartScheduler+0x144>)
 8006898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800689c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800689e:	f7ff ff63 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068a2:	f7ff fb97 	bl	8005fd4 <vTaskSwitchContext>
	prvTaskExitError();
 80068a6:	f7ff ff17 	bl	80066d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	e000ed00 	.word	0xe000ed00
 80068b8:	410fc271 	.word	0x410fc271
 80068bc:	410fc270 	.word	0x410fc270
 80068c0:	e000e400 	.word	0xe000e400
 80068c4:	20000938 	.word	0x20000938
 80068c8:	2000093c 	.word	0x2000093c
 80068cc:	e000ed20 	.word	0xe000ed20
 80068d0:	20000024 	.word	0x20000024
 80068d4:	e000ef34 	.word	0xe000ef34

080068d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068f2:	4b10      	ldr	r3, [pc, #64]	@ (8006934 <vPortEnterCritical+0x5c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <vPortEnterCritical+0x5c>)
 80068fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <vPortEnterCritical+0x5c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d110      	bne.n	8006926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <vPortEnterCritical+0x60>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <vPortEnterCritical+0x4e>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	603b      	str	r3, [r7, #0]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <vPortEnterCritical+0x4a>
	}
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000024 	.word	0x20000024
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006942:	4b12      	ldr	r3, [pc, #72]	@ (800698c <vPortExitCritical+0x50>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <vPortExitCritical+0x26>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006962:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3b01      	subs	r3, #1
 8006968:	4a08      	ldr	r2, [pc, #32]	@ (800698c <vPortExitCritical+0x50>)
 800696a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800696c:	4b07      	ldr	r3, [pc, #28]	@ (800698c <vPortExitCritical+0x50>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <vPortExitCritical+0x44>
 8006974:	2300      	movs	r3, #0
 8006976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800697e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	20000024 	.word	0x20000024

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4b15      	ldr	r3, [pc, #84]	@ (80069f0 <pxCurrentTCBConst>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f01e 0f10 	tst.w	lr, #16
 80069a0:	bf08      	it	eq
 80069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069b4:	f380 8811 	msr	BASEPRI, r0
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f7ff fb08 	bl	8005fd4 <vTaskSwitchContext>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f380 8811 	msr	BASEPRI, r0
 80069cc:	bc09      	pop	{r0, r3}
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d6:	f01e 0f10 	tst.w	lr, #16
 80069da:	bf08      	it	eq
 80069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069e0:	f380 8809 	msr	PSP, r0
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst>:
 80069f0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a12:	f7ff fa25 	bl	8005e60 <xTaskIncrementTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <SysTick_Handler+0x40>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <vPortSetupTimerInterrupt+0x38>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <vPortSetupTimerInterrupt+0x3c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <vPortSetupTimerInterrupt+0x40>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a09      	ldr	r2, [pc, #36]	@ (8006a80 <vPortSetupTimerInterrupt+0x44>)
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a5e:	4b04      	ldr	r3, [pc, #16]	@ (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a60:	2207      	movs	r2, #7
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000e010 	.word	0xe000e010
 8006a74:	e000e018 	.word	0xe000e018
 8006a78:	20000004 	.word	0x20000004
 8006a7c:	10624dd3 	.word	0x10624dd3
 8006a80:	e000e014 	.word	0xe000e014

08006a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a94 <vPortEnableVFP+0x10>
 8006a88:	6801      	ldr	r1, [r0, #0]
 8006a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a8e:	6001      	str	r1, [r0, #0]
 8006a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e000ed88 	.word	0xe000ed88

08006a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	@ 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa4:	f7ff f920 	bl	8005ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c1c <pvPortMalloc+0x184>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ab0:	f000 f924 	bl	8006cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c20 <pvPortMalloc+0x188>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8095 	bne.w	8006bec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01e      	beq.n	8006b06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006ac8:	2208      	movs	r2, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d015      	beq.n	8006b06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <pvPortMalloc+0x6e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d06f      	beq.n	8006bec <pvPortMalloc+0x154>
 8006b0c:	4b45      	ldr	r3, [pc, #276]	@ (8006c24 <pvPortMalloc+0x18c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d86a      	bhi.n	8006bec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b16:	4b44      	ldr	r3, [pc, #272]	@ (8006c28 <pvPortMalloc+0x190>)
 8006b18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b1a:	4b43      	ldr	r3, [pc, #268]	@ (8006c28 <pvPortMalloc+0x190>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b20:	e004      	b.n	8006b2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d903      	bls.n	8006b3e <pvPortMalloc+0xa6>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f1      	bne.n	8006b22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b3e:	4b37      	ldr	r3, [pc, #220]	@ (8006c1c <pvPortMalloc+0x184>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d051      	beq.n	8006bec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	4413      	add	r3, r2
 8006b50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	1ad2      	subs	r2, r2, r3
 8006b62:	2308      	movs	r3, #8
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d920      	bls.n	8006bac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <pvPortMalloc+0xfc>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	613b      	str	r3, [r7, #16]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ba6:	69b8      	ldr	r0, [r7, #24]
 8006ba8:	f000 f90a 	bl	8006dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bac:	4b1d      	ldr	r3, [pc, #116]	@ (8006c24 <pvPortMalloc+0x18c>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c24 <pvPortMalloc+0x18c>)
 8006bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bba:	4b1a      	ldr	r3, [pc, #104]	@ (8006c24 <pvPortMalloc+0x18c>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8006c2c <pvPortMalloc+0x194>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d203      	bcs.n	8006bce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bc6:	4b17      	ldr	r3, [pc, #92]	@ (8006c24 <pvPortMalloc+0x18c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a18      	ldr	r2, [pc, #96]	@ (8006c2c <pvPortMalloc+0x194>)
 8006bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <pvPortMalloc+0x188>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006be2:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <pvPortMalloc+0x198>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a11      	ldr	r2, [pc, #68]	@ (8006c30 <pvPortMalloc+0x198>)
 8006bea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bec:	f7ff f88a 	bl	8005d04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <pvPortMalloc+0x17a>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	60fb      	str	r3, [r7, #12]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <pvPortMalloc+0x176>
	return pvReturn;
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	@ 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20004548 	.word	0x20004548
 8006c20:	2000455c 	.word	0x2000455c
 8006c24:	2000454c 	.word	0x2000454c
 8006c28:	20004540 	.word	0x20004540
 8006c2c:	20004550 	.word	0x20004550
 8006c30:	20004554 	.word	0x20004554

08006c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d04f      	beq.n	8006ce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c46:	2308      	movs	r3, #8
 8006c48:	425b      	negs	r3, r3
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4b25      	ldr	r3, [pc, #148]	@ (8006cf0 <vPortFree+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <vPortFree+0x46>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60fb      	str	r3, [r7, #12]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <vPortFree+0x66>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60bb      	str	r3, [r7, #8]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <vPortFree+0xbc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01e      	beq.n	8006ce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11a      	bne.n	8006ce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <vPortFree+0xbc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc0:	f7ff f812 	bl	8005ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <vPortFree+0xc0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4413      	add	r3, r2
 8006cce:	4a09      	ldr	r2, [pc, #36]	@ (8006cf4 <vPortFree+0xc0>)
 8006cd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f000 f874 	bl	8006dc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cd8:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <vPortFree+0xc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	4a06      	ldr	r2, [pc, #24]	@ (8006cf8 <vPortFree+0xc4>)
 8006ce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ce2:	f7ff f80f 	bl	8005d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000455c 	.word	0x2000455c
 8006cf4:	2000454c 	.word	0x2000454c
 8006cf8:	20004558 	.word	0x20004558

08006cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d08:	4b27      	ldr	r3, [pc, #156]	@ (8006da8 <prvHeapInit+0xac>)
 8006d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00c      	beq.n	8006d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3307      	adds	r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006da8 <prvHeapInit+0xac>)
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d34:	4a1d      	ldr	r2, [pc, #116]	@ (8006dac <prvHeapInit+0xb0>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dac <prvHeapInit+0xb0>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	4413      	add	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d48:	2208      	movs	r2, #8
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <prvHeapInit+0xb4>)
 8006d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d5e:	4b14      	ldr	r3, [pc, #80]	@ (8006db0 <prvHeapInit+0xb4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d66:	4b12      	ldr	r3, [pc, #72]	@ (8006db0 <prvHeapInit+0xb4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <prvHeapInit+0xb4>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a0a      	ldr	r2, [pc, #40]	@ (8006db4 <prvHeapInit+0xb8>)
 8006d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a09      	ldr	r2, [pc, #36]	@ (8006db8 <prvHeapInit+0xbc>)
 8006d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d94:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <prvHeapInit+0xc0>)
 8006d96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d9a:	601a      	str	r2, [r3, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	20000940 	.word	0x20000940
 8006dac:	20004540 	.word	0x20004540
 8006db0:	20004548 	.word	0x20004548
 8006db4:	20004550 	.word	0x20004550
 8006db8:	2000454c 	.word	0x2000454c
 8006dbc:	2000455c 	.word	0x2000455c

08006dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc8:	4b28      	ldr	r3, [pc, #160]	@ (8006e6c <prvInsertBlockIntoFreeList+0xac>)
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e002      	b.n	8006dd4 <prvInsertBlockIntoFreeList+0x14>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d8f7      	bhi.n	8006dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d108      	bne.n	8006e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d118      	bne.n	8006e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b15      	ldr	r3, [pc, #84]	@ (8006e70 <prvInsertBlockIntoFreeList+0xb0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d00d      	beq.n	8006e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e008      	b.n	8006e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <prvInsertBlockIntoFreeList+0xb0>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e003      	b.n	8006e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d002      	beq.n	8006e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20004540 	.word	0x20004540
 8006e70:	20004548 	.word	0x20004548

08006e74 <memset>:
 8006e74:	4402      	add	r2, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	@ (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f000 f826 	bl	8006ee8 <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08009078 	.word	0x08009078
 8006ec0:	08009078 	.word	0x08009078
 8006ec4:	08009078 	.word	0x08009078
 8006ec8:	0800907c 	.word	0x0800907c

08006ecc <memcpy>:
 8006ecc:	440a      	add	r2, r1
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed4:	d100      	bne.n	8006ed8 <memcpy+0xc>
 8006ed6:	4770      	bx	lr
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	d1f9      	bne.n	8006eda <memcpy+0xe>
 8006ee6:	bd10      	pop	{r4, pc}

08006ee8 <_init>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr

08006ef4 <_fini>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr
