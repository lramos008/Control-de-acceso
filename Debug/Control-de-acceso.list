
Control-de-acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021b4  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800907c  0800907c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800907c  0800907c  0001907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009084  08009084  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000453c  20000028  080090b4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004564  080090b4  00024564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bdc  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f3f  00000000  00000000  00038c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0003cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121e  00000000  00000000  0003e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004edc  00000000  00000000  0003f51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5ab  00000000  00000000  000443fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd7d  00000000  00000000  000639a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b8  00000000  00000000  000ff724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001057dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006eb0 	.word	0x08006eb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08006eb0 	.word	0x08006eb0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2104      	movs	r1, #4
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <SELECT+0x18>)
 80004e6:	f002 f987 	bl	80027f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 fee2 	bl	80022b4 <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <DESELECT+0x18>)
 8000502:	f002 f979 	bl	80027f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f001 fed4 	bl	80022b4 <HAL_Delay>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020c00 	.word	0x40020c00

08000514 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <SPI_TxByte+0x30>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2201      	movs	r2, #1
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <SPI_TxByte+0x30>)
 8000536:	f003 fb7a 	bl	8003c2e <HAL_SPI_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200006f8 	.word	0x200006f8

08000548 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000554:	bf00      	nop
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <SPI_TxBuffer+0x30>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b02      	cmp	r3, #2
 8000562:	d1f8      	bne.n	8000556 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000564:	887a      	ldrh	r2, [r7, #2]
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <SPI_TxBuffer+0x30>)
 800056c:	f003 fb5f 	bl	8003c2e <HAL_SPI_Transmit>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200006f8 	.word	0x200006f8

0800057c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000586:	bf00      	nop
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <SPI_RxByte+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	2b02      	cmp	r3, #2
 8000594:	d1f8      	bne.n	8000588 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000596:	1dba      	adds	r2, r7, #6
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <SPI_RxByte+0x34>)
 80005a2:	f003 fc87 	bl	8003eb4 <HAL_SPI_TransmitReceive>

	return data;
 80005a6:	79bb      	ldrb	r3, [r7, #6]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200006f8 	.word	0x200006f8

080005b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005bc:	f7ff ffde 	bl	800057c <SPI_RxByte>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <SD_ReadyWait+0x30>)
 80005d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005de:	f7ff ffcd 	bl	800057c <SPI_RxByte>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d004      	beq.n	80005f6 <SD_ReadyWait+0x26>
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SD_ReadyWait+0x30>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f3      	bne.n	80005de <SD_ReadyWait+0xe>

	return res;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200007ea 	.word	0x200007ea

08000604 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800060a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800060e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000610:	f7ff ff72 	bl	80004f8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e005      	b.n	8000626 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800061a:	20ff      	movs	r0, #255	; 0xff
 800061c:	f7ff ff7a 	bl	8000514 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b09      	cmp	r3, #9
 800062a:	ddf6      	ble.n	800061a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800062c:	f7ff ff56 	bl	80004dc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000644:	2395      	movs	r3, #149	; 0x95
 8000646:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000648:	463b      	mov	r3, r7
 800064a:	2106      	movs	r1, #6
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff7b 	bl	8000548 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	e002      	b.n	800065a <SD_PowerOn+0x56>
	{
		cnt--;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3b01      	subs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800065a:	f7ff ff8f 	bl	800057c <SPI_RxByte>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d002      	beq.n	800066a <SD_PowerOn+0x66>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f4      	bne.n	8000654 <SD_PowerOn+0x50>
	}

	DESELECT();
 800066a:	f7ff ff45 	bl	80004f8 <DESELECT>
	SPI_TxByte(0XFF);
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	f7ff ff50 	bl	8000514 <SPI_TxByte>

	PowerFlag = 1;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_PowerOn+0x80>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000045 	.word	0x20000045

08000688 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <SD_PowerOff+0x14>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000045 	.word	0x20000045

080006a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_CheckPower+0x14>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000045 	.word	0x20000045

080006b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <SD_RxDataBlock+0x5c>)
 80006c4:	22c8      	movs	r2, #200	; 0xc8
 80006c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c8:	f7ff ff58 	bl	800057c <SPI_RxByte>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d104      	bne.n	80006e0 <SD_RxDataBlock+0x28>
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SD_RxDataBlock+0x5c>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f3      	bne.n	80006c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2bfe      	cmp	r3, #254	; 0xfe
 80006e4:	d001      	beq.n	80006ea <SD_RxDataBlock+0x32>
 80006e6:	2300      	movs	r3, #0
 80006e8:	e00f      	b.n	800070a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff5f 	bl	80005b4 <SPI_RxBytePtr>
	} while(len--);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	603a      	str	r2, [r7, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f4      	bne.n	80006ea <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000700:	f7ff ff3c 	bl	800057c <SPI_RxByte>
	SPI_RxByte();
 8000704:	f7ff ff3a 	bl	800057c <SPI_RxByte>

	return TRUE;
 8000708:	2301      	movs	r3, #1
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200007e9 	.word	0x200007e9

08000718 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000728:	f7ff ff52 	bl	80005d0 <SD_ReadyWait>
 800072c:	4603      	mov	r3, r0
 800072e:	2bff      	cmp	r3, #255	; 0xff
 8000730:	d001      	beq.n	8000736 <SD_TxDataBlock+0x1e>
 8000732:	2300      	movs	r3, #0
 8000734:	e02f      	b.n	8000796 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff feeb 	bl	8000514 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2bfd      	cmp	r3, #253	; 0xfd
 8000742:	d020      	beq.n	8000786 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fefd 	bl	8000548 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800074e:	f7ff ff15 	bl	800057c <SPI_RxByte>
		SPI_RxByte();
 8000752:	f7ff ff13 	bl	800057c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000756:	e00b      	b.n	8000770 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000758:	f7ff ff10 	bl	800057c <SPI_RxByte>
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	2b05      	cmp	r3, #5
 8000768:	d006      	beq.n	8000778 <SD_TxDataBlock+0x60>
			i++;
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	3301      	adds	r3, #1
 800076e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	2b40      	cmp	r3, #64	; 0x40
 8000774:	d9f0      	bls.n	8000758 <SD_TxDataBlock+0x40>
 8000776:	e000      	b.n	800077a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000778:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800077a:	bf00      	nop
 800077c:	f7ff fefe 	bl	800057c <SPI_RxByte>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0fa      	beq.n	800077c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	2b05      	cmp	r3, #5
 800078e:	d101      	bne.n	8000794 <SD_TxDataBlock+0x7c>
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	6039      	str	r1, [r7, #0]
 80007a8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007aa:	f7ff ff11 	bl	80005d0 <SD_ReadyWait>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2bff      	cmp	r3, #255	; 0xff
 80007b2:	d001      	beq.n	80007b8 <SD_SendCmd+0x1a>
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e042      	b.n	800083e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff feaa 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0e1b      	lsrs	r3, r3, #24
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea4 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0c1b      	lsrs	r3, r3, #16
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9e 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe98 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe93 	bl	8000514 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b40      	cmp	r3, #64	; 0x40
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x5c>
 80007f4:	2395      	movs	r3, #149	; 0x95
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e007      	b.n	800080a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b48      	cmp	r3, #72	; 0x48
 80007fe:	d102      	bne.n	8000806 <SD_SendCmd+0x68>
 8000800:	2387      	movs	r3, #135	; 0x87
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <SD_SendCmd+0x6c>
	else crc = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe81 	bl	8000514 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b4c      	cmp	r3, #76	; 0x4c
 8000816:	d101      	bne.n	800081c <SD_SendCmd+0x7e>
 8000818:	f7ff feb0 	bl	800057c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000820:	f7ff feac 	bl	800057c <SPI_RxByte>
 8000824:	4603      	mov	r3, r0
 8000826:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da05      	bge.n	800083c <SD_SendCmd+0x9e>
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	3b01      	subs	r3, #1
 8000834:	73bb      	strb	r3, [r7, #14]
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f1      	bne.n	8000820 <SD_SendCmd+0x82>

	return res;
 800083c:	7b7b      	ldrb	r3, [r7, #13]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SD_disk_initialize+0x14>
 8000858:	2301      	movs	r3, #1
 800085a:	e0d6      	b.n	8000a0a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800085c:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <SD_disk_initialize+0x1cc>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <SD_disk_initialize+0x2a>
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <SD_disk_initialize+0x1cc>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	e0cb      	b.n	8000a0a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000872:	f7ff fec7 	bl	8000604 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000876:	f7ff fe31 	bl	80004dc <SELECT>

	/* check disk type */
	type = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800087e:	2100      	movs	r1, #0
 8000880:	2040      	movs	r0, #64	; 0x40
 8000882:	f7ff ff8c 	bl	800079e <SD_SendCmd>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	f040 80a6 	bne.w	80009da <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800088e:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <SD_disk_initialize+0x1d0>)
 8000890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000894:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000896:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800089a:	2048      	movs	r0, #72	; 0x48
 800089c:	f7ff ff7f 	bl	800079e <SD_SendCmd>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d158      	bne.n	8000958 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e00c      	b.n	80008c6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008ac:	7bfc      	ldrb	r4, [r7, #15]
 80008ae:	f7ff fe65 	bl	800057c <SPI_RxByte>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	f104 0310 	add.w	r3, r4, #16
 80008ba:	443b      	add	r3, r7
 80008bc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3301      	adds	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d9ef      	bls.n	80008ac <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	f040 8083 	bne.w	80009da <SD_disk_initialize+0x192>
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	2baa      	cmp	r3, #170	; 0xaa
 80008d8:	d17f      	bne.n	80009da <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008da:	2100      	movs	r1, #0
 80008dc:	2077      	movs	r0, #119	; 0x77
 80008de:	f7ff ff5e 	bl	800079e <SD_SendCmd>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d807      	bhi.n	80008f8 <SD_disk_initialize+0xb0>
 80008e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008ec:	2069      	movs	r0, #105	; 0x69
 80008ee:	f7ff ff56 	bl	800079e <SD_SendCmd>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1eb      	bne.n	80008da <SD_disk_initialize+0x92>
 8000902:	e000      	b.n	8000906 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000904:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <SD_disk_initialize+0x1d0>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d064      	beq.n	80009da <SD_disk_initialize+0x192>
 8000910:	2100      	movs	r1, #0
 8000912:	207a      	movs	r0, #122	; 0x7a
 8000914:	f7ff ff43 	bl	800079e <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d15d      	bne.n	80009da <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e00c      	b.n	800093e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000924:	7bfc      	ldrb	r4, [r7, #15]
 8000926:	f7ff fe29 	bl	800057c <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f104 0310 	add.w	r3, r4, #16
 8000932:	443b      	add	r3, r7
 8000934:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	3301      	adds	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d9ef      	bls.n	8000924 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000944:	7a3b      	ldrb	r3, [r7, #8]
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SD_disk_initialize+0x10a>
 800094e:	230c      	movs	r3, #12
 8000950:	e000      	b.n	8000954 <SD_disk_initialize+0x10c>
 8000952:	2304      	movs	r3, #4
 8000954:	73bb      	strb	r3, [r7, #14]
 8000956:	e040      	b.n	80009da <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000958:	2100      	movs	r1, #0
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	f7ff ff1f 	bl	800079e <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d808      	bhi.n	8000978 <SD_disk_initialize+0x130>
 8000966:	2100      	movs	r1, #0
 8000968:	2069      	movs	r0, #105	; 0x69
 800096a:	f7ff ff18 	bl	800079e <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d801      	bhi.n	8000978 <SD_disk_initialize+0x130>
 8000974:	2302      	movs	r3, #2
 8000976:	e000      	b.n	800097a <SD_disk_initialize+0x132>
 8000978:	2301      	movs	r3, #1
 800097a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d10e      	bne.n	80009a0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000982:	2100      	movs	r1, #0
 8000984:	2077      	movs	r0, #119	; 0x77
 8000986:	f7ff ff0a 	bl	800079e <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d80e      	bhi.n	80009ae <SD_disk_initialize+0x166>
 8000990:	2100      	movs	r1, #0
 8000992:	2069      	movs	r0, #105	; 0x69
 8000994:	f7ff ff03 	bl	800079e <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <SD_disk_initialize+0x166>
 800099e:	e00d      	b.n	80009bc <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a0:	2100      	movs	r1, #0
 80009a2:	2041      	movs	r0, #65	; 0x41
 80009a4:	f7ff fefb 	bl	800079e <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d005      	beq.n	80009ba <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e1      	bne.n	800097c <SD_disk_initialize+0x134>
 80009b8:	e000      	b.n	80009bc <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ba:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d007      	beq.n	80009d6 <SD_disk_initialize+0x18e>
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	2050      	movs	r0, #80	; 0x50
 80009cc:	f7ff fee7 	bl	800079e <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SD_disk_initialize+0x192>
 80009d6:	2300      	movs	r3, #0
 80009d8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <SD_disk_initialize+0x1d4>)
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009e0:	f7ff fd8a 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 80009e4:	f7ff fdca 	bl	800057c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <SD_disk_initialize+0x1cc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SD_disk_initialize+0x1cc>)
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e001      	b.n	8000a04 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a00:	f7ff fe42 	bl	8000688 <SD_PowerOff>
	}

	return Stat;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SD_disk_initialize+0x1cc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	200007e9 	.word	0x200007e9
 8000a1c:	20000044 	.word	0x20000044

08000a20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SD_disk_status+0x14>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e002      	b.n	8000a3a <SD_disk_status+0x1a>
	return Stat;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SD_disk_status+0x28>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000

08000a4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <SD_disk_read+0x1c>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <SD_disk_read+0x20>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e051      	b.n	8000b10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <SD_disk_read+0xcc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SD_disk_read+0x32>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e048      	b.n	8000b10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SD_disk_read+0xd0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <SD_disk_read+0x44>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a90:	f7ff fd24 	bl	80004dc <SELECT>

	if (count == 1)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d111      	bne.n	8000abe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2051      	movs	r0, #81	; 0x51
 8000a9e:	f7ff fe7e 	bl	800079e <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d129      	bne.n	8000afc <SD_disk_read+0xb0>
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f7ff fe03 	bl	80006b8 <SD_RxDataBlock>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <SD_disk_read+0xb0>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	e01e      	b.n	8000afc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2052      	movs	r0, #82	; 0x52
 8000ac2:	f7ff fe6c 	bl	800079e <SD_SendCmd>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d117      	bne.n	8000afc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	68b8      	ldr	r0, [r7, #8]
 8000ad2:	f7ff fdf1 	bl	80006b8 <SD_RxDataBlock>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <SD_disk_read+0xa6>
				buff += 512;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ae2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1ed      	bne.n	8000acc <SD_disk_read+0x80>
 8000af0:	e000      	b.n	8000af4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000af2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	204c      	movs	r0, #76	; 0x4c
 8000af8:	f7ff fe51 	bl	800079e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000afc:	f7ff fcfc 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 8000b00:	f7ff fd3c 	bl	800057c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000044 	.word	0x20000044

08000b20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <SD_disk_write+0x1c>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <SD_disk_write+0x20>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e06b      	b.n	8000c18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <SD_disk_write+0x100>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SD_disk_write+0x32>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e062      	b.n	8000c18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <SD_disk_write+0x100>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SD_disk_write+0x44>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e059      	b.n	8000c18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <SD_disk_write+0x104>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <SD_disk_write+0x56>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b76:	f7ff fcb1 	bl	80004dc <SELECT>

	if (count == 1)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d110      	bne.n	8000ba2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2058      	movs	r0, #88	; 0x58
 8000b84:	f7ff fe0b 	bl	800079e <SD_SendCmd>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d13a      	bne.n	8000c04 <SD_disk_write+0xe4>
 8000b8e:	21fe      	movs	r1, #254	; 0xfe
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fdc1 	bl	8000718 <SD_TxDataBlock>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d033      	beq.n	8000c04 <SD_disk_write+0xe4>
			count = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	e030      	b.n	8000c04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SD_disk_write+0x104>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2077      	movs	r0, #119	; 0x77
 8000bb2:	f7ff fdf4 	bl	800079e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	2057      	movs	r0, #87	; 0x57
 8000bba:	f7ff fdf0 	bl	800079e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2059      	movs	r0, #89	; 0x59
 8000bc2:	f7ff fdec 	bl	800079e <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bcc:	21fc      	movs	r1, #252	; 0xfc
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f7ff fda2 	bl	8000718 <SD_TxDataBlock>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00a      	beq.n	8000bf0 <SD_disk_write+0xd0>
				buff += 512;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000be0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ee      	bne.n	8000bcc <SD_disk_write+0xac>
 8000bee:	e000      	b.n	8000bf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bf2:	21fd      	movs	r1, #253	; 0xfd
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fd8f 	bl	8000718 <SD_TxDataBlock>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c04:	f7ff fc78 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 8000c08:	f7ff fcb8 	bl	800057c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000044 	.word	0x20000044

08000c28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	603a      	str	r2, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	460b      	mov	r3, r1
 8000c36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SD_disk_ioctl+0x1e>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e115      	b.n	8000e72 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d124      	bne.n	8000c9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d012      	beq.n	8000c80 <SD_disk_ioctl+0x58>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	dc1a      	bgt.n	8000c94 <SD_disk_ioctl+0x6c>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <SD_disk_ioctl+0x40>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d006      	beq.n	8000c74 <SD_disk_ioctl+0x4c>
 8000c66:	e015      	b.n	8000c94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c68:	f7ff fd0e 	bl	8000688 <SD_PowerOff>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e0fc      	b.n	8000e6e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c74:	f7ff fcc6 	bl	8000604 <SD_PowerOn>
			res = RES_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c7e:	e0f6      	b.n	8000e6e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	1c5c      	adds	r4, r3, #1
 8000c84:	f7ff fd0c 	bl	80006a0 <SD_CheckPower>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c92:	e0ec      	b.n	8000e6e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c94:	2304      	movs	r3, #4
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c9a:	e0e8      	b.n	8000e6e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c9c:	4b77      	ldr	r3, [pc, #476]	; (8000e7c <SD_disk_ioctl+0x254>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SD_disk_ioctl+0x86>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e0e1      	b.n	8000e72 <SD_disk_ioctl+0x24a>

		SELECT();
 8000cae:	f7ff fc15 	bl	80004dc <SELECT>

		switch (ctrl)
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b0d      	cmp	r3, #13
 8000cb6:	f200 80cb 	bhi.w	8000e50 <SD_disk_ioctl+0x228>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <SD_disk_ioctl+0x98>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000dbb 	.word	0x08000dbb
 8000cc4:	08000cf9 	.word	0x08000cf9
 8000cc8:	08000dab 	.word	0x08000dab
 8000ccc:	08000e51 	.word	0x08000e51
 8000cd0:	08000e51 	.word	0x08000e51
 8000cd4:	08000e51 	.word	0x08000e51
 8000cd8:	08000e51 	.word	0x08000e51
 8000cdc:	08000e51 	.word	0x08000e51
 8000ce0:	08000e51 	.word	0x08000e51
 8000ce4:	08000e51 	.word	0x08000e51
 8000ce8:	08000e51 	.word	0x08000e51
 8000cec:	08000dcd 	.word	0x08000dcd
 8000cf0:	08000df1 	.word	0x08000df1
 8000cf4:	08000e15 	.word	0x08000e15
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2049      	movs	r0, #73	; 0x49
 8000cfc:	f7ff fd4f 	bl	800079e <SD_SendCmd>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 80a8 	bne.w	8000e58 <SD_disk_ioctl+0x230>
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcd2 	bl	80006b8 <SD_RxDataBlock>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 809e 	beq.w	8000e58 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10e      	bne.n	8000d44 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d26:	7d7b      	ldrb	r3, [r7, #21]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	7d3b      	ldrb	r3, [r7, #20]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d3a:	8bfb      	ldrh	r3, [r7, #30]
 8000d3c:	029a      	lsls	r2, r3, #10
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e02e      	b.n	8000da2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d44:	7c7b      	ldrb	r3, [r7, #17]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	09db      	lsrs	r3, r3, #7
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	7d7b      	ldrb	r3, [r7, #21]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 0306 	and.w	r3, r3, #6
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3302      	adds	r3, #2
 8000d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d6c:	7d3b      	ldrb	r3, [r7, #20]
 8000d6e:	099b      	lsrs	r3, r3, #6
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	7cbb      	ldrb	r3, [r7, #18]
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d94:	8bfa      	ldrh	r2, [r7, #30]
 8000d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9a:	3b09      	subs	r3, #9
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000da8:	e056      	b.n	8000e58 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db8:	e055      	b.n	8000e66 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dba:	f7ff fc09 	bl	80005d0 <SD_ReadyWait>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2bff      	cmp	r3, #255	; 0xff
 8000dc2:	d14b      	bne.n	8000e5c <SD_disk_ioctl+0x234>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dca:	e047      	b.n	8000e5c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2049      	movs	r0, #73	; 0x49
 8000dd0:	f7ff fce5 	bl	800079e <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d142      	bne.n	8000e60 <SD_disk_ioctl+0x238>
 8000dda:	2110      	movs	r1, #16
 8000ddc:	6a38      	ldr	r0, [r7, #32]
 8000dde:	f7ff fc6b 	bl	80006b8 <SD_RxDataBlock>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d03b      	beq.n	8000e60 <SD_disk_ioctl+0x238>
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dee:	e037      	b.n	8000e60 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df0:	2100      	movs	r1, #0
 8000df2:	204a      	movs	r0, #74	; 0x4a
 8000df4:	f7ff fcd3 	bl	800079e <SD_SendCmd>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d132      	bne.n	8000e64 <SD_disk_ioctl+0x23c>
 8000dfe:	2110      	movs	r1, #16
 8000e00:	6a38      	ldr	r0, [r7, #32]
 8000e02:	f7ff fc59 	bl	80006b8 <SD_RxDataBlock>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d02b      	beq.n	8000e64 <SD_disk_ioctl+0x23c>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e12:	e027      	b.n	8000e64 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e14:	2100      	movs	r1, #0
 8000e16:	207a      	movs	r0, #122	; 0x7a
 8000e18:	f7ff fcc1 	bl	800079e <SD_SendCmd>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e28:	e00b      	b.n	8000e42 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e2a:	6a3c      	ldr	r4, [r7, #32]
 8000e2c:	1c63      	adds	r3, r4, #1
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	f7ff fba4 	bl	800057c <SPI_RxByte>
 8000e34:	4603      	mov	r3, r0
 8000e36:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d9ef      	bls.n	8000e2a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e50:	2304      	movs	r3, #4
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e56:	e006      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e58:	bf00      	nop
 8000e5a:	e004      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e5c:	bf00      	nop
 8000e5e:	e002      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e64:	bf00      	nop
		}

		DESELECT();
 8000e66:	f7ff fb47 	bl	80004f8 <DESELECT>
		SPI_RxByte();
 8000e6a:	f7ff fb87 	bl	800057c <SPI_RxByte>
	}

	return res;
 8000e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	372c      	adds	r7, #44	; 0x2c
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HandleInput>:
#include "keypad.h"
/*Funciones relacionadas al keypad*/
eventoDisplay HandleInput(FSM *FSM1){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t KeyPressed;
	if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){		//Mientras no se supere el timeout puedo ingresar digito
 8000e88:	f004 ffd2 	bl	8005e30 <xTaskGetTickCount>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d849      	bhi.n	8000f30 <HandleInput+0xb0>
		KeyPressed = GetKey();
 8000e9c:	f000 f852 	bl	8000f44 <GetKey>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73bb      	strb	r3, [r7, #14]
		if(KeyPressed != 0){
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d03f      	beq.n	8000f2a <HandleInput+0xaa>
			if(KeyPressed == BORRAR_DIGITO){
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	2b23      	cmp	r3, #35	; 0x23
 8000eae:	d119      	bne.n	8000ee4 <HandleInput+0x64>
				FSM1->CurrentIndex--;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	799b      	ldrb	r3, [r3, #6]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	719a      	strb	r2, [r3, #6]
				FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	799b      	ldrb	r3, [r3, #6]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	5499      	strb	r1, [r3, r2]
				FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8000ec8:	f004 ffb2 	bl	8005e30 <xTaskGetTickCount>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
				FSM1->CurrentState--;									//Vuelvo al estado anterior
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	79db      	ldrb	r3, [r3, #7]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e02a      	b.n	8000f3a <HandleInput+0xba>
			}
			else{
				if(KeyPressed == ENTER){
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee8:	d105      	bne.n	8000ef6 <HandleInput+0x76>
					/*Esta seccion maneja el caso de secuencia incompleta*/
					FSM1->CurrentState = INCOMPLETO;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2208      	movs	r2, #8
 8000eee:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_SECUENCIA_INCOMPLETA;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e021      	b.n	8000f3a <HandleInput+0xba>
				}
				else{
					/*Esta seccion se encarga de tomar cualquier otro digito*/
					FSM1->Buffer[FSM1->CurrentIndex] = KeyPressed;			//Guardo el digito en el buffer
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	799b      	ldrb	r3, [r3, #6]
 8000efa:	4619      	mov	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7bba      	ldrb	r2, [r7, #14]
 8000f00:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	799b      	ldrb	r3, [r3, #6]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();
 8000f0e:	f004 ff8f 	bl	8005e30 <xTaskGetTickCount>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState++;									//Paso al siguiente estado
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	79db      	ldrb	r3, [r3, #7]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;
 8000f24:	2302      	movs	r3, #2
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e007      	b.n	8000f3a <HandleInput+0xba>
				}

			}
		}
		else{
			eventoEnviado = PANTALLA_IDLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e004      	b.n	8000f3a <HandleInput+0xba>
		}
	}
	else{
		FSM1->CurrentState = TIMEOUT;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2207      	movs	r2, #7
 8000f34:	71da      	strb	r2, [r3, #7]
		eventoEnviado = PANTALLA_TIMEOUT;
 8000f36:	2306      	movs	r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]
	}
	return eventoEnviado;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <GetKey>:

uint8_t GetKey(void){
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
	/*Esta funcion realiza un barrido al keypad matricial 4x4*/
	/*Si se presiona una tecla, devuelve el ascii asociado. Si no, devuelve 0*/
	uint16_t PinRows[ROWS] = {GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <GetKey+0x114>)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t PinCols[COLS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};
 8000f58:	4a40      	ldr	r2, [pc, #256]	; (800105c <GetKey+0x118>)
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f62:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t KeyPressed;
	char Keypad[ROWS][COLS] = {
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <GetKey+0x11c>)
 8000f68:	1d3c      	adds	r4, r7, #4
 8000f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      {'4', '5', '6', 'B'},
	      {'7', '8', '9', 'C'},
	      {'*', '0', '#', 'D'}
	 };
	 /*Escaneo el teclado en busca de 1 tecla presionada. Si hay tecla presionada*/
	 for(uint8_t i = 0; i < ROWS; i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f76:	e066      	b.n	8001046 <GetKey+0x102>
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_SET);					//Prendo y apago secuencialmente las filas
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	3328      	adds	r3, #40	; 0x28
 8000f80:	443b      	add	r3, r7
 8000f82:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4836      	ldr	r0, [pc, #216]	; (8001064 <GetKey+0x120>)
 8000f8c:	f001 fc34 	bl	80027f8 <HAL_GPIO_WritePin>
		 for(uint8_t j = 0; j < COLS; j++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f96:	e041      	b.n	800101c <GetKey+0xd8>
			 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){			//Barro las columnas y verifico si se presiona una tecla
 8000f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3328      	adds	r3, #40	; 0x28
 8000fa0:	443b      	add	r3, r7
 8000fa2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <GetKey+0x120>)
 8000faa:	f001 fc0d 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d12e      	bne.n	8001012 <GetKey+0xce>
				 vTaskDelay(20 / portTICK_RATE_MS);								//Espero 20 ms y reconfirmo el estado. Si no se reconfirma sigue el barrido.
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f004 fdfd 	bl	8005bb4 <vTaskDelay>
				 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){
 8000fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3328      	adds	r3, #40	; 0x28
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4826      	ldr	r0, [pc, #152]	; (8001064 <GetKey+0x120>)
 8000fcc:	f001 fbfc 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11d      	bne.n	8001012 <GetKey+0xce>
					 KeyPressed = (uint8_t) Keypad[i][j];
 8000fd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	3228      	adds	r2, #40	; 0x28
 8000fe2:	443a      	add	r2, r7
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b24      	subs	r3, #36	; 0x24
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);		//Pongo fila a 0 antes de salir de la funcion.
 8000fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3328      	adds	r3, #40	; 0x28
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <GetKey+0x120>)
 8001002:	f001 fbf9 	bl	80027f8 <HAL_GPIO_WritePin>
					 vTaskDelay(150/ portTICK_RATE_MS);
 8001006:	2096      	movs	r0, #150	; 0x96
 8001008:	f004 fdd4 	bl	8005bb4 <vTaskDelay>
					 return KeyPressed;
 800100c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001010:	e01e      	b.n	8001050 <GetKey+0x10c>
		 for(uint8_t j = 0; j < COLS; j++){
 8001012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800101c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001020:	2b03      	cmp	r3, #3
 8001022:	d9b9      	bls.n	8000f98 <GetKey+0x54>
				 }
			 }
		 }
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);
 8001024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3328      	adds	r3, #40	; 0x28
 800102c:	443b      	add	r3, r7
 800102e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <GetKey+0x120>)
 8001038:	f001 fbde 	bl	80027f8 <HAL_GPIO_WritePin>
	 for(uint8_t i = 0; i < ROWS; i++){
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	3301      	adds	r3, #1
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104a:	2b03      	cmp	r3, #3
 800104c:	d994      	bls.n	8000f78 <GetKey+0x34>
	 }
	 return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	372c      	adds	r7, #44	; 0x2c
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	08006ec8 	.word	0x08006ec8
 800105c:	08006ed0 	.word	0x08006ed0
 8001060:	08006ed8 	.word	0x08006ed8
 8001064:	40020800 	.word	0x40020800

08001068 <ClearBuffer>:
		str++;
	}
	return;
}

void ClearBuffer(uint8_t *Buffer, uint8_t size){
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e007      	b.n	800108a <ClearBuffer+0x22>
		Buffer[i] = 0;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3f3      	bcc.n	800107a <ClearBuffer+0x12>
	}
	return;
 8001092:	bf00      	nop
}
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <displayInit>:
#include "screen.h"
extern QueueHandle_t uiQueue;

void displayInit(void){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80010a2:	f000 f917 	bl	80012d4 <ssd1306_Init>
	return;
 80010a6:	bf00      	nop
}
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <displayInsertKeyMsg>:

void displayInsertKeyMsg(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 80010b2:	2305      	movs	r3, #5
 80010b4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f974 	bl	80013a8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 faba 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <displayInsertKeyMsg+0x68>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <displayInsertKeyMsg+0x6c>)
 80010d6:	f000 fa8d 	bl	80015f4 <ssd1306_WriteString>
	x += 15;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	330f      	adds	r3, #15
 80010de:	71fb      	strb	r3, [r7, #7]
	y += 26;
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	331a      	adds	r3, #26
 80010e4:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80010e6:	79ba      	ldrb	r2, [r7, #6]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 faa7 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <displayInsertKeyMsg+0x68>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <displayInsertKeyMsg+0x70>)
 80010fc:	f000 fa7a 	bl	80015f4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001100:	f000 f96a 	bl	80013d8 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 8001104:	2000      	movs	r0, #0
 8001106:	f000 f94f 	bl	80013a8 <ssd1306_Fill>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08009058 	.word	0x08009058
 8001118:	08006ee8 	.word	0x08006ee8
 800111c:	08006ef0 	.word	0x08006ef0

08001120 <displayTimeoutMsg>:

void displayTimeoutMsg(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8001126:	2305      	movs	r3, #5
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 800112a:	2312      	movs	r3, #18
 800112c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f93a 	bl	80013a8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001134:	79ba      	ldrb	r2, [r7, #6]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fa80 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <displayTimeoutMsg+0x3c>)
 8001142:	2201      	movs	r2, #1
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <displayTimeoutMsg+0x40>)
 800114a:	f000 fa53 	bl	80015f4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800114e:	f000 f943 	bl	80013d8 <ssd1306_UpdateScreen>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800904c 	.word	0x0800904c
 8001160:	08006ef8 	.word	0x08006ef8

08001164 <displayIncompleteMsg>:

void displayIncompleteMsg(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 800116a:	2314      	movs	r3, #20
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f918 	bl	80013a8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fa5e 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <displayIncompleteMsg+0x84>)
 8001186:	2201      	movs	r2, #1
 8001188:	9200      	str	r2, [sp, #0]
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <displayIncompleteMsg+0x88>)
 800118e:	f000 fa31 	bl	80015f4 <ssd1306_WriteString>
	x = 10;
 8001192:	230a      	movs	r3, #10
 8001194:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	3312      	adds	r3, #18
 800119a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800119c:	79ba      	ldrb	r2, [r7, #6]
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fa4c 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <displayIncompleteMsg+0x84>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <displayIncompleteMsg+0x8c>)
 80011b2:	f000 fa1f 	bl	80015f4 <ssd1306_WriteString>
	x = 20;
 80011b6:	2314      	movs	r3, #20
 80011b8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	3312      	adds	r3, #18
 80011be:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa3a 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <displayIncompleteMsg+0x84>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <displayIncompleteMsg+0x90>)
 80011d6:	f000 fa0d 	bl	80015f4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011da:	f000 f8fd 	bl	80013d8 <ssd1306_UpdateScreen>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800904c 	.word	0x0800904c
 80011ec:	08006ee8 	.word	0x08006ee8
 80011f0:	08006f04 	.word	0x08006f04
 80011f4:	08006f10 	.word	0x08006f10

080011f8 <displayAccessState>:

void displayAccessState(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 80011fe:	2305      	movs	r3, #5
 8001200:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f8ce 	bl	80013a8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800120c:	79ba      	ldrb	r2, [r7, #6]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fa14 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <displayAccessState+0x5c>)
 800121a:	2201      	movs	r2, #1
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <displayAccessState+0x60>)
 8001222:	f000 f9e7 	bl	80015f4 <ssd1306_WriteString>
	y += 18;
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	3312      	adds	r3, #18
 800122a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800122c:	79ba      	ldrb	r2, [r7, #6]
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fa04 	bl	8001640 <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <displayAccessState+0x5c>)
 800123a:	2201      	movs	r2, #1
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <displayAccessState+0x64>)
 8001242:	f000 f9d7 	bl	80015f4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001246:	f000 f8c7 	bl	80013d8 <ssd1306_UpdateScreen>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800904c 	.word	0x0800904c
 8001258:	08006f18 	.word	0x08006f18
 800125c:	08006f20 	.word	0x08006f20

08001260 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af04      	add	r7, sp, #16
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	2200      	movs	r2, #0
 800128c:	2178      	movs	r1, #120	; 0x78
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <ssd1306_WriteCommand+0x2c>)
 8001290:	f001 fc10 	bl	8002ab4 <HAL_I2C_Mem_Write>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200006a4 	.word	0x200006a4

080012a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	9202      	str	r2, [sp, #8]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	2178      	movs	r1, #120	; 0x78
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <ssd1306_WriteData+0x30>)
 80012c2:	f001 fbf7 	bl	8002ab4 <HAL_I2C_Mem_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200006a4 	.word	0x200006a4

080012d4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012d8:	f7ff ffc2 	bl	8001260 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f004 fc69 	bl	8005bb4 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f9d8 	bl	8001698 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012e8:	2020      	movs	r0, #32
 80012ea:	f7ff ffc1 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff ffbe 	bl	8001270 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012f4:	20b0      	movs	r0, #176	; 0xb0
 80012f6:	f7ff ffbb 	bl	8001270 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012fa:	20c8      	movs	r0, #200	; 0xc8
 80012fc:	f7ff ffb8 	bl	8001270 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffb5 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001306:	2010      	movs	r0, #16
 8001308:	f7ff ffb2 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800130c:	2040      	movs	r0, #64	; 0x40
 800130e:	f7ff ffaf 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f000 f9ac 	bl	8001670 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001318:	20a1      	movs	r0, #161	; 0xa1
 800131a:	f7ff ffa9 	bl	8001270 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800131e:	20a6      	movs	r0, #166	; 0xa6
 8001320:	f7ff ffa6 	bl	8001270 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001324:	20a8      	movs	r0, #168	; 0xa8
 8001326:	f7ff ffa3 	bl	8001270 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800132a:	203f      	movs	r0, #63	; 0x3f
 800132c:	f7ff ffa0 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001330:	20a4      	movs	r0, #164	; 0xa4
 8001332:	f7ff ff9d 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001336:	20d3      	movs	r0, #211	; 0xd3
 8001338:	f7ff ff9a 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff97 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001342:	20d5      	movs	r0, #213	; 0xd5
 8001344:	f7ff ff94 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001348:	20f0      	movs	r0, #240	; 0xf0
 800134a:	f7ff ff91 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800134e:	20d9      	movs	r0, #217	; 0xd9
 8001350:	f7ff ff8e 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001354:	2022      	movs	r0, #34	; 0x22
 8001356:	f7ff ff8b 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800135a:	20da      	movs	r0, #218	; 0xda
 800135c:	f7ff ff88 	bl	8001270 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001360:	2012      	movs	r0, #18
 8001362:	f7ff ff85 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001366:	20db      	movs	r0, #219	; 0xdb
 8001368:	f7ff ff82 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800136c:	2020      	movs	r0, #32
 800136e:	f7ff ff7f 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001372:	208d      	movs	r0, #141	; 0x8d
 8001374:	f7ff ff7c 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001378:	2014      	movs	r0, #20
 800137a:	f7ff ff79 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800137e:	2001      	movs	r0, #1
 8001380:	f000 f98a 	bl	8001698 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f80f 	bl	80013a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800138a:	f000 f825 	bl	80013d8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <ssd1306_Init+0xd0>)
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <ssd1306_Init+0xd0>)
 8001396:	2200      	movs	r2, #0
 8001398:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800139a:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <ssd1306_Init+0xd0>)
 800139c:	2201      	movs	r2, #1
 800139e:	711a      	strb	r2, [r3, #4]
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000448 	.word	0x20000448

080013a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <ssd1306_Fill+0x14>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <ssd1306_Fill+0x16>
 80013bc:	23ff      	movs	r3, #255	; 0xff
 80013be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c2:	4619      	mov	r1, r3
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <ssd1306_Fill+0x2c>)
 80013c6:	f005 fd39 	bl	8006e3c <memset>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000048 	.word	0x20000048

080013d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e016      	b.n	8001412 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	3b50      	subs	r3, #80	; 0x50
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff40 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff3d 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013f6:	2010      	movs	r0, #16
 80013f8:	f7ff ff3a 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	4a08      	ldr	r2, [pc, #32]	; (8001424 <ssd1306_UpdateScreen+0x4c>)
 8001402:	4413      	add	r3, r2
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff4a 	bl	80012a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3301      	adds	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b07      	cmp	r3, #7
 8001416:	d9e5      	bls.n	80013e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000048 	.word	0x20000048

08001428 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db3d      	blt.n	80014be <ssd1306_DrawPixel+0x96>
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	2b3f      	cmp	r3, #63	; 0x3f
 8001446:	d83a      	bhi.n	80014be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d11a      	bne.n	8001484 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	4603      	mov	r3, r0
 8001458:	01db      	lsls	r3, r3, #7
 800145a:	4413      	add	r3, r2
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <ssd1306_DrawPixel+0xa4>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	b25a      	sxtb	r2, r3
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b259      	sxtb	r1, r3
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4603      	mov	r3, r0
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	4413      	add	r3, r2
 800147c:	b2c9      	uxtb	r1, r1
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <ssd1306_DrawPixel+0xa4>)
 8001480:	54d1      	strb	r1, [r2, r3]
 8001482:	e01d      	b.n	80014c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	4603      	mov	r3, r0
 800148e:	01db      	lsls	r3, r3, #7
 8001490:	4413      	add	r3, r2
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <ssd1306_DrawPixel+0xa4>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	b25a      	sxtb	r2, r3
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b259      	sxtb	r1, r3
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	4603      	mov	r3, r0
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	4413      	add	r3, r2
 80014b6:	b2c9      	uxtb	r1, r1
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <ssd1306_DrawPixel+0xa4>)
 80014ba:	54d1      	strb	r1, [r2, r3]
 80014bc:	e000      	b.n	80014c0 <ssd1306_DrawPixel+0x98>
        return;
 80014be:	bf00      	nop
    }
}
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000048 	.word	0x20000048

080014d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4638      	mov	r0, r7
 80014da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014de:	4623      	mov	r3, r4
 80014e0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b1f      	cmp	r3, #31
 80014e6:	d902      	bls.n	80014ee <ssd1306_WriteChar+0x1e>
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b7e      	cmp	r3, #126	; 0x7e
 80014ec:	d901      	bls.n	80014f2 <ssd1306_WriteChar+0x22>
        return 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e079      	b.n	80015e6 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <ssd1306_WriteChar+0x120>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	783b      	ldrb	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	2b80      	cmp	r3, #128	; 0x80
 80014fe:	dc06      	bgt.n	800150e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <ssd1306_WriteChar+0x120>)
 8001502:	885b      	ldrh	r3, [r3, #2]
 8001504:	461a      	mov	r2, r3
 8001506:	787b      	ldrb	r3, [r7, #1]
 8001508:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800150a:	2b40      	cmp	r3, #64	; 0x40
 800150c:	dd01      	ble.n	8001512 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e069      	b.n	80015e6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e04e      	b.n	80015b6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3b20      	subs	r3, #32
 800151e:	7879      	ldrb	r1, [r7, #1]
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4619      	mov	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	440b      	add	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	e036      	b.n	80015a6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <ssd1306_WriteChar+0x120>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <ssd1306_WriteChar+0x120>)
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff ff5d 	bl	8001428 <ssd1306_DrawPixel>
 800156e:	e017      	b.n	80015a0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <ssd1306_WriteChar+0x120>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <ssd1306_WriteChar+0x120>)
 8001580:	885b      	ldrh	r3, [r3, #2]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	f7ff ff44 	bl	8001428 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	783b      	ldrb	r3, [r7, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d3c3      	bcc.n	8001538 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	787b      	ldrb	r3, [r7, #1]
 80015b8:	461a      	mov	r2, r3
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4293      	cmp	r3, r2
 80015be:	d3ab      	bcc.n	8001518 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <ssd1306_WriteChar+0x120>)
 80015c2:	881a      	ldrh	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <ssd1306_WriteChar+0x108>
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3b20      	subs	r3, #32
 80015d0:	440b      	add	r3, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	e001      	b.n	80015dc <ssd1306_WriteChar+0x10c>
 80015d8:	783b      	ldrb	r3, [r7, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <ssd1306_WriteChar+0x120>)
 80015e2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000448 	.word	0x20000448

080015f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4638      	mov	r0, r7
 80015fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001602:	e013      	b.n	800162c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7818      	ldrb	r0, [r3, #0]
 8001608:	7e3b      	ldrb	r3, [r7, #24]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	463b      	mov	r3, r7
 800160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001610:	f7ff ff5e 	bl	80014d0 <ssd1306_WriteChar>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d002      	beq.n	8001626 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	e008      	b.n	8001638 <ssd1306_WriteString+0x44>
        }
        str++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e7      	bne.n	8001604 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	781b      	ldrb	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <ssd1306_SetCursor+0x2c>)
 8001656:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <ssd1306_SetCursor+0x2c>)
 800165e:	805a      	strh	r2, [r3, #2]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000448 	.word	0x20000448

08001670 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800167a:	2381      	movs	r3, #129	; 0x81
 800167c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fdf5 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fdf1 	bl	8001270 <ssd1306_WriteCommand>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016a8:	23af      	movs	r3, #175	; 0xaf
 80016aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <ssd1306_SetDisplayOn+0x38>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	715a      	strb	r2, [r3, #5]
 80016b2:	e004      	b.n	80016be <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016b4:	23ae      	movs	r3, #174	; 0xae
 80016b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <ssd1306_SetDisplayOn+0x38>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fdd5 	bl	8001270 <ssd1306_WriteCommand>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000448 	.word	0x20000448

080016d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <vApplicationGetIdleTaskMemory+0x2c>)
 80016e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <vApplicationGetIdleTaskMemory+0x30>)
 80016ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000450 	.word	0x20000450
 8001704:	200004a4 	.word	0x200004a4

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170e:	f000 fd8f 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001712:	f000 f84b 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001716:	f000 f943 	bl	80019a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800171a:	f000 f917 	bl	800194c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800171e:	f000 f8b1 	bl	8001884 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001722:	f000 f8dd 	bl	80018e0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001726:	f003 fb89 	bl	8004e3c <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoDisplay));
 800172a:	2200      	movs	r2, #0
 800172c:	2101      	movs	r1, #1
 800172e:	2001      	movs	r0, #1
 8001730:	f003 fd64 	bl	80051fc <xQueueGenericCreate>
 8001734:	4603      	mov	r3, r0
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <main+0x84>)
 8001738:	6013      	str	r3, [r2, #0]
  sequenceQueue = xQueueCreate(6, sizeof(char));
 800173a:	2200      	movs	r2, #0
 800173c:	2101      	movs	r1, #1
 800173e:	2006      	movs	r0, #6
 8001740:	f003 fd5c 	bl	80051fc <xQueueGenericCreate>
 8001744:	4603      	mov	r3, r0
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <main+0x88>)
 8001748:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 800174a:	2300      	movs	r3, #0
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2304      	movs	r3, #4
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	490f      	ldr	r1, [pc, #60]	; (8001794 <main+0x8c>)
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <main+0x90>)
 800175a:	f004 f8f4 	bl	8005946 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(SavingOnSD, "Tarea 02", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800175e:	2300      	movs	r3, #0
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	2301      	movs	r3, #1
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	490c      	ldr	r1, [pc, #48]	; (800179c <main+0x94>)
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <main+0x98>)
 800176e:	f004 f8ea 	bl	8005946 <xTaskCreate>
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8001772:	2300      	movs	r3, #0
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	2300      	movs	r3, #0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	4909      	ldr	r1, [pc, #36]	; (80017a4 <main+0x9c>)
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <main+0xa0>)
 8001782:	f004 f8e0 	bl	8005946 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001786:	f004 fa49 	bl	8005c1c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178a:	e7fe      	b.n	800178a <main+0x82>
 800178c:	20000798 	.word	0x20000798
 8001790:	2000079c 	.word	0x2000079c
 8001794:	08006f2c 	.word	0x08006f2c
 8001798:	080020e5 	.word	0x080020e5
 800179c:	08006f38 	.word	0x08006f38
 80017a0:	08001efd 	.word	0x08001efd
 80017a4:	08006f44 	.word	0x08006f44
 80017a8:	080021d1 	.word	0x080021d1

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2230      	movs	r2, #48	; 0x30
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fb3e 	bl	8006e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <SystemClock_Config+0xd0>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a28      	ldr	r2, [pc, #160]	; (800187c <SystemClock_Config+0xd0>)
 80017da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <SystemClock_Config+0xd0>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <SystemClock_Config+0xd4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <SystemClock_Config+0xd4>)
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <SystemClock_Config+0xd4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001820:	2310      	movs	r3, #16
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001824:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800182a:	2304      	movs	r3, #4
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800182e:	2307      	movs	r3, #7
 8001830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fca6 	bl	8003188 <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001842:	f000 f96e 	bl	8001b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2102      	movs	r1, #2
 8001862:	4618      	mov	r0, r3
 8001864:	f001 ff08 	bl	8003678 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800186e:	f000 f958 	bl	8001b22 <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	; 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f000 ffb3 	bl	800282c <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f929 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200006a4 	.word	0x200006a4
 80018d8:	40005400 	.word	0x40005400
 80018dc:	00061a80 	.word	0x00061a80

080018e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <MX_SPI3_Init+0x64>)
 80018e6:	4a18      	ldr	r2, [pc, #96]	; (8001948 <MX_SPI3_Init+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_SPI3_Init+0x64>)
 80018ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_SPI3_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_SPI3_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_SPI3_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_SPI3_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_SPI3_Init+0x64>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_SPI3_Init+0x64>)
 8001914:	2210      	movs	r2, #16
 8001916:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_SPI3_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_SPI3_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_SPI3_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_SPI3_Init+0x64>)
 800192c:	220a      	movs	r2, #10
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_SPI3_Init+0x64>)
 8001932:	f002 f8f3 	bl	8003b1c <HAL_SPI_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800193c:	f000 f8f1 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200006f8 	.word	0x200006f8
 8001948:	40003c00 	.word	0x40003c00

0800194c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_USART2_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001984:	f002 ff96 	bl	80048b4 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f000 f8c8 	bl	8001b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000750 	.word	0x20000750
 800199c:	40004400 	.word	0x40004400

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a46      	ldr	r2, [pc, #280]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <MX_GPIO_Init+0x154>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <MX_GPIO_Init+0x154>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2120      	movs	r1, #32
 8001a46:	482c      	ldr	r0, [pc, #176]	; (8001af8 <MX_GPIO_Init+0x158>)
 8001a48:	f000 fed6 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001a52:	482a      	ldr	r0, [pc, #168]	; (8001afc <MX_GPIO_Init+0x15c>)
 8001a54:	f000 fed0 	bl	80027f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	4828      	ldr	r0, [pc, #160]	; (8001b00 <MX_GPIO_Init+0x160>)
 8001a5e:	f000 fecb 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4820      	ldr	r0, [pc, #128]	; (8001afc <MX_GPIO_Init+0x15c>)
 8001a7a:	f000 fd21 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a7e:	230f      	movs	r3, #15
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481a      	ldr	r0, [pc, #104]	; (8001afc <MX_GPIO_Init+0x15c>)
 8001a92:	f000 fd15 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a96:	2320      	movs	r3, #32
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <MX_GPIO_Init+0x158>)
 8001aae:	f000 fd07 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ab2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001ab6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_GPIO_Init+0x15c>)
 8001acc:	f000 fcf8 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_GPIO_Init+0x160>)
 8001ae8:	f000 fcea 	bl	80024c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d101      	bne.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b16:	f000 fbad 	bl	8002274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b26:	b672      	cpsid	i
}
 8001b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <Error_Handler+0x8>

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_MspInit+0x54>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_MspInit+0x54>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_MspInit+0x54>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_MspInit+0x54>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_MspInit+0x54>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_MspInit+0x54>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	f06f 0001 	mvn.w	r0, #1
 8001b72:	f000 fc7b 	bl	800246c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_I2C_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12b      	bne.n	8001bfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <HAL_I2C_MspInit+0x8c>)
 8001bde:	f000 fc6f 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_SPI_MspInit+0x84>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12c      	bne.n	8001c90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c80:	2306      	movs	r3, #6
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c8c:	f000 fc18 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40003c00 	.word	0x40003c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020800 	.word	0x40020800

08001ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12b      	bne.n	8001d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1a:	f000 fbd1 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_InitTick+0xe8>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <HAL_InitTick+0xe8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_InitTick+0xe8>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d60:	f107 0210 	add.w	r2, r7, #16
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 fea4 	bl	8003ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d7a:	f001 fe75 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8001d7e:	6378      	str	r0, [r7, #52]	; 0x34
 8001d80:	e004      	b.n	8001d8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d82:	f001 fe71 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8001d86:	4603      	mov	r3, r0
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <HAL_InitTick+0xec>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	3b01      	subs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_InitTick+0xf0>)
 8001d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_InitTick+0xf0>)
 8001da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_InitTick+0xf0>)
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_InitTick+0xf0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_InitTick+0xf0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_InitTick+0xf0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <HAL_InitTick+0xf0>)
 8001dc4:	f002 fb02 	bl	80043cc <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11b      	bne.n	8001e0e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <HAL_InitTick+0xf0>)
 8001dd8:	f002 fb52 	bl	8004480 <HAL_TIM_Base_Start_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dea:	201c      	movs	r0, #28
 8001dec:	f000 fb5a 	bl	80024a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d808      	bhi.n	8001e08 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001df6:	2200      	movs	r2, #0
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	201c      	movs	r0, #28
 8001dfc:	f000 fb36 	bl	800246c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_InitTick+0xf4>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3738      	adds	r7, #56	; 0x38
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	200007a0 	.word	0x200007a0
 8001e28:	20000008 	.word	0x20000008

08001e2c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <SDTimer_Handler+0x40>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <SDTimer_Handler+0x40>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <SDTimer_Handler+0x40>)
 8001e46:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <SDTimer_Handler+0x44>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <SDTimer_Handler+0x34>
    Timer2--;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <SDTimer_Handler+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SDTimer_Handler+0x44>)
 8001e5e:	701a      	strb	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200007e9 	.word	0x200007e9
 8001e70:	200007ea 	.word	0x200007ea

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <TIM2_IRQHandler+0x30>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <TIM2_IRQHandler+0x30>)
 8001eb0:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <TIM2_IRQHandler+0x30>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d904      	bls.n	8001ec6 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <TIM2_IRQHandler+0x30>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001ec2:	f7ff ffb3 	bl	8001e2c <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <TIM2_IRQHandler+0x34>)
 8001ec8:	f002 fb3c 	bl	8004544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200007e8 	.word	0x200007e8
 8001ed4:	200007a0 	.word	0x200007a0

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <KeypadScanning>:

void VoiceProcessing(void *pvParameters){

}

void KeypadScanning (void *pvParameters){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t keyPressed;
	FSM *FSM1 = &StateMachine;
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <KeypadScanning+0x1e0>)
 8001f06:	60fb      	str	r3, [r7, #12]
	FSM1->CurrentState = ESPERA_DIGITO_1;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	71da      	strb	r2, [r3, #7]
	/*Inicio el funcionamiento con la pantalla inicial*/
	eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	72bb      	strb	r3, [r7, #10]
	xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <KeypadScanning+0x1e4>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	f107 010a 	add.w	r1, r7, #10
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	f003 f9c6 	bl	80052b0 <xQueueGenericSend>
	while(1){
		switch(FSM1->CurrentState){
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	79db      	ldrb	r3, [r3, #7]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	f200 80ba 	bhi.w	80020a2 <KeypadScanning+0x1a6>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <KeypadScanning+0x38>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f59 	.word	0x08001f59
 8001f38:	08001fb1 	.word	0x08001fb1
 8001f3c:	08001fbd 	.word	0x08001fbd
 8001f40:	08001fc9 	.word	0x08001fc9
 8001f44:	08001fd5 	.word	0x08001fd5
 8001f48:	08001fe1 	.word	0x08001fe1
 8001f4c:	08001fed 	.word	0x08001fed
 8001f50:	08002077 	.word	0x08002077
 8001f54:	0800208d 	.word	0x0800208d
		case ESPERA_DIGITO_1:
			/*Parseo la primer tecla*/
			keyPressed = GetKey();
 8001f58:	f7fe fff4 	bl	8000f44 <GetKey>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	72fb      	strb	r3, [r7, #11]
			if(keyPressed != 0){
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d021      	beq.n	8001faa <KeypadScanning+0xae>
            	if((keyPressed != BORRAR_DIGITO) && (keyPressed != ENTER)){
 8001f66:	7afb      	ldrb	r3, [r7, #11]
 8001f68:	2b23      	cmp	r3, #35	; 0x23
 8001f6a:	f000 80a5 	beq.w	80020b8 <KeypadScanning+0x1bc>
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	2b2a      	cmp	r3, #42	; 0x2a
 8001f72:	f000 80a1 	beq.w	80020b8 <KeypadScanning+0x1bc>
					FSM1->CurrentIndex = 0;												//Reinicializo indice del buffer
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	719a      	strb	r2, [r3, #6]
					FSM1->Buffer[FSM1->CurrentIndex] = keyPressed;						//Guardo el primer digito
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	799b      	ldrb	r3, [r3, #6]
 8001f80:	4619      	mov	r1, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	7afa      	ldrb	r2, [r7, #11]
 8001f86:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	799b      	ldrb	r3, [r3, #6]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();								//Guardo tiempo de inicio para el timeout
 8001f94:	f003 ff4c 	bl	8005e30 <xTaskGetTickCount>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState = ESPERA_DIGITO_2;								//Config estado para parsear la sig tecla
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;							//Defino indicaciones para el display
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	72bb      	strb	r3, [r7, #10]
            	}
			}
			else{
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
			}
			break;
 8001fa8:	e086      	b.n	80020b8 <KeypadScanning+0x1bc>
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	72bb      	strb	r3, [r7, #10]
			break;
 8001fae:	e083      	b.n	80020b8 <KeypadScanning+0x1bc>
		case ESPERA_DIGITO_2:
			eventoEnviado = HandleInput(FSM1);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7fe ff65 	bl	8000e80 <HandleInput>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	72bb      	strb	r3, [r7, #10]
			break;
 8001fba:	e080      	b.n	80020be <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_3:
			eventoEnviado = HandleInput(FSM1);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7fe ff5f 	bl	8000e80 <HandleInput>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	72bb      	strb	r3, [r7, #10]
			break;
 8001fc6:	e07a      	b.n	80020be <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_4:
			eventoEnviado = HandleInput(FSM1);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7fe ff59 	bl	8000e80 <HandleInput>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	72bb      	strb	r3, [r7, #10]
			break;
 8001fd2:	e074      	b.n	80020be <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_5:
			eventoEnviado = HandleInput(FSM1);
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe ff53 	bl	8000e80 <HandleInput>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	72bb      	strb	r3, [r7, #10]
			break;
 8001fde:	e06e      	b.n	80020be <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_6:
			eventoEnviado = HandleInput(FSM1);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7fe ff4d 	bl	8000e80 <HandleInput>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	72bb      	strb	r3, [r7, #10]
			break;
 8001fea:	e068      	b.n	80020be <KeypadScanning+0x1c2>
		case ESPERA_ENTER:
			if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8001fec:	f003 ff20 	bl	8005e30 <xTaskGetTickCount>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d834      	bhi.n	800206a <KeypadScanning+0x16e>
				keyPressed = GetKey();
 8002000:	f7fe ffa0 	bl	8000f44 <GetKey>
 8002004:	4603      	mov	r3, r0
 8002006:	72fb      	strb	r3, [r7, #11]
				if(keyPressed != 0){
 8002008:	7afb      	ldrb	r3, [r7, #11]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02a      	beq.n	8002064 <KeypadScanning+0x168>
					if(keyPressed == BORRAR_DIGITO){
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	2b23      	cmp	r3, #35	; 0x23
 8002012:	d119      	bne.n	8002048 <KeypadScanning+0x14c>
						FSM1->CurrentIndex--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	799b      	ldrb	r3, [r3, #6]
 8002018:	3b01      	subs	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	719a      	strb	r2, [r3, #6]
						FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	799b      	ldrb	r3, [r3, #6]
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]
						FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 800202c:	f003 ff00 	bl	8005e30 <xTaskGetTickCount>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	609a      	str	r2, [r3, #8]
						FSM1->CurrentState--;									//Vuelvo al estado anterior
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	79db      	ldrb	r3, [r3, #7]
 800203a:	3b01      	subs	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	71da      	strb	r2, [r3, #7]
						eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8002042:	2303      	movs	r3, #3
 8002044:	72bb      	strb	r3, [r7, #10]
			else{
				FSM1->CurrentState = TIMEOUT;
				eventoEnviado = PANTALLA_TIMEOUT;

			}
			break;
 8002046:	e039      	b.n	80020bc <KeypadScanning+0x1c0>
						if(keyPressed == ENTER){
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	2b2a      	cmp	r3, #42	; 0x2a
 800204c:	d136      	bne.n	80020bc <KeypadScanning+0x1c0>
							eventoEnviado = PANTALLA_ACCESO_CONCEDIDO;
 800204e:	2304      	movs	r3, #4
 8002050:	72bb      	strb	r3, [r7, #10]
							ClearBuffer(FSM1->Buffer, 6);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2106      	movs	r1, #6
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f806 	bl	8001068 <ClearBuffer>
							FSM1->CurrentState = ESPERA_DIGITO_1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	71da      	strb	r2, [r3, #7]
			break;
 8002062:	e02b      	b.n	80020bc <KeypadScanning+0x1c0>
					eventoEnviado = PANTALLA_IDLE;								//No actualizar la pantalla
 8002064:	2300      	movs	r3, #0
 8002066:	72bb      	strb	r3, [r7, #10]
			break;
 8002068:	e028      	b.n	80020bc <KeypadScanning+0x1c0>
				FSM1->CurrentState = TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2207      	movs	r2, #7
 800206e:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_TIMEOUT;
 8002070:	2306      	movs	r3, #6
 8002072:	72bb      	strb	r3, [r7, #10]
			break;
 8002074:	e022      	b.n	80020bc <KeypadScanning+0x1c0>
		case TIMEOUT:
			ClearBuffer(FSM1->Buffer, 6);								//Limpio buffer y vuelvo a estado inicial
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2106      	movs	r1, #6
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fff4 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002086:	2300      	movs	r3, #0
 8002088:	72bb      	strb	r3, [r7, #10]
			break;
 800208a:	e018      	b.n	80020be <KeypadScanning+0x1c2>
		case INCOMPLETO:
			ClearBuffer(FSM1->Buffer, 6);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2106      	movs	r1, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ffe9 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 800209c:	2300      	movs	r3, #0
 800209e:	72bb      	strb	r3, [r7, #10]
			break;
 80020a0:	e00d      	b.n	80020be <KeypadScanning+0x1c2>
		default:
			ClearBuffer(FSM1->Buffer, 6);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2106      	movs	r1, #6
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe ffde 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	72bb      	strb	r3, [r7, #10]
			break;
 80020b6:	e002      	b.n	80020be <KeypadScanning+0x1c2>
			break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <KeypadScanning+0x1c2>
			break;
 80020bc:	bf00      	nop
		}
		/*Si el evento es PANTALLA_IDLE no se envian indicaciones al display*/
		/*En ese caso se deja la pantalla previa*/
		if(eventoEnviado != PANTALLA_IDLE) xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f43f af2f 	beq.w	8001f24 <KeypadScanning+0x28>
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <KeypadScanning+0x1e4>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f107 010a 	add.w	r1, r7, #10
 80020ce:	2300      	movs	r3, #0
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	f003 f8ec 	bl	80052b0 <xQueueGenericSend>
		switch(FSM1->CurrentState){
 80020d8:	e724      	b.n	8001f24 <KeypadScanning+0x28>
 80020da:	bf00      	nop
 80020dc:	200007ec 	.word	0x200007ec
 80020e0:	20000798 	.word	0x20000798

080020e4 <ScreenManager>:
	}
}

void ScreenManager  (void *pvParameters){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoRecibido = PANTALLA_INGRESE_CLAVE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	737b      	strb	r3, [r7, #13]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80020f0:	230a      	movs	r3, #10
 80020f2:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 26;
 80020f4:	231a      	movs	r3, #26
 80020f6:	73bb      	strb	r3, [r7, #14]
	displayInit();
 80020f8:	f7fe ffd1 	bl	800109e <displayInit>
	while(1){
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <ScreenManager+0xdc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f107 010d 	add.w	r1, r7, #13
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	4618      	mov	r0, r3
 800210a:	f003 f9cf 	bl	80054ac <xQueueReceive>
		switch(eventoRecibido){
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	2b07      	cmp	r3, #7
 8002112:	d853      	bhi.n	80021bc <ScreenManager+0xd8>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <ScreenManager+0x38>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	080021bd 	.word	0x080021bd
 8002120:	0800213d 	.word	0x0800213d
 8002124:	08002147 	.word	0x08002147
 8002128:	0800216d 	.word	0x0800216d
 800212c:	080021af 	.word	0x080021af
 8002130:	080021bd 	.word	0x080021bd
 8002134:	08002193 	.word	0x08002193
 8002138:	080021a1 	.word	0x080021a1
		case PANTALLA_INGRESE_CLAVE:
			x = 10;
 800213c:	230a      	movs	r3, #10
 800213e:	73fb      	strb	r3, [r7, #15]
			displayInsertKeyMsg();
 8002140:	f7fe ffb4 	bl	80010ac <displayInsertKeyMsg>
			break;
 8002144:	e03b      	b.n	80021be <ScreenManager+0xda>
		case PANTALLA_AÑADIR_ENTRADA:
			ssd1306_SetCursor(x, y);
 8002146:	7bba      	ldrb	r2, [r7, #14]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fa77 	bl	8001640 <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <ScreenManager+0xe0>)
 8002154:	2201      	movs	r2, #1
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215a:	481b      	ldr	r0, [pc, #108]	; (80021c8 <ScreenManager+0xe4>)
 800215c:	f7ff fa4a 	bl	80015f4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002160:	f7ff f93a 	bl	80013d8 <ssd1306_UpdateScreen>
			x += 16;													//Avanzo una posición en pantalla acorde al font seleccionado
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	3310      	adds	r3, #16
 8002168:	73fb      	strb	r3, [r7, #15]
			break;
 800216a:	e028      	b.n	80021be <ScreenManager+0xda>
		case PANTALLA_BORRAR_ENTRADA:
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3b10      	subs	r3, #16
 8002170:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(x, y);
 8002172:	7bba      	ldrb	r2, [r7, #14]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fa61 	bl	8001640 <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <ScreenManager+0xe0>)
 8002180:	2201      	movs	r2, #1
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <ScreenManager+0xe8>)
 8002188:	f7ff fa34 	bl	80015f4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800218c:	f7ff f924 	bl	80013d8 <ssd1306_UpdateScreen>
			break;
 8002190:	e015      	b.n	80021be <ScreenManager+0xda>
		case PANTALLA_TIMEOUT:
			displayTimeoutMsg();
 8002192:	f7fe ffc5 	bl	8001120 <displayTimeoutMsg>
			HAL_Delay(3000);											//Timer bloqueante para evitar el ingreso de otra secuencia
 8002196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800219a:	f000 f88b 	bl	80022b4 <HAL_Delay>
			break;														//mientras se muestra el mensaje.
 800219e:	e00e      	b.n	80021be <ScreenManager+0xda>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			displayIncompleteMsg();
 80021a0:	f7fe ffe0 	bl	8001164 <displayIncompleteMsg>
			HAL_Delay(3000);
 80021a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021a8:	f000 f884 	bl	80022b4 <HAL_Delay>
			break;
 80021ac:	e007      	b.n	80021be <ScreenManager+0xda>
		case PANTALLA_ACCESO_CONCEDIDO:
			displayAccessState();
 80021ae:	f7ff f823 	bl	80011f8 <displayAccessState>
			HAL_Delay(3000);
 80021b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021b6:	f000 f87d 	bl	80022b4 <HAL_Delay>
			break;
 80021ba:	e000      	b.n	80021be <ScreenManager+0xda>
			break;
		case PANTALLA_IDLE:
			/*No hacer nada*/
			break;
		default:
			break;
 80021bc:	bf00      	nop
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 80021be:	e79d      	b.n	80020fc <ScreenManager+0x18>
 80021c0:	20000798 	.word	0x20000798
 80021c4:	08009058 	.word	0x08009058
 80021c8:	08006f50 	.word	0x08006f50
 80021cc:	08006f54 	.word	0x08006f54

080021d0 <IdleTask>:

		}

	}
}
void IdleTask(void *pvParameters){
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	while(1){
 80021d8:	e7fe      	b.n	80021d8 <IdleTask+0x8>
	...

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021e0:	f7ff fe7a 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800220a:	f004 fe1f 	bl	8006e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7ff fa7b 	bl	8001708 <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002214:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002220:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 8002224:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002228:	20004564 	.word	0x20004564

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_Init+0x40>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_Init+0x40>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_Init+0x40>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f8fc 	bl	8002456 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	200f      	movs	r0, #15
 8002260:	f7ff fd68 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff fc62 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000000c 	.word	0x2000000c
 8002298:	200007f8 	.word	0x200007f8

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200007f8 	.word	0x200007f8

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000000c 	.word	0x2000000c

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff4c 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247e:	f7ff ff61 	bl	8002344 <__NVIC_GetPriorityGrouping>
 8002482:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	6978      	ldr	r0, [r7, #20]
 800248a:	f7ff ffb1 	bl	80023f0 <NVIC_EncodePriority>
 800248e:	4602      	mov	r2, r0
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff80 	bl	800239c <__NVIC_SetPriority>
}
 800249c:	bf00      	nop
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff54 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e159      	b.n	8002790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8148 	bne.w	800278a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a2 	beq.w	800278a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_GPIO_Init+0x2f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x202>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x1fe>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_GPIO_Init+0x2f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x1fa>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_GPIO_Init+0x2fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x1f6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_GPIO_Init+0x300>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x1f2>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_GPIO_Init+0x304>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f aea2 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e12b      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff f996 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002890:	f001 f8ea 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a81      	ldr	r2, [pc, #516]	; (8002aa0 <HAL_I2C_Init+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d807      	bhi.n	80028b0 <HAL_I2C_Init+0x84>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <HAL_I2C_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x92>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <HAL_I2C_Init+0x27c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_I2C_Init+0x280>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_I2C_Init+0x274>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d802      	bhi.n	8002900 <HAL_I2C_Init+0xd4>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	e009      	b.n	8002914 <HAL_I2C_Init+0xe8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <HAL_I2C_Init+0x284>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	3301      	adds	r3, #1
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	; (8002aa0 <HAL_I2C_Init+0x274>)
 8002930:	428b      	cmp	r3, r1
 8002932:	d819      	bhi.n	8002968 <HAL_I2C_Init+0x13c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002948:	400b      	ands	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_I2C_Init+0x138>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e59      	subs	r1, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fbb1 f3f3 	udiv	r3, r1, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	e051      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e04f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_I2C_Init+0x168>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e012      	b.n	80029ba <HAL_I2C_Init+0x18e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x196>
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e58      	subs	r0, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6911      	ldr	r1, [r2, #16]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	001e847f 	.word	0x001e847f
 8002aa8:	003d08ff 	.word	0x003d08ff
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ace:	f7ff fbe5 	bl	800229c <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	f040 80d9 	bne.w	8002c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2319      	movs	r3, #25
 8002ae8:	2201      	movs	r2, #1
 8002aea:	496d      	ldr	r1, [pc, #436]	; (8002ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f971 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0cc      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Mem_Write+0x56>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0c5      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d007      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2221      	movs	r2, #33	; 0x21
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b72:	88f8      	ldrh	r0, [r7, #6]
 8002b74:	893a      	ldrh	r2, [r7, #8]
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4603      	mov	r3, r0
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f890 	bl	8002ca8 <I2C_RequestMemoryWrite>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d052      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e081      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa36 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11b      	bne.n	8002c34 <HAL_I2C_Mem_Write+0x180>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1aa      	bne.n	8002b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fa29 	bl	8003098 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e016      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f878 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf8:	d103      	bne.n	8002d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e05f      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <I2C_RequestMemoryWrite+0x128>)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8d3 	bl	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e04c      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f95e 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d107      	bne.n	8002d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02b      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	e021      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	6a39      	ldr	r1, [r7, #32]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f938 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d107      	bne.n	8002db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e005      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	00010002 	.word	0x00010002

08002dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	e048      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d044      	beq.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7ff fa55 	bl	800229c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d139      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10d      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	e00c      	b.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d116      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e023      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10d      	bne.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	e00c      	b.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d093      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed6:	e071      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d123      	bne.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f043 0204 	orr.w	r2, r3, #4
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e067      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d041      	beq.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7ff f9b0 	bl	800229c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d136      	bne.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10c      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e021      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10c      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e00b      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f af6d 	bne.w	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f886 	bl	8003128 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff f935 	bl	800229c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f83e 	bl	8003128 <I2C_IsAcknowledgeFailed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d028      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7ff f8ed 	bl	800229c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d016      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d1c3      	bne.n	80030a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d11b      	bne.n	8003178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e267      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b7e      	ldr	r3, [pc, #504]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e242      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6c      	ldr	r2, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b69      	ldr	r3, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff f82c 	bl	800229c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7ff f828 	bl	800229c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e207      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7ff f818 	bl	800229c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7ff f814 	bl	800229c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1f3      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1c7      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCC_OscConfig+0x244>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe ffcd 	bl	800229c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fe ffc9 	bl	800229c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1a8      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4925      	ldr	r1, [pc, #148]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x244>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe ffac 	bl	800229c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fe ffa8 	bl	800229c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e187      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d036      	beq.n	80033e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x248>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe ff8c 	bl	800229c <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe ff88 	bl	800229c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e167      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
 80033a6:	e01b      	b.n	80033e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x248>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe ff75 	bl	800229c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e00e      	b.n	80033d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe ff71 	bl	800229c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d907      	bls.n	80033d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e150      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470000 	.word	0x42470000
 80033d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ea      	bne.n	80033b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8097 	beq.w	800351c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b7a      	ldr	r3, [pc, #488]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b74      	ldr	r3, [pc, #464]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a73      	ldr	r2, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe ff31 	bl	800229c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe ff2d 	bl	800229c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e10c      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x2ea>
 8003464:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x324>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x30c>
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5e      	ldr	r2, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x324>
 8003494:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a54      	ldr	r2, [pc, #336]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fef2 	bl	800229c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe feee 	bl	800229c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0cb      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ee      	beq.n	80034bc <HAL_RCC_OscConfig+0x334>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fedc 	bl	800229c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe fed8 	bl	800229c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0b5      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ee      	bne.n	80034e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a1 	beq.w	8003668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d05c      	beq.n	80035ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d141      	bne.n	80035be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe feac 	bl	800229c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fea8 	bl	800229c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e087      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	491b      	ldr	r1, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe fe81 	bl	800229c <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fe7d 	bl	800229c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e05c      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x416>
 80035bc:	e054      	b.n	8003668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fe6a 	bl	800229c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fe66 	bl	800229c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e045      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x444>
 80035ea:	e03d      	b.n	8003668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e038      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40007000 	.word	0x40007000
 8003600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d028      	beq.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d121      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d11a      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	4293      	cmp	r3, r2
 800363e:	d111      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0cc      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90c      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d044      	beq.n	8003798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	2b03      	cmp	r3, #3
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e067      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4934      	ldr	r1, [pc, #208]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fe fd98 	bl	800229c <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fe fd94 	bl	800229c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e04f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20c      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fa88 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00
 8003834:	40023800 	.word	0x40023800
 8003838:	08009064 	.word	0x08009064
 800383c:	20000004 	.word	0x20000004
 8003840:	20000008 	.word	0x20000008

08003844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	; 0x50
 800384a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	2300      	movs	r3, #0
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385c:	4b79      	ldr	r3, [pc, #484]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d00d      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x40>
 8003868:	2b08      	cmp	r3, #8
 800386a:	f200 80e1 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x34>
 8003872:	2b04      	cmp	r3, #4
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x3a>
 8003876:	e0db      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b73      	ldr	r3, [pc, #460]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800387c:	e0db      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387e:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003882:	e0d8      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800388c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388e:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d063      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	2200      	movs	r2, #0
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038b6:	4622      	mov	r2, r4
 80038b8:	462b      	mov	r3, r5
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	0159      	lsls	r1, r3, #5
 80038c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c8:	0150      	lsls	r0, r2, #5
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4621      	mov	r1, r4
 80038d0:	1a51      	subs	r1, r2, r1
 80038d2:	6139      	str	r1, [r7, #16]
 80038d4:	4629      	mov	r1, r5
 80038d6:	eb63 0301 	sbc.w	r3, r3, r1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e8:	4659      	mov	r1, fp
 80038ea:	018b      	lsls	r3, r1, #6
 80038ec:	4651      	mov	r1, sl
 80038ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038f2:	4651      	mov	r1, sl
 80038f4:	018a      	lsls	r2, r1, #6
 80038f6:	4651      	mov	r1, sl
 80038f8:	ebb2 0801 	subs.w	r8, r2, r1
 80038fc:	4659      	mov	r1, fp
 80038fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	462b      	mov	r3, r5
 8003924:	eb49 0303 	adc.w	r3, r9, r3
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003936:	4629      	mov	r1, r5
 8003938:	024b      	lsls	r3, r1, #9
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003940:	4621      	mov	r1, r4
 8003942:	024a      	lsls	r2, r1, #9
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003954:	f7fc fc44 	bl	80001e0 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003960:	e058      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	2200      	movs	r2, #0
 800396a:	4618      	mov	r0, r3
 800396c:	4611      	mov	r1, r2
 800396e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	f04f 0000 	mov.w	r0, #0
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	0159      	lsls	r1, r3, #5
 800398a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398e:	0150      	lsls	r0, r2, #5
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4641      	mov	r1, r8
 8003996:	ebb2 0a01 	subs.w	sl, r2, r1
 800399a:	4649      	mov	r1, r9
 800399c:	eb63 0b01 	sbc.w	fp, r3, r1
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039b4:	ebb2 040a 	subs.w	r4, r2, sl
 80039b8:	eb63 050b 	sbc.w	r5, r3, fp
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	464b      	mov	r3, r9
 80039d8:	eb45 0303 	adc.w	r3, r5, r3
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ea:	4629      	mov	r1, r5
 80039ec:	028b      	lsls	r3, r1, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f4:	4621      	mov	r1, r4
 80039f6:	028a      	lsls	r2, r1, #10
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fe:	2200      	movs	r2, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	61fa      	str	r2, [r7, #28]
 8003a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a08:	f7fc fbea 	bl	80001e0 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3750      	adds	r7, #80	; 0x50
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	00f42400 	.word	0x00f42400
 8003a4c:	007a1200 	.word	0x007a1200

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000004 	.word	0x20000004

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08009074 	.word	0x08009074

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffdc 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08009074 	.word	0x08009074

08003ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <HAL_RCC_GetClockConfig+0x60>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0207 	and.w	r2, r3, #7
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40023c00 	.word	0x40023c00

08003b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07b      	b.n	8003c26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d009      	beq.n	8003b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	e005      	b.n	8003b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe f850 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0104 	and.w	r1, r3, #4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f003 0210 	and.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b088      	sub	sp, #32
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_SPI_Transmit+0x22>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e12d      	b.n	8003eac <HAL_SPI_Transmit+0x27e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c58:	f7fe fb20 	bl	800229c <HAL_GetTick>
 8003c5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c72:	e116      	b.n	8003ea2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Transmit+0x52>
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c84:	e10d      	b.n	8003ea2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	88fa      	ldrh	r2, [r7, #6]
 8003c9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d10f      	bne.n	8003cee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d007      	beq.n	8003d0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d14:	d14f      	bne.n	8003db6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Transmit+0xf6>
 8003d1e:	8afb      	ldrh	r3, [r7, #22]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d142      	bne.n	8003daa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d48:	e02f      	b.n	8003daa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d112      	bne.n	8003d7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d7c:	e015      	b.n	8003daa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7e:	f7fe fa8d 	bl	800229c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d803      	bhi.n	8003d96 <HAL_SPI_Transmit+0x168>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d102      	bne.n	8003d9c <HAL_SPI_Transmit+0x16e>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003da8:	e07b      	b.n	8003ea2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ca      	bne.n	8003d4a <HAL_SPI_Transmit+0x11c>
 8003db4:	e050      	b.n	8003e58 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SPI_Transmit+0x196>
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d144      	bne.n	8003e4e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dea:	e030      	b.n	8003e4e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d113      	bne.n	8003e22 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e20:	e015      	b.n	8003e4e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e22:	f7fe fa3b 	bl	800229c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d803      	bhi.n	8003e3a <HAL_SPI_Transmit+0x20c>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Transmit+0x212>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e4c:	e029      	b.n	8003ea2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1c9      	bne.n	8003dec <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fa61 	bl	8004324 <SPI_EndRxTxTransaction>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e003      	b.n	8003ea2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x26>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e198      	b.n	800420c <HAL_SPI_TransmitReceive+0x358>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee2:	f7fe f9db 	bl	800229c <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d00f      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x70>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0a:	d107      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x68>
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d003      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f22:	e16d      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x82>
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f3c:	e160      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2205      	movs	r2, #5
 8003f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	887a      	ldrh	r2, [r7, #2]
 8003f7a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d007      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d17c      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x10a>
 8003fb8:	8b7b      	ldrh	r3, [r7, #26]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d16a      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	881a      	ldrh	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe2:	e057      	b.n	8004094 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d11b      	bne.n	800402a <HAL_SPI_TransmitReceive+0x176>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d016      	beq.n	800402a <HAL_SPI_TransmitReceive+0x176>
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d113      	bne.n	800402a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	881a      	ldrh	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	1c9a      	adds	r2, r3, #2
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d119      	bne.n	800406c <HAL_SPI_TransmitReceive+0x1b8>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	b292      	uxth	r2, r2
 800404e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800406c:	f7fe f916 	bl	800229c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004078:	429a      	cmp	r2, r3
 800407a:	d80b      	bhi.n	8004094 <HAL_SPI_TransmitReceive+0x1e0>
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d007      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004092:	e0b5      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1a2      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x130>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d19d      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x130>
 80040a8:	e080      	b.n	80041ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x204>
 80040b2:	8b7b      	ldrh	r3, [r7, #26]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d16f      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	e05b      	b.n	8004198 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11c      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x274>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x274>
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d114      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d119      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2b6>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d014      	beq.n	800416a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004166:	2301      	movs	r3, #1
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800416a:	f7fe f897 	bl	800229c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004176:	429a      	cmp	r2, r3
 8004178:	d803      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x2ce>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d102      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x2d4>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004196:	e033      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d19e      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x22c>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d199      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8b7 	bl	8004324 <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041c8:	e01a      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f6:	e003      	b.n	8004200 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800420c:	4618      	mov	r0, r3
 800420e:	3730      	adds	r7, #48	; 0x30
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004224:	f7fe f83a 	bl	800229c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4413      	add	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004234:	f7fe f832 	bl	800229c <HAL_GetTick>
 8004238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	015b      	lsls	r3, r3, #5
 8004240:	0d1b      	lsrs	r3, r3, #20
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800424a:	e054      	b.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d050      	beq.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004254:	f7fe f822 	bl	800229c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d902      	bls.n	800426a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d13d      	bne.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d111      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d004      	beq.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d107      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d10f      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e017      	b.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d19b      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000004 	.word	0x20000004

08004324 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2201      	movs	r2, #1
 8004338:	2102      	movs	r1, #2
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff ff6a 	bl	8004214 <SPI_WaitFlagStateUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e032      	b.n	80043bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <SPI_EndRxTxTransaction+0xa0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <SPI_EndRxTxTransaction+0xa4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	0d5b      	lsrs	r3, r3, #21
 8004362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004374:	d112      	bne.n	800439c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff ff47 	bl	8004214 <SPI_WaitFlagStateUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e00f      	b.n	80043bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d0f2      	beq.n	800439c <SPI_EndRxTxTransaction+0x78>
 80043b6:	e000      	b.n	80043ba <SPI_EndRxTxTransaction+0x96>
        break;
 80043b8:	bf00      	nop
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000004 	.word	0x20000004
 80043c8:	165e9f81 	.word	0x165e9f81

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e041      	b.n	8004462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f839 	bl	800446a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 f9b2 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e044      	b.n	8004522 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_Base_Start_IT+0xb0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_TIM_Base_Start_IT+0xb4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_TIM_Base_Start_IT+0xb8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_TIM_Base_Start_IT+0xbc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	; (8004540 <HAL_TIM_Base_Start_IT+0xc0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d010      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	e007      	b.n	8004520 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40014000 	.word	0x40014000

08004544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d020      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0202 	mvn.w	r2, #2
 8004578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8d2 	bl	8004738 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8c4 	bl	8004724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8d5 	bl	800474c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d020      	beq.n	80045f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01b      	beq.n	80045f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0204 	mvn.w	r2, #4
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8ac 	bl	8004738 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f89e 	bl	8004724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8af 	bl	800474c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d020      	beq.n	8004640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0208 	mvn.w	r2, #8
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f886 	bl	8004738 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f878 	bl	8004724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f889 	bl	800474c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d020      	beq.n	800468c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f860 	bl	8004738 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f852 	bl	8004724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f863 	bl	800474c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0201 	mvn.w	r2, #1
 80046a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fa2a 	bl	8001b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8e6 	bl	80048a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f834 	bl	8004760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0220 	mvn.w	r2, #32
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8b8 	bl	800488c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <TIM_Base_SetConfig+0xfc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00f      	beq.n	80047ac <TIM_Base_SetConfig+0x38>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d00b      	beq.n	80047ac <TIM_Base_SetConfig+0x38>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a37      	ldr	r2, [pc, #220]	; (8004874 <TIM_Base_SetConfig+0x100>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_Base_SetConfig+0x38>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <TIM_Base_SetConfig+0x104>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_Base_SetConfig+0x38>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a35      	ldr	r2, [pc, #212]	; (800487c <TIM_Base_SetConfig+0x108>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <TIM_Base_SetConfig+0xfc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01b      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d017      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a28      	ldr	r2, [pc, #160]	; (8004874 <TIM_Base_SetConfig+0x100>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <TIM_Base_SetConfig+0x104>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00f      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <TIM_Base_SetConfig+0x108>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00b      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <TIM_Base_SetConfig+0x10c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d007      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <TIM_Base_SetConfig+0x110>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d003      	beq.n	80047fe <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <TIM_Base_SetConfig+0x114>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d108      	bne.n	8004810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <TIM_Base_SetConfig+0xfc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]
  }
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e042      	b.n	800494c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd f9e2 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f82b 	bl	8004954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800492c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b0c0      	sub	sp, #256	; 0x100
 800495a:	af00      	add	r7, sp, #0
 800495c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	68d9      	ldr	r1, [r3, #12]
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	ea40 0301 	orr.w	r3, r0, r1
 800497c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	431a      	orrs	r2, r3
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049ac:	f021 010c 	bic.w	r1, r1, #12
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ba:	430b      	orrs	r3, r1
 80049bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	6999      	ldr	r1, [r3, #24]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	ea40 0301 	orr.w	r3, r0, r1
 80049da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b8f      	ldr	r3, [pc, #572]	; (8004c20 <UART_SetConfig+0x2cc>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d005      	beq.n	80049f4 <UART_SetConfig+0xa0>
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b8d      	ldr	r3, [pc, #564]	; (8004c24 <UART_SetConfig+0x2d0>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d104      	bne.n	80049fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f4:	f7ff f84c 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 80049f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049fc:	e003      	b.n	8004a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049fe:	f7ff f833 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8004a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a10:	f040 810c 	bne.w	8004c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	1891      	adds	r1, r2, r2
 8004a2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a2e:	415b      	adcs	r3, r3
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a36:	4621      	mov	r1, r4
 8004a38:	eb12 0801 	adds.w	r8, r2, r1
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	eb43 0901 	adc.w	r9, r3, r1
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a56:	4690      	mov	r8, r2
 8004a58:	4699      	mov	r9, r3
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	eb18 0303 	adds.w	r3, r8, r3
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a64:	462b      	mov	r3, r5
 8004a66:	eb49 0303 	adc.w	r3, r9, r3
 8004a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a82:	460b      	mov	r3, r1
 8004a84:	18db      	adds	r3, r3, r3
 8004a86:	653b      	str	r3, [r7, #80]	; 0x50
 8004a88:	4613      	mov	r3, r2
 8004a8a:	eb42 0303 	adc.w	r3, r2, r3
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a98:	f7fb fba2 	bl	80001e0 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	011c      	lsls	r4, r3, #4
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	1891      	adds	r1, r2, r2
 8004ac2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ac4:	415b      	adcs	r3, r3
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004acc:	4641      	mov	r1, r8
 8004ace:	eb12 0a01 	adds.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aec:	4692      	mov	sl, r2
 8004aee:	469b      	mov	fp, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	eb1a 0303 	adds.w	r3, sl, r3
 8004af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004afa:	464b      	mov	r3, r9
 8004afc:	eb4b 0303 	adc.w	r3, fp, r3
 8004b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	18db      	adds	r3, r3, r3
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1e:	4613      	mov	r3, r2
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
 8004b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b2e:	f7fb fb57 	bl	80001e0 <__aeabi_uldivmod>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2264      	movs	r2, #100	; 0x64
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	1acb      	subs	r3, r1, r3
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004b50:	fba3 2302 	umull	r2, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b5c:	441c      	add	r4, r3
 8004b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	1891      	adds	r1, r2, r2
 8004b76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b78:	415b      	adcs	r3, r3
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b80:	4641      	mov	r1, r8
 8004b82:	1851      	adds	r1, r2, r1
 8004b84:	6339      	str	r1, [r7, #48]	; 0x30
 8004b86:	4649      	mov	r1, r9
 8004b88:	414b      	adcs	r3, r1
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b98:	4659      	mov	r1, fp
 8004b9a:	00cb      	lsls	r3, r1, #3
 8004b9c:	4651      	mov	r1, sl
 8004b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	00ca      	lsls	r2, r1, #3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	4642      	mov	r2, r8
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	18db      	adds	r3, r3, r3
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bda:	4613      	mov	r3, r2
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bea:	f7fb faf9 	bl	80001e0 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	; 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 0207 	and.w	r2, r3, #7
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4422      	add	r2, r4
 8004c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c1c:	e106      	b.n	8004e2c <UART_SetConfig+0x4d8>
 8004c1e:	bf00      	nop
 8004c20:	40011000 	.word	0x40011000
 8004c24:	40011400 	.word	0x40011400
 8004c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c3e:	4642      	mov	r2, r8
 8004c40:	464b      	mov	r3, r9
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	6239      	str	r1, [r7, #32]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	1854      	adds	r4, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0501 	adc.w	r5, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	00eb      	lsls	r3, r5, #3
 8004c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c66:	00e2      	lsls	r2, r4, #3
 8004c68:	4614      	mov	r4, r2
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	18e3      	adds	r3, r4, r3
 8004c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c74:	464b      	mov	r3, r9
 8004c76:	eb45 0303 	adc.w	r3, r5, r3
 8004c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	008a      	lsls	r2, r1, #2
 8004ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cac:	f7fb fa98 	bl	80001e0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b60      	ldr	r3, [pc, #384]	; (8004e38 <UART_SetConfig+0x4e4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	61b9      	str	r1, [r7, #24]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6139      	str	r1, [r7, #16]
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d14:	464b      	mov	r3, r9
 8004d16:	460a      	mov	r2, r1
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d38:	4649      	mov	r1, r9
 8004d3a:	008b      	lsls	r3, r1, #2
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d42:	4641      	mov	r1, r8
 8004d44:	008a      	lsls	r2, r1, #2
 8004d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d4a:	f7fb fa49 	bl	80001e0 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <UART_SetConfig+0x4e4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	; 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	3332      	adds	r3, #50	; 0x32
 8004d68:	4a33      	ldr	r2, [pc, #204]	; (8004e38 <UART_SetConfig+0x4e4>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d74:	441c      	add	r4, r3
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d7e:	677a      	str	r2, [r7, #116]	; 0x74
 8004d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	460a      	mov	r2, r1
 8004dca:	eb42 0303 	adc.w	r3, r2, r3
 8004dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dda:	667a      	str	r2, [r7, #100]	; 0x64
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004de8:	4649      	mov	r1, r9
 8004dea:	008b      	lsls	r3, r1, #2
 8004dec:	4641      	mov	r1, r8
 8004dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df2:	4641      	mov	r1, r8
 8004df4:	008a      	lsls	r2, r1, #2
 8004df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dfa:	f7fb f9f1 	bl	80001e0 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <UART_SetConfig+0x4e4>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	; 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <UART_SetConfig+0x4e4>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4422      	add	r2, r4
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e32:	46bd      	mov	sp, r7
 8004e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e38:	51eb851f 	.word	0x51eb851f

08004e3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e40:	4904      	ldr	r1, [pc, #16]	; (8004e54 <MX_FATFS_Init+0x18>)
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <MX_FATFS_Init+0x1c>)
 8004e44:	f000 f8ae 	bl	8004fa4 <FATFS_LinkDriver>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <MX_FATFS_Init+0x20>)
 8004e4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000800 	.word	0x20000800
 8004e58:	20000010 	.word	0x20000010
 8004e5c:	200007fc 	.word	0x200007fc

08004e60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb fceb 	bl	8000848 <SD_disk_initialize>
 8004e72:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb fdc9 	bl	8000a20 <SD_disk_status>
 8004e8e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004ea8:	7bf8      	ldrb	r0, [r7, #15]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	f7fb fdcc 	bl	8000a4c <SD_disk_read>
 8004eb4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004ece:	7bf8      	ldrb	r0, [r7, #15]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	f7fb fe23 	bl	8000b20 <SD_disk_write>
 8004eda:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	603a      	str	r2, [r7, #0]
 8004eee:	71fb      	strb	r3, [r7, #7]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004ef4:	79b9      	ldrb	r1, [r7, #6]
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fb fe94 	bl	8000c28 <SD_disk_ioctl>
 8004f00:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f24:	7a5b      	ldrb	r3, [r3, #9]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d131      	bne.n	8004f90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f2e:	7a5b      	ldrb	r3, [r3, #9]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004f3a:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f3c:	7a5b      	ldrb	r3, [r3, #9]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f4c:	7a5b      	ldrb	r3, [r3, #9]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f54:	4413      	add	r3, r2
 8004f56:	79fa      	ldrb	r2, [r7, #7]
 8004f58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f5c:	7a5b      	ldrb	r3, [r3, #9]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	b2d1      	uxtb	r1, r2
 8004f64:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <FATFS_LinkDriverEx+0x94>)
 8004f66:	7251      	strb	r1, [r2, #9]
 8004f68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004f6a:	7dbb      	ldrb	r3, [r7, #22]
 8004f6c:	3330      	adds	r3, #48	; 0x30
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	3301      	adds	r3, #1
 8004f78:	223a      	movs	r2, #58	; 0x3a
 8004f7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	222f      	movs	r2, #47	; 0x2f
 8004f82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	3303      	adds	r3, #3
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000804 	.word	0x20000804

08004fa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ffaa 	bl	8004f0c <FATFS_LinkDriverEx>
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f103 0208 	add.w	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 0208 	add.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f103 0208 	add.w	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d103      	bne.n	8005084 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e00c      	b.n	800509e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3308      	adds	r3, #8
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e002      	b.n	8005092 <vListInsert+0x2e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d2f6      	bcs.n	800508c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6852      	ldr	r2, [r2, #4]
 80050f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d103      	bne.n	800510a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005156:	f001 fba5 	bl	80068a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	3b01      	subs	r3, #1
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	441a      	add	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d114      	bne.n	80051d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01a      	beq.n	80051ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3310      	adds	r3, #16
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 ff81 	bl	80060c0 <xTaskRemoveFromEventList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d012      	beq.n	80051ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <xQueueGenericReset+0xcc>)
 80051c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	e009      	b.n	80051ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3310      	adds	r3, #16
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fef1 	bl	8004fc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff feec 	bl	8004fc2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ea:	f001 fb8b 	bl	8006904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051ee:	2301      	movs	r3, #1
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3348      	adds	r3, #72	; 0x48
 8005234:	4618      	mov	r0, r3
 8005236:	f001 fc17 	bl	8006a68 <pvPortMalloc>
 800523a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d011      	beq.n	8005266 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3348      	adds	r3, #72	; 0x48
 800524a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005254:	79fa      	ldrb	r2, [r7, #7]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f805 	bl	8005270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005266:	69bb      	ldr	r3, [r7, #24]
	}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e002      	b.n	8005292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800529e:	2101      	movs	r1, #1
 80052a0:	69b8      	ldr	r0, [r7, #24]
 80052a2:	f7ff ff43 	bl	800512c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08e      	sub	sp, #56	; 0x38
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGenericSend+0x32>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <xQueueGenericSend+0x40>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <xQueueGenericSend+0x44>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <xQueueGenericSend+0x46>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <xQueueGenericSend+0x60>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d103      	bne.n	800531e <xQueueGenericSend+0x6e>
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <xQueueGenericSend+0x72>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <xQueueGenericSend+0x74>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xQueueGenericSend+0x8e>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	623b      	str	r3, [r7, #32]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800533e:	f001 f87b 	bl	8006438 <xTaskGetSchedulerState>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <xQueueGenericSend+0x9e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <xQueueGenericSend+0xa2>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueGenericSend+0xa4>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueGenericSend+0xbe>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	61fb      	str	r3, [r7, #28]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800536e:	f001 fa99 	bl	80068a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <xQueueGenericSend+0xd4>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d129      	bne.n	80053d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800538a:	f000 f96f 	bl	800566c <prvCopyDataToQueue>
 800538e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fe8f 	bl	80060c0 <xTaskRemoveFromEventList>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <xQueueGenericSend+0x1f8>)
 80053aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	e00a      	b.n	80053d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053c0:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <xQueueGenericSend+0x1f8>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053d0:	f001 fa98 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e063      	b.n	80054a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053de:	f001 fa91 	bl	8006904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e05c      	b.n	80054a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fec7 	bl	8006184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053fa:	f001 fa83 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053fe:	f000 fc6d 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005402:	f001 fa4f 	bl	80068a4 <vPortEnterCritical>
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540c:	b25b      	sxtb	r3, r3
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d103      	bne.n	800541c <xQueueGenericSend+0x16c>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005422:	b25b      	sxtb	r3, r3
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d103      	bne.n	8005432 <xQueueGenericSend+0x182>
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005432:	f001 fa67 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005436:	1d3a      	adds	r2, r7, #4
 8005438:	f107 0314 	add.w	r3, r7, #20
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 feb6 	bl	80061b0 <xTaskCheckForTimeOut>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d124      	bne.n	8005494 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800544a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544c:	f000 fa06 	bl	800585c <prvIsQueueFull>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	3310      	adds	r3, #16
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fe0a 	bl	8006078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005466:	f000 f991 	bl	800578c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800546a:	f000 fc45 	bl	8005cf8 <xTaskResumeAll>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f af7c 	bne.w	800536e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <xQueueGenericSend+0x1f8>)
 8005478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	e772      	b.n	800536e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800548a:	f000 f97f 	bl	800578c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800548e:	f000 fc33 	bl	8005cf8 <xTaskResumeAll>
 8005492:	e76c      	b.n	800536e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005496:	f000 f979 	bl	800578c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800549a:	f000 fc2d 	bl	8005cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800549e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3738      	adds	r7, #56	; 0x38
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08c      	sub	sp, #48	; 0x30
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <xQueueReceive+0x30>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	623b      	str	r3, [r7, #32]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <xQueueReceive+0x3e>
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <xQueueReceive+0x42>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueReceive+0x44>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueReceive+0x5e>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61fb      	str	r3, [r7, #28]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800550a:	f000 ff95 	bl	8006438 <xTaskGetSchedulerState>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <xQueueReceive+0x6e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <xQueueReceive+0x72>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <xQueueReceive+0x74>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueReceive+0x8e>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	61bb      	str	r3, [r7, #24]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800553a:	f001 f9b3 	bl	80068a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01f      	beq.n	800558a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554e:	f000 f8f7 	bl	8005740 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00f      	beq.n	8005582 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	3310      	adds	r3, #16
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fdaa 	bl	80060c0 <xTaskRemoveFromEventList>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005572:	4b3d      	ldr	r3, [pc, #244]	; (8005668 <xQueueReceive+0x1bc>)
 8005574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005582:	f001 f9bf 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8005586:	2301      	movs	r3, #1
 8005588:	e069      	b.n	800565e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005590:	f001 f9b8 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005594:	2300      	movs	r3, #0
 8005596:	e062      	b.n	800565e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fdee 	bl	8006184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ac:	f001 f9aa 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b0:	f000 fb94 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b4:	f001 f976 	bl	80068a4 <vPortEnterCritical>
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d103      	bne.n	80055ce <xQueueReceive+0x122>
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d103      	bne.n	80055e4 <xQueueReceive+0x138>
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e4:	f001 f98e 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e8:	1d3a      	adds	r2, r7, #4
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	4611      	mov	r1, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fddd 	bl	80061b0 <xTaskCheckForTimeOut>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d123      	bne.n	8005644 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fe:	f000 f917 	bl	8005830 <prvIsQueueEmpty>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fd31 	bl	8006078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005618:	f000 f8b8 	bl	800578c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800561c:	f000 fb6c 	bl	8005cf8 <xTaskResumeAll>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d189      	bne.n	800553a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <xQueueReceive+0x1bc>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	e780      	b.n	800553a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f000 f8a7 	bl	800578c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563e:	f000 fb5b 	bl	8005cf8 <xTaskResumeAll>
 8005642:	e77a      	b.n	800553a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 f8a1 	bl	800578c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564a:	f000 fb55 	bl	8005cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800564e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005650:	f000 f8ee 	bl	8005830 <prvIsQueueEmpty>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f43f af6f 	beq.w	800553a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800565c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800565e:	4618      	mov	r0, r3
 8005660:	3730      	adds	r7, #48	; 0x30
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d14d      	bne.n	800572e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 feec 	bl	8006474 <xTaskPriorityDisinherit>
 800569c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	e043      	b.n	800572e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d119      	bne.n	80056e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6858      	ldr	r0, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	461a      	mov	r2, r3
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	f001 fbec 	bl	8006e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d32b      	bcc.n	800572e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	e026      	b.n	800572e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68d8      	ldr	r0, [r3, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	461a      	mov	r2, r3
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	f001 fbd2 	bl	8006e94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	425b      	negs	r3, r3
 80056fa:	441a      	add	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d207      	bcs.n	800571c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	425b      	negs	r3, r3
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d105      	bne.n	800572e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3b01      	subs	r3, #1
 800572c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	441a      	add	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d303      	bcc.n	8005774 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	461a      	mov	r2, r3
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f001 fb88 	bl	8006e94 <memcpy>
	}
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005794:	f001 f886 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800579e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a0:	e011      	b.n	80057c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d012      	beq.n	80057d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3324      	adds	r3, #36	; 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc86 	bl	80060c0 <xTaskRemoveFromEventList>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057ba:	f000 fd5b 	bl	8006274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	dce9      	bgt.n	80057a2 <prvUnlockQueue+0x16>
 80057ce:	e000      	b.n	80057d2 <prvUnlockQueue+0x46>
					break;
 80057d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057da:	f001 f893 	bl	8006904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057de:	f001 f861 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ea:	e011      	b.n	8005810 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d012      	beq.n	800581a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3310      	adds	r3, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fc61 	bl	80060c0 <xTaskRemoveFromEventList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005804:	f000 fd36 	bl	8006274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	3b01      	subs	r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005814:	2b00      	cmp	r3, #0
 8005816:	dce9      	bgt.n	80057ec <prvUnlockQueue+0x60>
 8005818:	e000      	b.n	800581c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800581a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	22ff      	movs	r2, #255	; 0xff
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005824:	f001 f86e 	bl	8006904 <vPortExitCritical>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005838:	f001 f834 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e001      	b.n	800584e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800584e:	f001 f859 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005864:	f001 f81e 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005870:	429a      	cmp	r2, r3
 8005872:	d102      	bne.n	800587a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e001      	b.n	800587e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800587e:	f001 f841 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08e      	sub	sp, #56	; 0x38
 8005890:	af04      	add	r7, sp, #16
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	61fb      	str	r3, [r7, #28]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058d2:	2354      	movs	r3, #84	; 0x54
 80058d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b54      	cmp	r3, #84	; 0x54
 80058da:	d00a      	beq.n	80058f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	61bb      	str	r3, [r7, #24]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01e      	beq.n	8005938 <xTaskCreateStatic+0xac>
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005912:	2300      	movs	r3, #0
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	f107 0314 	add.w	r3, r7, #20
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f850 	bl	80059d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005932:	f000 f8d5 	bl	8005ae0 <prvAddNewTaskToReadyList>
 8005936:	e001      	b.n	800593c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800593c:	697b      	ldr	r3, [r7, #20]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005946:	b580      	push	{r7, lr}
 8005948:	b08c      	sub	sp, #48	; 0x30
 800594a:	af04      	add	r7, sp, #16
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f001 f884 	bl	8006a68 <pvPortMalloc>
 8005960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005968:	2054      	movs	r0, #84	; 0x54
 800596a:	f001 f87d 	bl	8006a68 <pvPortMalloc>
 800596e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
 800597c:	e005      	b.n	800598a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f001 f93e 	bl	8006c00 <vPortFree>
 8005984:	e001      	b.n	800598a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d017      	beq.n	80059c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	2300      	movs	r3, #0
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	9302      	str	r3, [sp, #8]
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f80e 	bl	80059d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b4:	69f8      	ldr	r0, [r7, #28]
 80059b6:	f000 f893 	bl	8005ae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	e002      	b.n	80059c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059c6:	69bb      	ldr	r3, [r7, #24]
	}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059e8:	3b01      	subs	r3, #1
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f023 0307 	bic.w	r3, r3, #7
 80059f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	617b      	str	r3, [r7, #20]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01f      	beq.n	8005a5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	e012      	b.n	8005a4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	7819      	ldrb	r1, [r3, #0]
 8005a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	3334      	adds	r3, #52	; 0x34
 8005a34:	460a      	mov	r2, r1
 8005a36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d006      	beq.n	8005a52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b0f      	cmp	r3, #15
 8005a4e:	d9e9      	bls.n	8005a24 <prvInitialiseNewTask+0x54>
 8005a50:	e000      	b.n	8005a54 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a5c:	e003      	b.n	8005a66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d901      	bls.n	8005a70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a6c:	2306      	movs	r3, #6
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	3304      	adds	r3, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fabb 	bl	8005002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	3318      	adds	r3, #24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fab6 	bl	8005002 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	f1c3 0207 	rsb	r2, r3, #7
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	2200      	movs	r2, #0
 8005ab0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f000 fdc4 	bl	800664c <pxPortInitialiseStack>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ae8:	f000 fedc 	bl	80068a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aec:	4b2a      	ldr	r3, [pc, #168]	; (8005b98 <prvAddNewTaskToReadyList+0xb8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <prvAddNewTaskToReadyList+0xb8>)
 8005af4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <prvAddNewTaskToReadyList+0xbc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <prvAddNewTaskToReadyList+0xbc>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <prvAddNewTaskToReadyList+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d110      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b0c:	f000 fbd6 	bl	80062bc <prvInitialiseTaskLists>
 8005b10:	e00d      	b.n	8005b2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <prvAddNewTaskToReadyList+0xc0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <prvAddNewTaskToReadyList+0xbc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d802      	bhi.n	8005b2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <prvAddNewTaskToReadyList+0xbc>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <prvAddNewTaskToReadyList+0xc4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <prvAddNewTaskToReadyList+0xc4>)
 8005b36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <prvAddNewTaskToReadyList+0xc8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <prvAddNewTaskToReadyList+0xc8>)
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <prvAddNewTaskToReadyList+0xcc>)
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7ff fa5b 	bl	800501c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b66:	f000 fecd 	bl	8006904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <prvAddNewTaskToReadyList+0xc0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00e      	beq.n	8005b90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvAddNewTaskToReadyList+0xbc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d207      	bcs.n	8005b90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <prvAddNewTaskToReadyList+0xd0>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000910 	.word	0x20000910
 8005b9c:	20000810 	.word	0x20000810
 8005ba0:	2000091c 	.word	0x2000091c
 8005ba4:	2000092c 	.word	0x2000092c
 8005ba8:	20000918 	.word	0x20000918
 8005bac:	20000814 	.word	0x20000814
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d017      	beq.n	8005bf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <vTaskDelay+0x60>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <vTaskDelay+0x30>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60bb      	str	r3, [r7, #8]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005be4:	f000 f87a 	bl	8005cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be8:	2100      	movs	r1, #0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fcc8 	bl	8006580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bf0:	f000 f882 	bl	8005cf8 <xTaskResumeAll>
 8005bf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <vTaskDelay+0x64>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000938 	.word	0x20000938
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	1d39      	adds	r1, r7, #4
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fb fd4e 	bl	80016d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2300      	movs	r3, #0
 8005c48:	460a      	mov	r2, r1
 8005c4a:	491e      	ldr	r1, [pc, #120]	; (8005cc4 <vTaskStartScheduler+0xa8>)
 8005c4c:	481e      	ldr	r0, [pc, #120]	; (8005cc8 <vTaskStartScheduler+0xac>)
 8005c4e:	f7ff fe1d 	bl	800588c <xTaskCreateStatic>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <vTaskStartScheduler+0xb0>)
 8005c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <vTaskStartScheduler+0xb0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e001      	b.n	8005c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d116      	bne.n	8005c9e <vTaskStartScheduler+0x82>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c84:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <vTaskStartScheduler+0xb4>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <vTaskStartScheduler+0xb8>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <vTaskStartScheduler+0xbc>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c98:	f000 fd62 	bl	8006760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c9c:	e00e      	b.n	8005cbc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d10a      	bne.n	8005cbc <vTaskStartScheduler+0xa0>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	60fb      	str	r3, [r7, #12]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <vTaskStartScheduler+0x9e>
}
 8005cbc:	bf00      	nop
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	08006f9c 	.word	0x08006f9c
 8005cc8:	0800628d 	.word	0x0800628d
 8005ccc:	20000934 	.word	0x20000934
 8005cd0:	20000930 	.word	0x20000930
 8005cd4:	2000091c 	.word	0x2000091c
 8005cd8:	20000914 	.word	0x20000914

08005cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000938 	.word	0x20000938

08005cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d06:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <xTaskResumeAll+0x114>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d24:	f000 fdbe 	bl	80068a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d28:	4b38      	ldr	r3, [pc, #224]	; (8005e0c <xTaskResumeAll+0x114>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4a37      	ldr	r2, [pc, #220]	; (8005e0c <xTaskResumeAll+0x114>)
 8005d30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b36      	ldr	r3, [pc, #216]	; (8005e0c <xTaskResumeAll+0x114>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d161      	bne.n	8005dfe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d3a:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <xTaskResumeAll+0x118>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d05d      	beq.n	8005dfe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d42:	e02e      	b.n	8005da2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d44:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <xTaskResumeAll+0x11c>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff f9c0 	bl	80050d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f9bb 	bl	80050d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <xTaskResumeAll+0x120>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <xTaskResumeAll+0x120>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <xTaskResumeAll+0x124>)
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7ff f947 	bl	800501c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <xTaskResumeAll+0x128>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d302      	bcc.n	8005da2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d9c:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <xTaskResumeAll+0x12c>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <xTaskResumeAll+0x11c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1cc      	bne.n	8005d44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005db0:	f000 fb22 	bl	80063f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005db4:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <xTaskResumeAll+0x130>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dc0:	f000 f846 	bl	8005e50 <xTaskIncrementTick>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005dca:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <xTaskResumeAll+0x12c>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f1      	bne.n	8005dc0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ddc:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <xTaskResumeAll+0x130>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <xTaskResumeAll+0x12c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dea:	2301      	movs	r3, #1
 8005dec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <xTaskResumeAll+0x134>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dfe:	f000 fd81 	bl	8006904 <vPortExitCritical>

	return xAlreadyYielded;
 8005e02:	68bb      	ldr	r3, [r7, #8]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000938 	.word	0x20000938
 8005e10:	20000910 	.word	0x20000910
 8005e14:	200008d0 	.word	0x200008d0
 8005e18:	20000918 	.word	0x20000918
 8005e1c:	20000814 	.word	0x20000814
 8005e20:	20000810 	.word	0x20000810
 8005e24:	20000924 	.word	0x20000924
 8005e28:	20000920 	.word	0x20000920
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <xTaskGetTickCount+0x1c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e3c:	687b      	ldr	r3, [r7, #4]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000914 	.word	0x20000914

08005e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5a:	4b4e      	ldr	r3, [pc, #312]	; (8005f94 <xTaskIncrementTick+0x144>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 808e 	bne.w	8005f80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e64:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <xTaskIncrementTick+0x148>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e6c:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <xTaskIncrementTick+0x148>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d120      	bne.n	8005eba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e78:	4b48      	ldr	r3, [pc, #288]	; (8005f9c <xTaskIncrementTick+0x14c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	603b      	str	r3, [r7, #0]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xTaskIncrementTick+0x46>
 8005e98:	4b40      	ldr	r3, [pc, #256]	; (8005f9c <xTaskIncrementTick+0x14c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <xTaskIncrementTick+0x150>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a3e      	ldr	r2, [pc, #248]	; (8005f9c <xTaskIncrementTick+0x14c>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4a3e      	ldr	r2, [pc, #248]	; (8005fa0 <xTaskIncrementTick+0x150>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <xTaskIncrementTick+0x154>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a3c      	ldr	r2, [pc, #240]	; (8005fa4 <xTaskIncrementTick+0x154>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	f000 fa9f 	bl	80063f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eba:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <xTaskIncrementTick+0x158>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d348      	bcc.n	8005f56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <xTaskIncrementTick+0x14c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ece:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <xTaskIncrementTick+0x158>)
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	601a      	str	r2, [r3, #0]
					break;
 8005ed6:	e03e      	b.n	8005f56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed8:	4b30      	ldr	r3, [pc, #192]	; (8005f9c <xTaskIncrementTick+0x14c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d203      	bcs.n	8005ef8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <xTaskIncrementTick+0x158>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ef6:	e02e      	b.n	8005f56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f8ea 	bl	80050d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f8e1 	bl	80050d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	4b23      	ldr	r3, [pc, #140]	; (8005fac <xTaskIncrementTick+0x15c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	4a22      	ldr	r2, [pc, #136]	; (8005fac <xTaskIncrementTick+0x15c>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <xTaskIncrementTick+0x160>)
 8005f34:	441a      	add	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7ff f86d 	bl	800501c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <xTaskIncrementTick+0x164>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3b9      	bcc.n	8005ec4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f54:	e7b6      	b.n	8005ec4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <xTaskIncrementTick+0x164>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4914      	ldr	r1, [pc, #80]	; (8005fb0 <xTaskIncrementTick+0x160>)
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d901      	bls.n	8005f72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <xTaskIncrementTick+0x168>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e004      	b.n	8005f8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <xTaskIncrementTick+0x16c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <xTaskIncrementTick+0x16c>)
 8005f88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f8a:	697b      	ldr	r3, [r7, #20]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000938 	.word	0x20000938
 8005f98:	20000914 	.word	0x20000914
 8005f9c:	200008c8 	.word	0x200008c8
 8005fa0:	200008cc 	.word	0x200008cc
 8005fa4:	20000928 	.word	0x20000928
 8005fa8:	20000930 	.word	0x20000930
 8005fac:	20000918 	.word	0x20000918
 8005fb0:	20000814 	.word	0x20000814
 8005fb4:	20000810 	.word	0x20000810
 8005fb8:	20000924 	.word	0x20000924
 8005fbc:	20000920 	.word	0x20000920

08005fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fc6:	4b27      	ldr	r3, [pc, #156]	; (8006064 <vTaskSwitchContext+0xa4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <vTaskSwitchContext+0xa8>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fd4:	e03f      	b.n	8006056 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <vTaskSwitchContext+0xa8>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	4b23      	ldr	r3, [pc, #140]	; (800606c <vTaskSwitchContext+0xac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	fab3 f383 	clz	r3, r3
 8005fe8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	f1c3 031f 	rsb	r3, r3, #31
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	491f      	ldr	r1, [pc, #124]	; (8006070 <vTaskSwitchContext+0xb0>)
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	607b      	str	r3, [r7, #4]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <vTaskSwitchContext+0x5a>
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <vTaskSwitchContext+0xb0>)
 8006028:	4413      	add	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3308      	adds	r3, #8
 800603e:	429a      	cmp	r2, r3
 8006040:	d104      	bne.n	800604c <vTaskSwitchContext+0x8c>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <vTaskSwitchContext+0xb4>)
 8006054:	6013      	str	r3, [r2, #0]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000938 	.word	0x20000938
 8006068:	20000924 	.word	0x20000924
 800606c:	20000918 	.word	0x20000918
 8006070:	20000814 	.word	0x20000814
 8006074:	20000810 	.word	0x20000810

08006078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60fb      	str	r3, [r7, #12]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <vTaskPlaceOnEventList+0x44>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3318      	adds	r3, #24
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fe ffdc 	bl	8005064 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060ac:	2101      	movs	r1, #1
 80060ae:	6838      	ldr	r0, [r7, #0]
 80060b0:	f000 fa66 	bl	8006580 <prvAddCurrentTaskToDelayedList>
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000810 	.word	0x20000810

080060c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60fb      	str	r3, [r7, #12]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fff0 	bl	80050d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f6:	4b1d      	ldr	r3, [pc, #116]	; (800616c <xTaskRemoveFromEventList+0xac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11c      	bne.n	8006138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe ffe7 	bl	80050d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	409a      	lsls	r2, r3
 8006110:	4b17      	ldr	r3, [pc, #92]	; (8006170 <xTaskRemoveFromEventList+0xb0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	4a16      	ldr	r2, [pc, #88]	; (8006170 <xTaskRemoveFromEventList+0xb0>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <xTaskRemoveFromEventList+0xb4>)
 8006128:	441a      	add	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe ff73 	bl	800501c <vListInsertEnd>
 8006136:	e005      	b.n	8006144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	3318      	adds	r3, #24
 800613c:	4619      	mov	r1, r3
 800613e:	480e      	ldr	r0, [pc, #56]	; (8006178 <xTaskRemoveFromEventList+0xb8>)
 8006140:	f7fe ff6c 	bl	800501c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <xTaskRemoveFromEventList+0xbc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	429a      	cmp	r2, r3
 8006150:	d905      	bls.n	800615e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <xTaskRemoveFromEventList+0xc0>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e001      	b.n	8006162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006162:	697b      	ldr	r3, [r7, #20]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000938 	.word	0x20000938
 8006170:	20000918 	.word	0x20000918
 8006174:	20000814 	.word	0x20000814
 8006178:	200008d0 	.word	0x200008d0
 800617c:	20000810 	.word	0x20000810
 8006180:	20000924 	.word	0x20000924

08006184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <vTaskInternalSetTimeOutState+0x24>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <vTaskInternalSetTimeOutState+0x28>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000928 	.word	0x20000928
 80061ac:	20000914 	.word	0x20000914

080061b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	613b      	str	r3, [r7, #16]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60fb      	str	r3, [r7, #12]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061f2:	f000 fb57 	bl	80068a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <xTaskCheckForTimeOut+0xbc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d102      	bne.n	8006216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e023      	b.n	800625e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <xTaskCheckForTimeOut+0xc0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d007      	beq.n	8006232 <xTaskCheckForTimeOut+0x82>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	429a      	cmp	r2, r3
 800622a:	d302      	bcc.n	8006232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e015      	b.n	800625e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	429a      	cmp	r2, r3
 800623a:	d20b      	bcs.n	8006254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff ff9b 	bl	8006184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e004      	b.n	800625e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800625e:	f000 fb51 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20000914 	.word	0x20000914
 8006270:	20000928 	.word	0x20000928

08006274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <vTaskMissedYield+0x14>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20000924 	.word	0x20000924

0800628c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006294:	f000 f852 	bl	800633c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <prvIdleTask+0x28>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d9f9      	bls.n	8006294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <prvIdleTask+0x2c>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062b0:	e7f0      	b.n	8006294 <prvIdleTask+0x8>
 80062b2:	bf00      	nop
 80062b4:	20000814 	.word	0x20000814
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	e00c      	b.n	80062e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <prvInitialiseTaskLists+0x60>)
 80062d4:	4413      	add	r3, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe fe73 	bl	8004fc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3301      	adds	r3, #1
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d9ef      	bls.n	80062c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062e8:	480d      	ldr	r0, [pc, #52]	; (8006320 <prvInitialiseTaskLists+0x64>)
 80062ea:	f7fe fe6a 	bl	8004fc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ee:	480d      	ldr	r0, [pc, #52]	; (8006324 <prvInitialiseTaskLists+0x68>)
 80062f0:	f7fe fe67 	bl	8004fc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062f4:	480c      	ldr	r0, [pc, #48]	; (8006328 <prvInitialiseTaskLists+0x6c>)
 80062f6:	f7fe fe64 	bl	8004fc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062fa:	480c      	ldr	r0, [pc, #48]	; (800632c <prvInitialiseTaskLists+0x70>)
 80062fc:	f7fe fe61 	bl	8004fc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006300:	480b      	ldr	r0, [pc, #44]	; (8006330 <prvInitialiseTaskLists+0x74>)
 8006302:	f7fe fe5e 	bl	8004fc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <prvInitialiseTaskLists+0x78>)
 8006308:	4a05      	ldr	r2, [pc, #20]	; (8006320 <prvInitialiseTaskLists+0x64>)
 800630a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvInitialiseTaskLists+0x7c>)
 800630e:	4a05      	ldr	r2, [pc, #20]	; (8006324 <prvInitialiseTaskLists+0x68>)
 8006310:	601a      	str	r2, [r3, #0]
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000814 	.word	0x20000814
 8006320:	200008a0 	.word	0x200008a0
 8006324:	200008b4 	.word	0x200008b4
 8006328:	200008d0 	.word	0x200008d0
 800632c:	200008e4 	.word	0x200008e4
 8006330:	200008fc 	.word	0x200008fc
 8006334:	200008c8 	.word	0x200008c8
 8006338:	200008cc 	.word	0x200008cc

0800633c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006342:	e019      	b.n	8006378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006344:	f000 faae 	bl	80068a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006348:	4b10      	ldr	r3, [pc, #64]	; (800638c <prvCheckTasksWaitingTermination+0x50>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe febe 	bl	80050d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <prvCheckTasksWaitingTermination+0x54>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3b01      	subs	r3, #1
 8006360:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <prvCheckTasksWaitingTermination+0x54>)
 8006362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <prvCheckTasksWaitingTermination+0x58>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3b01      	subs	r3, #1
 800636a:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <prvCheckTasksWaitingTermination+0x58>)
 800636c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800636e:	f000 fac9 	bl	8006904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f810 	bl	8006398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <prvCheckTasksWaitingTermination+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e1      	bne.n	8006344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200008e4 	.word	0x200008e4
 8006390:	20000910 	.word	0x20000910
 8006394:	200008f8 	.word	0x200008f8

08006398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d108      	bne.n	80063bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fc26 	bl	8006c00 <vPortFree>
				vPortFree( pxTCB );
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc23 	bl	8006c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ba:	e018      	b.n	80063ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d103      	bne.n	80063ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc1a 	bl	8006c00 <vPortFree>
	}
 80063cc:	e00f      	b.n	80063ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d00a      	beq.n	80063ee <prvDeleteTCB+0x56>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <prvDeleteTCB+0x54>
	}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <prvResetNextTaskUnblockTime+0x38>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <prvResetNextTaskUnblockTime+0x3c>)
 800640a:	f04f 32ff 	mov.w	r2, #4294967295
 800640e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006410:	e008      	b.n	8006424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <prvResetNextTaskUnblockTime+0x38>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a04      	ldr	r2, [pc, #16]	; (8006434 <prvResetNextTaskUnblockTime+0x3c>)
 8006422:	6013      	str	r3, [r2, #0]
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	200008c8 	.word	0x200008c8
 8006434:	20000930 	.word	0x20000930

08006438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <xTaskGetSchedulerState+0x34>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006446:	2301      	movs	r3, #1
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	e008      	b.n	800645e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644c:	4b08      	ldr	r3, [pc, #32]	; (8006470 <xTaskGetSchedulerState+0x38>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006454:	2302      	movs	r3, #2
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	e001      	b.n	800645e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800645e:	687b      	ldr	r3, [r7, #4]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	2000091c 	.word	0x2000091c
 8006470:	20000938 	.word	0x20000938

08006474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d06e      	beq.n	8006568 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800648a:	4b3a      	ldr	r3, [pc, #232]	; (8006574 <xTaskPriorityDisinherit+0x100>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d00a      	beq.n	80064aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60fb      	str	r3, [r7, #12]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60bb      	str	r3, [r7, #8]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064cc:	1e5a      	subs	r2, r3, #1
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	429a      	cmp	r2, r3
 80064dc:	d044      	beq.n	8006568 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d140      	bne.n	8006568 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fdf3 	bl	80050d6 <uxListRemove>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d115      	bne.n	8006522 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	491f      	ldr	r1, [pc, #124]	; (8006578 <xTaskPriorityDisinherit+0x104>)
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xTaskPriorityDisinherit+0xae>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	2201      	movs	r2, #1
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43da      	mvns	r2, r3
 8006518:	4b18      	ldr	r3, [pc, #96]	; (800657c <xTaskPriorityDisinherit+0x108>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4013      	ands	r3, r2
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <xTaskPriorityDisinherit+0x108>)
 8006520:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f1c3 0207 	rsb	r2, r3, #7
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	2201      	movs	r2, #1
 800653c:	409a      	lsls	r2, r3
 800653e:	4b0f      	ldr	r3, [pc, #60]	; (800657c <xTaskPriorityDisinherit+0x108>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	4a0d      	ldr	r2, [pc, #52]	; (800657c <xTaskPriorityDisinherit+0x108>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <xTaskPriorityDisinherit+0x104>)
 8006556:	441a      	add	r2, r3
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7fe fd5c 	bl	800501c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006568:	697b      	ldr	r3, [r7, #20]
	}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000810 	.word	0x20000810
 8006578:	20000814 	.word	0x20000814
 800657c:	20000918 	.word	0x20000918

08006580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800658a:	4b29      	ldr	r3, [pc, #164]	; (8006630 <prvAddCurrentTaskToDelayedList+0xb0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3304      	adds	r3, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fd9d 	bl	80050d6 <uxListRemove>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	2201      	movs	r2, #1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43da      	mvns	r2, r3
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4013      	ands	r3, r2
 80065b6:	4a20      	ldr	r2, [pc, #128]	; (8006638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d10a      	bne.n	80065d8 <prvAddCurrentTaskToDelayedList+0x58>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4619      	mov	r1, r3
 80065d0:	481a      	ldr	r0, [pc, #104]	; (800663c <prvAddCurrentTaskToDelayedList+0xbc>)
 80065d2:	f7fe fd23 	bl	800501c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065d6:	e026      	b.n	8006626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065e0:	4b14      	ldr	r3, [pc, #80]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d209      	bcs.n	8006604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f0:	4b13      	ldr	r3, [pc, #76]	; (8006640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7fe fd31 	bl	8005064 <vListInsert>
}
 8006602:	e010      	b.n	8006626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvAddCurrentTaskToDelayedList+0xb4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fe fd27 	bl	8005064 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d202      	bcs.n	8006626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000914 	.word	0x20000914
 8006634:	20000810 	.word	0x20000810
 8006638:	20000918 	.word	0x20000918
 800663c:	200008fc 	.word	0x200008fc
 8006640:	200008cc 	.word	0x200008cc
 8006644:	200008c8 	.word	0x200008c8
 8006648:	20000930 	.word	0x20000930

0800664c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b04      	subs	r3, #4
 800665c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b04      	subs	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b04      	subs	r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <pxPortInitialiseStack+0x64>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b14      	subs	r3, #20
 8006686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3b04      	subs	r3, #4
 8006692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f06f 0202 	mvn.w	r2, #2
 800669a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3b20      	subs	r3, #32
 80066a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066a2:	68fb      	ldr	r3, [r7, #12]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	080066b5 	.word	0x080066b5

080066b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <prvTaskExitError+0x54>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d00a      	beq.n	80066de <prvTaskExitError+0x2a>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	60fb      	str	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <prvTaskExitError+0x28>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	60bb      	str	r3, [r7, #8]
}
 80066f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066f2:	bf00      	nop
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0fc      	beq.n	80066f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000024 	.word	0x20000024
 800670c:	00000000 	.word	0x00000000

08006710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <pxCurrentTCBConst2>)
 8006712:	6819      	ldr	r1, [r3, #0]
 8006714:	6808      	ldr	r0, [r1, #0]
 8006716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f380 8809 	msr	PSP, r0
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	4770      	bx	lr
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst2>:
 8006730:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006738:	4808      	ldr	r0, [pc, #32]	; (800675c <prvPortStartFirstTask+0x24>)
 800673a:	6800      	ldr	r0, [r0, #0]
 800673c:	6800      	ldr	r0, [r0, #0]
 800673e:	f380 8808 	msr	MSP, r0
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8814 	msr	CONTROL, r0
 800674a:	b662      	cpsie	i
 800674c:	b661      	cpsie	f
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	df00      	svc	0
 8006758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800675a:	bf00      	nop
 800675c:	e000ed08 	.word	0xe000ed08

08006760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006766:	4b46      	ldr	r3, [pc, #280]	; (8006880 <xPortStartScheduler+0x120>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a46      	ldr	r2, [pc, #280]	; (8006884 <xPortStartScheduler+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10a      	bne.n	8006786 <xPortStartScheduler+0x26>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006786:	4b3e      	ldr	r3, [pc, #248]	; (8006880 <xPortStartScheduler+0x120>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <xPortStartScheduler+0x128>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10a      	bne.n	80067a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <xPortStartScheduler+0x12c>)
 80067a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <xPortStartScheduler+0x130>)
 80067cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <xPortStartScheduler+0x134>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d4:	e009      	b.n	80067ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <xPortStartScheduler+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a2d      	ldr	r2, [pc, #180]	; (8006894 <xPortStartScheduler+0x134>)
 80067de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d0ef      	beq.n	80067d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067f6:	4b27      	ldr	r3, [pc, #156]	; (8006894 <xPortStartScheduler+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00a      	beq.n	8006818 <xPortStartScheduler+0xb8>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60bb      	str	r3, [r7, #8]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006818:	4b1e      	ldr	r3, [pc, #120]	; (8006894 <xPortStartScheduler+0x134>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <xPortStartScheduler+0x134>)
 8006820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006822:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <xPortStartScheduler+0x134>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <xPortStartScheduler+0x134>)
 800682c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <xPortStartScheduler+0x138>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <xPortStartScheduler+0x138>)
 800683c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <xPortStartScheduler+0x138>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a14      	ldr	r2, [pc, #80]	; (8006898 <xPortStartScheduler+0x138>)
 8006848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800684c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800684e:	f000 f8dd 	bl	8006a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <xPortStartScheduler+0x13c>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006858:	f000 f8fc 	bl	8006a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xPortStartScheduler+0x140>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <xPortStartScheduler+0x140>)
 8006862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006868:	f7ff ff66 	bl	8006738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800686c:	f7ff fba8 	bl	8005fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8006870:	f7ff ff20 	bl	80066b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed00 	.word	0xe000ed00
 8006884:	410fc271 	.word	0x410fc271
 8006888:	410fc270 	.word	0x410fc270
 800688c:	e000e400 	.word	0xe000e400
 8006890:	2000093c 	.word	0x2000093c
 8006894:	20000940 	.word	0x20000940
 8006898:	e000ed20 	.word	0xe000ed20
 800689c:	20000024 	.word	0x20000024
 80068a0:	e000ef34 	.word	0xe000ef34

080068a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	607b      	str	r3, [r7, #4]
}
 80068bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <vPortEnterCritical+0x58>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <vPortEnterCritical+0x58>)
 80068c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c8:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <vPortEnterCritical+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10f      	bne.n	80068f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortEnterCritical+0x5c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	603b      	str	r3, [r7, #0]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vPortEnterCritical+0x4a>
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20000024 	.word	0x20000024
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <vPortExitCritical+0x50>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vPortExitCritical+0x24>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <vPortExitCritical+0x50>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <vPortExitCritical+0x50>)
 8006930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <vPortExitCritical+0x50>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <vPortExitCritical+0x42>
 800693a:	2300      	movs	r3, #0
 800693c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000024 	.word	0x20000024
	...

08006960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006960:	f3ef 8009 	mrs	r0, PSP
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <pxCurrentTCBConst>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f01e 0f10 	tst.w	lr, #16
 8006970:	bf08      	it	eq
 8006972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006984:	f380 8811 	msr	BASEPRI, r0
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f7ff fb16 	bl	8005fc0 <vTaskSwitchContext>
 8006994:	f04f 0000 	mov.w	r0, #0
 8006998:	f380 8811 	msr	BASEPRI, r0
 800699c:	bc09      	pop	{r0, r3}
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	6808      	ldr	r0, [r1, #0]
 80069a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a6:	f01e 0f10 	tst.w	lr, #16
 80069aa:	bf08      	it	eq
 80069ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069b0:	f380 8809 	msr	PSP, r0
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst>:
 80069c0:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e2:	f7ff fa35 	bl	8005e50 <xTaskIncrementTick>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <SysTick_Handler+0x40>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <vPortSetupTimerInterrupt+0x38>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <vPortSetupTimerInterrupt+0x3c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <vPortSetupTimerInterrupt+0x40>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <vPortSetupTimerInterrupt+0x44>)
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	e000e010 	.word	0xe000e010
 8006a44:	e000e018 	.word	0xe000e018
 8006a48:	20000004 	.word	0x20000004
 8006a4c:	10624dd3 	.word	0x10624dd3
 8006a50:	e000e014 	.word	0xe000e014

08006a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a64 <vPortEnableVFP+0x10>
 8006a58:	6801      	ldr	r1, [r0, #0]
 8006a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a5e:	6001      	str	r1, [r0, #0]
 8006a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a62:	bf00      	nop
 8006a64:	e000ed88 	.word	0xe000ed88

08006a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a74:	f7ff f932 	bl	8005cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a78:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <pvPortMalloc+0x180>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a80:	f000 f920 	bl	8006cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a84:	4b59      	ldr	r3, [pc, #356]	; (8006bec <pvPortMalloc+0x184>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8093 	bne.w	8006bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01d      	beq.n	8006ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a98:	2208      	movs	r2, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d014      	beq.n	8006ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	617b      	str	r3, [r7, #20]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d06e      	beq.n	8006bb8 <pvPortMalloc+0x150>
 8006ada:	4b45      	ldr	r3, [pc, #276]	; (8006bf0 <pvPortMalloc+0x188>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d869      	bhi.n	8006bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ae4:	4b43      	ldr	r3, [pc, #268]	; (8006bf4 <pvPortMalloc+0x18c>)
 8006ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ae8:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <pvPortMalloc+0x18c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aee:	e004      	b.n	8006afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d903      	bls.n	8006b0c <pvPortMalloc+0xa4>
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f1      	bne.n	8006af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <pvPortMalloc+0x180>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d050      	beq.n	8006bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	2308      	movs	r3, #8
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d91f      	bls.n	8006b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <pvPortMalloc+0xf8>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	613b      	str	r3, [r7, #16]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b72:	69b8      	ldr	r0, [r7, #24]
 8006b74:	f000 f908 	bl	8006d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <pvPortMalloc+0x190>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d203      	bcs.n	8006b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b92:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <pvPortMalloc+0x190>)
 8006b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <pvPortMalloc+0x184>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <pvPortMalloc+0x194>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <pvPortMalloc+0x194>)
 8006bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bb8:	f7ff f89e 	bl	8005cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <pvPortMalloc+0x174>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60fb      	str	r3, [r7, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <pvPortMalloc+0x172>
	return pvReturn;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3728      	adds	r7, #40	; 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	2000454c 	.word	0x2000454c
 8006bec:	20004560 	.word	0x20004560
 8006bf0:	20004550 	.word	0x20004550
 8006bf4:	20004544 	.word	0x20004544
 8006bf8:	20004554 	.word	0x20004554
 8006bfc:	20004558 	.word	0x20004558

08006c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04d      	beq.n	8006cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c12:	2308      	movs	r3, #8
 8006c14:	425b      	negs	r3, r3
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	4b24      	ldr	r3, [pc, #144]	; (8006cb8 <vPortFree+0xb8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <vPortFree+0x44>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	60fb      	str	r3, [r7, #12]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <vPortFree+0x62>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60bb      	str	r3, [r7, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <vPortFree+0xb8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01e      	beq.n	8006cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11a      	bne.n	8006cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <vPortFree+0xb8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	401a      	ands	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c88:	f7ff f828 	bl	8005cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <vPortFree+0xbc>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <vPortFree+0xbc>)
 8006c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c9a:	6938      	ldr	r0, [r7, #16]
 8006c9c:	f000 f874 	bl	8006d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <vPortFree+0xc0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a06      	ldr	r2, [pc, #24]	; (8006cc0 <vPortFree+0xc0>)
 8006ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006caa:	f7ff f825 	bl	8005cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20004560 	.word	0x20004560
 8006cbc:	20004550 	.word	0x20004550
 8006cc0:	2000455c 	.word	0x2000455c

08006cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <prvHeapInit+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00c      	beq.n	8006cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <prvHeapInit+0xac>)
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <prvHeapInit+0xb0>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <prvHeapInit+0xb0>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d10:	2208      	movs	r2, #8
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <prvHeapInit+0xb4>)
 8006d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <prvHeapInit+0xb4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <prvHeapInit+0xb4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvHeapInit+0xb4>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <prvHeapInit+0xb8>)
 8006d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <prvHeapInit+0xbc>)
 8006d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <prvHeapInit+0xc0>)
 8006d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	20000944 	.word	0x20000944
 8006d74:	20004544 	.word	0x20004544
 8006d78:	2000454c 	.word	0x2000454c
 8006d7c:	20004554 	.word	0x20004554
 8006d80:	20004550 	.word	0x20004550
 8006d84:	20004560 	.word	0x20004560

08006d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <prvInsertBlockIntoFreeList+0xac>)
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <prvInsertBlockIntoFreeList+0x14>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d8f7      	bhi.n	8006d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4413      	add	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d108      	bne.n	8006dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d118      	bne.n	8006e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <prvInsertBlockIntoFreeList+0xb0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d00d      	beq.n	8006e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	e008      	b.n	8006e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <prvInsertBlockIntoFreeList+0xb0>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e003      	b.n	8006e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d002      	beq.n	8006e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20004544 	.word	0x20004544
 8006e38:	2000454c 	.word	0x2000454c

08006e3c <memset>:
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d100      	bne.n	8006e46 <memset+0xa>
 8006e44:	4770      	bx	lr
 8006e46:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4a:	e7f9      	b.n	8006e40 <memset+0x4>

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4d0d      	ldr	r5, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2600      	movs	r6, #0
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4d0b      	ldr	r5, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f000 f826 	bl	8006eb0 <_init>
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2600      	movs	r6, #0
 8006e6a:	42a6      	cmp	r6, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e74:	4798      	blx	r3
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7e:	4798      	blx	r3
 8006e80:	3601      	adds	r6, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08009084 	.word	0x08009084
 8006e88:	08009084 	.word	0x08009084
 8006e8c:	08009084 	.word	0x08009084
 8006e90:	08009088 	.word	0x08009088

08006e94 <memcpy>:
 8006e94:	440a      	add	r2, r1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9c:	d100      	bne.n	8006ea0 <memcpy+0xc>
 8006e9e:	4770      	bx	lr
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d1f9      	bne.n	8006ea2 <memcpy+0xe>
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <_init>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	bf00      	nop
 8006eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb6:	bc08      	pop	{r3}
 8006eb8:	469e      	mov	lr, r3
 8006eba:	4770      	bx	lr

08006ebc <_fini>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr
